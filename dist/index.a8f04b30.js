// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function (modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      var res = localRequire.resolve(x);
      return res === false ? {} : newRequire(res);
    }

    function resolve(x) {
      var id = modules[name][1][x];
      return id != null ? id : x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [
      function (require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function () {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function () {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"dAPrZ":[function(require,module,exports) {
"use strict";
var global = arguments[3];
var HMR_HOST = null;
var HMR_PORT = null;
var HMR_SECURE = false;
var HMR_ENV_HASH = "d6ea1d42532a7575";
module.bundle.HMR_BUNDLE_ID = "62ba0103a8f04b30";
/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE, chrome, browser, globalThis, __parcel__import__, __parcel__importScripts__, ServiceWorkerGlobalScope */ /*::
import type {
  HMRAsset,
  HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
  (string): mixed;
  cache: {|[string]: ParcelModule|};
  hotData: mixed;
  Module: any;
  parent: ?ParcelRequire;
  isParcelRequire: true;
  modules: {|[string]: [Function, {|[string]: string|}]|};
  HMR_BUNDLE_ID: string;
  root: ParcelRequire;
}
interface ParcelModule {
  hot: {|
    data: mixed,
    accept(cb: (Function) => void): void,
    dispose(cb: (mixed) => void): void,
    // accept(deps: Array<string> | string, cb: (Function) => void): void,
    // decline(): void,
    _acceptCallbacks: Array<(Function) => void>,
    _disposeCallbacks: Array<(mixed) => void>,
  |};
}
interface ExtensionContext {
  runtime: {|
    reload(): void,
    getURL(url: string): string;
    getManifest(): {manifest_version: number, ...};
  |};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
declare var chrome: ExtensionContext;
declare var browser: ExtensionContext;
declare var __parcel__import__: (string) => Promise<void>;
declare var __parcel__importScripts__: (string) => Promise<void>;
declare var globalThis: typeof self;
declare var ServiceWorkerGlobalScope: Object;
*/ var OVERLAY_ID = "__parcel__error__overlay__";
var OldModule = module.bundle.Module;
function Module(moduleName) {
    OldModule.call(this, moduleName);
    this.hot = {
        data: module.bundle.hotData,
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function(fn) {
            this._acceptCallbacks.push(fn || function() {});
        },
        dispose: function(fn) {
            this._disposeCallbacks.push(fn);
        }
    };
    module.bundle.hotData = undefined;
}
module.bundle.Module = Module;
var checkedAssets, acceptedAssets, assetsToAccept /*: Array<[ParcelRequire, string]> */ ;
function getHostname() {
    return HMR_HOST || (location.protocol.indexOf("http") === 0 ? location.hostname : "localhost");
}
function getPort() {
    return HMR_PORT || location.port;
} // eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== "undefined") {
    var hostname = getHostname();
    var port = getPort();
    var protocol = HMR_SECURE || location.protocol == "https:" && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? "wss" : "ws";
    var ws = new WebSocket(protocol + "://" + hostname + (port ? ":" + port : "") + "/"); // Web extension context
    var extCtx = typeof chrome === "undefined" ? typeof browser === "undefined" ? null : browser : chrome; // Safari doesn't support sourceURL in error stacks.
    // eval may also be disabled via CSP, so do a quick check.
    var supportsSourceURL = false;
    try {
        (0, eval)('throw new Error("test"); //# sourceURL=test.js');
    } catch (err) {
        supportsSourceURL = err.stack.includes("test.js");
    } // $FlowFixMe
    ws.onmessage = async function(event) {
        checkedAssets = {} /*: {|[string]: boolean|} */ ;
        acceptedAssets = {} /*: {|[string]: boolean|} */ ;
        assetsToAccept = [];
        var data = JSON.parse(event.data);
        if (data.type === "update") {
            // Remove error overlay if there is one
            if (typeof document !== "undefined") removeErrorOverlay();
            let assets = data.assets.filter((asset)=>asset.envHash === HMR_ENV_HASH); // Handle HMR Update
            let handled = assets.every((asset)=>{
                return asset.type === "css" || asset.type === "js" && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
            });
            if (handled) {
                console.clear(); // Dispatch custom event so other runtimes (e.g React Refresh) are aware.
                if (typeof window !== "undefined" && typeof CustomEvent !== "undefined") window.dispatchEvent(new CustomEvent("parcelhmraccept"));
                await hmrApplyUpdates(assets);
                for(var i = 0; i < assetsToAccept.length; i++){
                    var id = assetsToAccept[i][1];
                    if (!acceptedAssets[id]) hmrAcceptRun(assetsToAccept[i][0], id);
                }
            } else fullReload();
        }
        if (data.type === "error") {
            // Log parcel errors to console
            for (let ansiDiagnostic of data.diagnostics.ansi){
                let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
                console.error("\uD83D\uDEA8 [parcel]: " + ansiDiagnostic.message + "\n" + stack + "\n\n" + ansiDiagnostic.hints.join("\n"));
            }
            if (typeof document !== "undefined") {
                // Render the fancy html overlay
                removeErrorOverlay();
                var overlay = createErrorOverlay(data.diagnostics.html); // $FlowFixMe
                document.body.appendChild(overlay);
            }
        }
    };
    ws.onerror = function(e) {
        console.error(e.message);
    };
    ws.onclose = function() {
        console.warn("[parcel] \uD83D\uDEA8 Connection to the HMR server was lost");
    };
}
function removeErrorOverlay() {
    var overlay = document.getElementById(OVERLAY_ID);
    if (overlay) {
        overlay.remove();
        console.log("[parcel] ✨ Error resolved");
    }
}
function createErrorOverlay(diagnostics) {
    var overlay = document.createElement("div");
    overlay.id = OVERLAY_ID;
    let errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
    for (let diagnostic of diagnostics){
        let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame)=>{
            return `${p}
<a href="/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}" style="text-decoration: underline; color: #888" onclick="fetch(this.href); return false">${frame.location}</a>
${frame.code}`;
        }, "") : diagnostic.stack;
        errorHTML += `
      <div>
        <div style="font-size: 18px; font-weight: bold; margin-top: 20px;">
          🚨 ${diagnostic.message}
        </div>
        <pre>${stack}</pre>
        <div>
          ${diagnostic.hints.map((hint)=>"<div>\uD83D\uDCA1 " + hint + "</div>").join("")}
        </div>
        ${diagnostic.documentation ? `<div>📝 <a style="color: violet" href="${diagnostic.documentation}" target="_blank">Learn more</a></div>` : ""}
      </div>
    `;
    }
    errorHTML += "</div>";
    overlay.innerHTML = errorHTML;
    return overlay;
}
function fullReload() {
    if ("reload" in location) location.reload();
    else if (extCtx && extCtx.runtime && extCtx.runtime.reload) extCtx.runtime.reload();
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
    var modules = bundle.modules;
    if (!modules) return [];
    var parents = [];
    var k, d, dep;
    for(k in modules)for(d in modules[k][1]){
        dep = modules[k][1][d];
        if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) parents.push([
            bundle,
            k
        ]);
    }
    if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
    return parents;
}
function updateLink(link) {
    var newLink = link.cloneNode();
    newLink.onload = function() {
        if (link.parentNode !== null) // $FlowFixMe
        link.parentNode.removeChild(link);
    };
    newLink.setAttribute("href", link.getAttribute("href").split("?")[0] + "?" + Date.now()); // $FlowFixMe
    link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
    if (cssTimeout) return;
    cssTimeout = setTimeout(function() {
        var links = document.querySelectorAll('link[rel="stylesheet"]');
        for(var i = 0; i < links.length; i++){
            // $FlowFixMe[incompatible-type]
            var href = links[i].getAttribute("href");
            var hostname = getHostname();
            var servedFromHMRServer = hostname === "localhost" ? new RegExp("^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):" + getPort()).test(href) : href.indexOf(hostname + ":" + getPort());
            var absolute = /^https?:\/\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;
            if (!absolute) updateLink(links[i]);
        }
        cssTimeout = null;
    }, 50);
}
function hmrDownload(asset) {
    if (asset.type === "js") {
        if (typeof document !== "undefined") {
            let script = document.createElement("script");
            script.src = asset.url + "?t=" + Date.now();
            if (asset.outputFormat === "esmodule") script.type = "module";
            return new Promise((resolve, reject)=>{
                var _document$head;
                script.onload = ()=>resolve(script);
                script.onerror = reject;
                (_document$head = document.head) === null || _document$head === void 0 || _document$head.appendChild(script);
            });
        } else if (typeof importScripts === "function") {
            // Worker scripts
            if (asset.outputFormat === "esmodule") return import(asset.url + "?t=" + Date.now());
            else return new Promise((resolve, reject)=>{
                try {
                    importScripts(asset.url + "?t=" + Date.now());
                    resolve();
                } catch (err) {
                    reject(err);
                }
            });
        }
    }
}
async function hmrApplyUpdates(assets) {
    global.parcelHotUpdate = Object.create(null);
    let scriptsToRemove;
    try {
        // If sourceURL comments aren't supported in eval, we need to load
        // the update from the dev server over HTTP so that stack traces
        // are correct in errors/logs. This is much slower than eval, so
        // we only do it if needed (currently just Safari).
        // https://bugs.webkit.org/show_bug.cgi?id=137297
        // This path is also taken if a CSP disallows eval.
        if (!supportsSourceURL) {
            let promises = assets.map((asset)=>{
                var _hmrDownload;
                return (_hmrDownload = hmrDownload(asset)) === null || _hmrDownload === void 0 ? void 0 : _hmrDownload.catch((err)=>{
                    // Web extension bugfix for Chromium
                    // https://bugs.chromium.org/p/chromium/issues/detail?id=1255412#c12
                    if (extCtx && extCtx.runtime && extCtx.runtime.getManifest().manifest_version == 3) {
                        if (typeof ServiceWorkerGlobalScope != "undefined" && global instanceof ServiceWorkerGlobalScope) {
                            extCtx.runtime.reload();
                            return;
                        }
                        asset.url = extCtx.runtime.getURL("/__parcel_hmr_proxy__?url=" + encodeURIComponent(asset.url + "?t=" + Date.now()));
                        return hmrDownload(asset);
                    }
                    throw err;
                });
            });
            scriptsToRemove = await Promise.all(promises);
        }
        assets.forEach(function(asset) {
            hmrApply(module.bundle.root, asset);
        });
    } finally{
        delete global.parcelHotUpdate;
        if (scriptsToRemove) scriptsToRemove.forEach((script)=>{
            if (script) {
                var _document$head2;
                (_document$head2 = document.head) === null || _document$head2 === void 0 || _document$head2.removeChild(script);
            }
        });
    }
}
function hmrApply(bundle, asset) {
    var modules = bundle.modules;
    if (!modules) return;
    if (asset.type === "css") reloadCSS();
    else if (asset.type === "js") {
        let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
        if (deps) {
            if (modules[asset.id]) {
                // Remove dependencies that are removed and will become orphaned.
                // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.
                let oldDeps = modules[asset.id][1];
                for(let dep in oldDeps)if (!deps[dep] || deps[dep] !== oldDeps[dep]) {
                    let id = oldDeps[dep];
                    let parents = getParents(module.bundle.root, id);
                    if (parents.length === 1) hmrDelete(module.bundle.root, id);
                }
            }
            if (supportsSourceURL) // Global eval. We would use `new Function` here but browser
            // support for source maps is better with eval.
            (0, eval)(asset.output);
             // $FlowFixMe
            let fn = global.parcelHotUpdate[asset.id];
            modules[asset.id] = [
                fn,
                deps
            ];
        } else if (bundle.parent) hmrApply(bundle.parent, asset);
    }
}
function hmrDelete(bundle, id) {
    let modules = bundle.modules;
    if (!modules) return;
    if (modules[id]) {
        // Collect dependencies that will become orphaned when this module is deleted.
        let deps = modules[id][1];
        let orphans = [];
        for(let dep in deps){
            let parents = getParents(module.bundle.root, deps[dep]);
            if (parents.length === 1) orphans.push(deps[dep]);
        } // Delete the module. This must be done before deleting dependencies in case of circular dependencies.
        delete modules[id];
        delete bundle.cache[id]; // Now delete the orphans.
        orphans.forEach((id)=>{
            hmrDelete(module.bundle.root, id);
        });
    } else if (bundle.parent) hmrDelete(bundle.parent, id);
}
function hmrAcceptCheck(bundle, id, depsByBundle) {
    if (hmrAcceptCheckOne(bundle, id, depsByBundle)) return true;
     // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.
    let parents = getParents(module.bundle.root, id);
    let accepted = false;
    while(parents.length > 0){
        let v = parents.shift();
        let a = hmrAcceptCheckOne(v[0], v[1], null);
        if (a) // If this parent accepts, stop traversing upward, but still consider siblings.
        accepted = true;
        else {
            // Otherwise, queue the parents in the next level upward.
            let p = getParents(module.bundle.root, v[1]);
            if (p.length === 0) {
                // If there are no parents, then we've reached an entry without accepting. Reload.
                accepted = false;
                break;
            }
            parents.push(...p);
        }
    }
    return accepted;
}
function hmrAcceptCheckOne(bundle, id, depsByBundle) {
    var modules = bundle.modules;
    if (!modules) return;
    if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
        // If we reached the root bundle without finding where the asset should go,
        // there's nothing to do. Mark as "accepted" so we don't reload the page.
        if (!bundle.parent) return true;
        return hmrAcceptCheck(bundle.parent, id, depsByBundle);
    }
    if (checkedAssets[id]) return true;
    checkedAssets[id] = true;
    var cached = bundle.cache[id];
    assetsToAccept.push([
        bundle,
        id
    ]);
    if (!cached || cached.hot && cached.hot._acceptCallbacks.length) return true;
}
function hmrAcceptRun(bundle, id) {
    var cached = bundle.cache[id];
    bundle.hotData = {};
    if (cached && cached.hot) cached.hot.data = bundle.hotData;
    if (cached && cached.hot && cached.hot._disposeCallbacks.length) cached.hot._disposeCallbacks.forEach(function(cb) {
        cb(bundle.hotData);
    });
    delete bundle.cache[id];
    bundle(id);
    cached = bundle.cache[id];
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) cached.hot._acceptCallbacks.forEach(function(cb) {
        var assetsToAlsoAccept = cb(function() {
            return getParents(module.bundle.root, id);
        });
        if (assetsToAlsoAccept && assetsToAccept.length) // $FlowFixMe[method-unbinding]
        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
    });
    acceptedAssets[id] = true;
}

},{}],"5AKj5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _awsJs = require("./aws.js");
var _awsJsDefault = parcelHelpers.interopDefault(_awsJs);
var _rankSelectJs = require("./rankSelect.js");
var _calculationsJs = require("./calculations.js");
var _resultsJs = require("./results.js");
var _resetHomeViewJs = require("./resetHomeView.js");
let db = new (0, _awsJsDefault.default)();
// Returns the contents of the games table
async function getGames() {
    const games = await db.getTableContents("games");
    return games;
}
// Generate game tile HTML
function generateGameSelectHTML(name, imgLink, id) {
    return `<div class='gameTile' id="${id}" class="gameSelectButton"><img src=${imgLink}><h3>${name}</h3></div>`;
}
// Returns an array of games (not display names)
async function createGamesList() {
    const games = await getGames();
    gamesList = new Array();
    games.Items.map((game)=>{
        gamesList.push(game.game.S);
    });
    return gamesList;
}
// Goes through each game tile and removes 'selected' class
function removeSelectedClass(gameTiles) {
    gameTiles.forEach((gameTile)=>{
        gameTile.classList.remove("selected");
    });
}
// Deletes all rank html and TODO load skeleton
function reloadRanks() {
    document.querySelector("#rankSelect").innerHTML = "";
//set skeleton screen
}
function switchToResults() {
    document.querySelector("#content").innerHTML = '<div id="selectedRankIconPH" class="skeleton"></div><div id="selectedRankTextPH" class="skeleton-text skeleton"></div><div id="eqRanksPHParent"><div id="eqRanksIconPH" class="skeleton"></div><div id="eqRanksIconPH" class="skeleton"></div><div id="eqRanksIconPH" class="skeleton"></div><div id="eqRanksIconPH" class="skeleton"></div><div id="eqRanksIconPH" class="skeleton"></div><div id="eqRanksIconPH" class="skeleton"></div><div id="eqRanksIconPH" class="skeleton"></div><div id="eqRanksIconPH" class="skeleton"></div><div id="eqRanksIconPH" class="skeleton"></div></div>';
}
function deployResults(resultsHTML) {
    document.querySelector("#content").innerHTML = resultsHTML;
    document.querySelector("#backButton").addEventListener("click", (e)=>{
        homeView();
    });
}
async function retrieveGameData(game) {
    let db = new (0, _awsJsDefault.default)();
    let gameData = await db.getTableContents(game.id.S);
    return gameData;
}
async function getAllData(games) {
    let data = {};
    for (const game of games){
        let gameData = await retrieveGameData(game);
        let gameName = game.id.S;
        data[gameName] = gameData;
    }
    return data;
}
/**
 * Adds click listeners to each rank tile
 *
 * @param {Element} rankSelect Pass in the element that holds the rank tiles
 */ function addRankEventListeners(rankSelect) {
    let ranks = rankSelect.childNodes;
    ranks.forEach((rank)=>{
        rank.addEventListener("click", async (e)=>{
            // Happens when a rank tile is clicked
            selectedRank = rank.id;
            removeSelectedClass(ranks);
            // New ranks, so one cant already be selected
            sessionStorage.setItem("isRankSelected", false);
            rank.classList.add("selected");
            console.log("I selected " + selectedRank);
            sessionStorage.setItem("selectedRank", selectedRank);
            // Enable submit button
            document.querySelector("#submitButton").classList.add("enabled");
        });
    });
}
function loginView() {
    document.querySelector("#content").innerHTML = `<div id="loginContainer">
    <h2>Login</h2>
        <form class="login-form">
      <input
        type="text" name='username' id='username' placeholder="Username"
                />
            <input
              type="password" name='password' id='password' placeholder="Password"
        />
        <h3 id="createAnAccount">
        Create an account
        </h3> 
        <h3 id="forgotPassword">
        Forgot your password?
        </h3> <button>LOGIN</button>
      </form>
  </div>`;
    const loginForm = document.querySelector(".login-form");
    loginForm.addEventListener("submit", (event)=>{
        event.preventDefault();
        const username = loginForm.elements["username"];
        const password = loginForm.elements["password"];
        console.log(username.value, password.value);
        fetch("https://jsonplaceholder.typicode.com/posts", {
            method: "POST",
            body: JSON.stringify({
                login: username.value,
                password: password.value,
                userId: 1
            }),
            headers: {
                "Content-type": "application/json; charset=UTF-8"
            }
        }).then((response)=>response.json()).then((json)=>console.log(json));
    });
}
async function homeView() {
    // Reset html for home view
    (0, _resetHomeViewJs.resetHomeView)();
    // List of game ids
    let games = await getGames();
    games = games.Items;
    // Both sections of the first view
    let gameSelect = document.querySelector("#gameSelect");
    let rankSelect = document.querySelector("#rankSelect");
    let gameTiles = [];
    // Create each game tile
    games.forEach((game)=>{
        gameTiles.push(generateGameSelectHTML(game.game.S, `/game_icons/${game.img.S}`, game.id.S));
    });
    // Load HTML into the DOM
    gameSelect.innerHTML = gameTiles.join("");
    // Arrays foreach is what we want
    NodeList.prototype.forEach = Array.prototype.forEach;
    let children = gameSelect.childNodes;
    children.forEach((item)=>{
        item.addEventListener("click", async (e)=>{
            // Any game may have been already selected, so we need to run through each
            removeSelectedClass(children);
            // Disable the submit button
            document.querySelector("#submitButton").classList.replace("enabled", "disabled");
            // Set the session to have the selected game
            sessionStorage.setItem("selectedGame", item.id);
            sessionStorage.setItem("isGameSelected", true);
            // Clear rankSelect and populate with skeleton
            reloadRanks();
            item.classList.add("selected");
            // Build the HTML for the ranks
            let rankHTML = await (0, _rankSelectJs.generateRanksHTML)(item.id);
            // Insert the HTML into the DOM
            rankSelect.innerHTML = rankHTML.join("");
            // Now we wait until a rank is selected, or a new game is selected
            // (which will run this function (lambda?) again)
            addRankEventListeners(rankSelect);
        });
    });
    let submitButton = document.querySelector("#submitButton");
    submitButton.addEventListener("click", async (e)=>{
        if (sessionStorage.getItem("isRankSelected") && sessionStorage.getItem("isRankSelected")) {
            // Scroll to the top of the page
            window.scrollTo(0, 0);
            // Switch to results skeleton
            switchToResults();
            // Grab every game id in the database
            let games = await getGames();
            // Use this to grab all the data for each game
            // This uses a lot of resources but is necessary because
            // each rank percentile equivalent needs to be calculated
            const data = await getAllData(games["Items"]);
            // Grab the HTML for the results
            const eqRanks = (0, _calculationsJs.computeEquivalentRanks)(data);
            // Put the results in the session storage
            sessionStorage.setItem("results", eqRanks);
            const resultsHTML = (0, _resultsJs.generateResultsHTML)(eqRanks, data);
            deployResults(resultsHTML);
        }
    });
}
function resetSelections() {
    sessionStorage.setItem("isGameSelected", false);
    sessionStorage.setItem("isRankSelected", false);
    sessionStorage.setItem("selectedGame", "");
    sessionStorage.setItem("selectedRank", "");
}
function toggleMenu() {
    let icon1 = document.getElementById("a");
    let icon2 = document.getElementById("b");
    let icon3 = document.getElementById("c");
    let nav = document.getElementById("nav");
    let blue = document.getElementById("grey");
    icon1.classList.toggle("a");
    icon2.classList.toggle("c");
    icon3.classList.toggle("b");
    nav.classList.toggle("show");
    nav.classList.toggle("hidden");
    blue.classList.toggle("slide");
}
async function main() {
    //********MENU BUTTON**********************
    let menuButton = document.querySelector(".hamburger-icon");
    menuButton.addEventListener("click", function() {
        toggleMenu();
    });
    const navBar = document.getElementById("nav");
    window.addEventListener("scroll", ()=>{
        if (navBar.classList.contains("show")) toggleMenu();
    });
    //*****************************************
    //***********NAV BUTTONS*******************
    let compareRanks = document.querySelector("#compareRanks");
    let login = document.querySelector("#login");
    let about = document.querySelector("#about");
    compareRanks.addEventListener("click", async (e)=>{
        toggleMenu();
        await homeView();
        resetSelections();
    });
    login.addEventListener("click", (e)=>{
        loginView();
        console.log("a");
        toggleMenu();
    });
    //*****************************************
    // SESSION VARIABLES
    sessionStorage.clear();
    sessionStorage.setItem("isGameSelected", false);
    sessionStorage.setItem("isRankSelected", false);
    sessionStorage.setItem("selectedGame", "");
    sessionStorage.setItem("selectedRank", "");
    await homeView();
}
main();

},{"./aws.js":"bxWuF","./rankSelect.js":"gB3Ml","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3","./calculations.js":"EIpTr","./results.js":"lzTRh","./resetHomeView.js":"c8E9o"}],"bxWuF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _clientCognitoIdentity = require("@aws-sdk/client-cognito-identity");
var _clientDynamodb = require("@aws-sdk/client-dynamodb");
var _credentialProviderCognitoIdentity = require("@aws-sdk/credential-provider-cognito-identity");
const client = new (0, _clientDynamodb.DynamoDBClient)({
    region: "us-west-2",
    credentials: (0, _credentialProviderCognitoIdentity.fromCognitoIdentityPool)({
        client: new (0, _clientCognitoIdentity.CognitoIdentityClient)({
            region: "us-west-2"
        }),
        identityPoolId: "us-west-2:a5938208-e53f-4ba8-a4d8-70eb05172dbf"
    })
});
class Db {
    async getTableContents(tableName) {
        try {
            return await client.send(new (0, _clientDynamodb.ScanCommand)({
                TableName: tableName
            }));
        } catch (err) {
            return err;
        }
    }
    async addClient(credentials) {
        const request = {
            PutItem: {
                TableName: "users",
                Item: {
                    id: {
                        N: "1"
                    },
                    name: {
                        S: "John Doe"
                    },
                    age: {
                        N: "35"
                    }
                }
            }
        };
        try {
            // Write the item to the table
            const response = await client.send(request);
        } catch (err) {
            return err;
        }
    }
    async validateClient(username) {
        const params = {
            TableName: "users",
            Key: {
                username: {
                    S: username
                }
            }
        };
        const getItemCommand = new (0, _clientDynamodb.GetItemCommand)(params);
        client.send(getItemCommand).then((data)=>{
            // The item was retrieved successfully, and the result is available in the "data" variable
            return data;
        }).catch((err)=>{
            // Handle any errors that occurred
            console.error(err);
        });
    }
}
exports.default = Db;

},{"@aws-sdk/client-cognito-identity":"aWIu4","@aws-sdk/client-dynamodb":"lzRhb","@aws-sdk/credential-provider-cognito-identity":"keTcL","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aWIu4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CognitoIdentityServiceException", ()=>(0, _cognitoIdentityServiceException.CognitoIdentityServiceException));
var _cognitoIdentity = require("./CognitoIdentity");
parcelHelpers.exportAll(_cognitoIdentity, exports);
var _cognitoIdentityClient = require("./CognitoIdentityClient");
parcelHelpers.exportAll(_cognitoIdentityClient, exports);
var _commands = require("./commands");
parcelHelpers.exportAll(_commands, exports);
var _models = require("./models");
parcelHelpers.exportAll(_models, exports);
var _pagination = require("./pagination");
parcelHelpers.exportAll(_pagination, exports);
var _cognitoIdentityServiceException = require("./models/CognitoIdentityServiceException");

},{"./CognitoIdentity":"jBrMW","./CognitoIdentityClient":"kMbaB","./commands":"1AyOQ","./models":"5Tgrn","./pagination":"eLuqX","./models/CognitoIdentityServiceException":"l45dy","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jBrMW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CognitoIdentity", ()=>CognitoIdentity);
var _cognitoIdentityClient = require("./CognitoIdentityClient");
var _createIdentityPoolCommand = require("./commands/CreateIdentityPoolCommand");
var _deleteIdentitiesCommand = require("./commands/DeleteIdentitiesCommand");
var _deleteIdentityPoolCommand = require("./commands/DeleteIdentityPoolCommand");
var _describeIdentityCommand = require("./commands/DescribeIdentityCommand");
var _describeIdentityPoolCommand = require("./commands/DescribeIdentityPoolCommand");
var _getCredentialsForIdentityCommand = require("./commands/GetCredentialsForIdentityCommand");
var _getIdCommand = require("./commands/GetIdCommand");
var _getIdentityPoolRolesCommand = require("./commands/GetIdentityPoolRolesCommand");
var _getOpenIdTokenCommand = require("./commands/GetOpenIdTokenCommand");
var _getOpenIdTokenForDeveloperIdentityCommand = require("./commands/GetOpenIdTokenForDeveloperIdentityCommand");
var _getPrincipalTagAttributeMapCommand = require("./commands/GetPrincipalTagAttributeMapCommand");
var _listIdentitiesCommand = require("./commands/ListIdentitiesCommand");
var _listIdentityPoolsCommand = require("./commands/ListIdentityPoolsCommand");
var _listTagsForResourceCommand = require("./commands/ListTagsForResourceCommand");
var _lookupDeveloperIdentityCommand = require("./commands/LookupDeveloperIdentityCommand");
var _mergeDeveloperIdentitiesCommand = require("./commands/MergeDeveloperIdentitiesCommand");
var _setIdentityPoolRolesCommand = require("./commands/SetIdentityPoolRolesCommand");
var _setPrincipalTagAttributeMapCommand = require("./commands/SetPrincipalTagAttributeMapCommand");
var _tagResourceCommand = require("./commands/TagResourceCommand");
var _unlinkDeveloperIdentityCommand = require("./commands/UnlinkDeveloperIdentityCommand");
var _unlinkIdentityCommand = require("./commands/UnlinkIdentityCommand");
var _untagResourceCommand = require("./commands/UntagResourceCommand");
var _updateIdentityPoolCommand = require("./commands/UpdateIdentityPoolCommand");
class CognitoIdentity extends (0, _cognitoIdentityClient.CognitoIdentityClient) {
    createIdentityPool(args, optionsOrCb, cb) {
        const command = new (0, _createIdentityPoolCommand.CreateIdentityPoolCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    }
    deleteIdentities(args, optionsOrCb, cb) {
        const command = new (0, _deleteIdentitiesCommand.DeleteIdentitiesCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    }
    deleteIdentityPool(args, optionsOrCb, cb) {
        const command = new (0, _deleteIdentityPoolCommand.DeleteIdentityPoolCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    }
    describeIdentity(args, optionsOrCb, cb) {
        const command = new (0, _describeIdentityCommand.DescribeIdentityCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    }
    describeIdentityPool(args, optionsOrCb, cb) {
        const command = new (0, _describeIdentityPoolCommand.DescribeIdentityPoolCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    }
    getCredentialsForIdentity(args, optionsOrCb, cb) {
        const command = new (0, _getCredentialsForIdentityCommand.GetCredentialsForIdentityCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    }
    getId(args, optionsOrCb, cb) {
        const command = new (0, _getIdCommand.GetIdCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    }
    getIdentityPoolRoles(args, optionsOrCb, cb) {
        const command = new (0, _getIdentityPoolRolesCommand.GetIdentityPoolRolesCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    }
    getOpenIdToken(args, optionsOrCb, cb) {
        const command = new (0, _getOpenIdTokenCommand.GetOpenIdTokenCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    }
    getOpenIdTokenForDeveloperIdentity(args, optionsOrCb, cb) {
        const command = new (0, _getOpenIdTokenForDeveloperIdentityCommand.GetOpenIdTokenForDeveloperIdentityCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    }
    getPrincipalTagAttributeMap(args, optionsOrCb, cb) {
        const command = new (0, _getPrincipalTagAttributeMapCommand.GetPrincipalTagAttributeMapCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    }
    listIdentities(args, optionsOrCb, cb) {
        const command = new (0, _listIdentitiesCommand.ListIdentitiesCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    }
    listIdentityPools(args, optionsOrCb, cb) {
        const command = new (0, _listIdentityPoolsCommand.ListIdentityPoolsCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    }
    listTagsForResource(args, optionsOrCb, cb) {
        const command = new (0, _listTagsForResourceCommand.ListTagsForResourceCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    }
    lookupDeveloperIdentity(args, optionsOrCb, cb) {
        const command = new (0, _lookupDeveloperIdentityCommand.LookupDeveloperIdentityCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    }
    mergeDeveloperIdentities(args, optionsOrCb, cb) {
        const command = new (0, _mergeDeveloperIdentitiesCommand.MergeDeveloperIdentitiesCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    }
    setIdentityPoolRoles(args, optionsOrCb, cb) {
        const command = new (0, _setIdentityPoolRolesCommand.SetIdentityPoolRolesCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    }
    setPrincipalTagAttributeMap(args, optionsOrCb, cb) {
        const command = new (0, _setPrincipalTagAttributeMapCommand.SetPrincipalTagAttributeMapCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    }
    tagResource(args, optionsOrCb, cb) {
        const command = new (0, _tagResourceCommand.TagResourceCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    }
    unlinkDeveloperIdentity(args, optionsOrCb, cb) {
        const command = new (0, _unlinkDeveloperIdentityCommand.UnlinkDeveloperIdentityCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    }
    unlinkIdentity(args, optionsOrCb, cb) {
        const command = new (0, _unlinkIdentityCommand.UnlinkIdentityCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    }
    untagResource(args, optionsOrCb, cb) {
        const command = new (0, _untagResourceCommand.UntagResourceCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    }
    updateIdentityPool(args, optionsOrCb, cb) {
        const command = new (0, _updateIdentityPoolCommand.UpdateIdentityPoolCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    }
}

},{"./CognitoIdentityClient":"kMbaB","./commands/CreateIdentityPoolCommand":"g3rb4","./commands/DeleteIdentitiesCommand":"c73jn","./commands/DeleteIdentityPoolCommand":"2C6yO","./commands/DescribeIdentityCommand":"72SjC","./commands/DescribeIdentityPoolCommand":"eyYuj","./commands/GetCredentialsForIdentityCommand":"isHNy","./commands/GetIdCommand":"jviA9","./commands/GetIdentityPoolRolesCommand":"90ZuQ","./commands/GetOpenIdTokenCommand":"03mCi","./commands/GetOpenIdTokenForDeveloperIdentityCommand":"gHblr","./commands/GetPrincipalTagAttributeMapCommand":"7GhkB","./commands/ListIdentitiesCommand":"cz0Id","./commands/ListIdentityPoolsCommand":"51xc6","./commands/ListTagsForResourceCommand":"hXa95","./commands/LookupDeveloperIdentityCommand":"1X66X","./commands/MergeDeveloperIdentitiesCommand":"jlRz3","./commands/SetIdentityPoolRolesCommand":"gvZWh","./commands/SetPrincipalTagAttributeMapCommand":"heQzK","./commands/TagResourceCommand":"6llRr","./commands/UnlinkDeveloperIdentityCommand":"5GaDO","./commands/UnlinkIdentityCommand":"d8ig7","./commands/UntagResourceCommand":"8XvTh","./commands/UpdateIdentityPoolCommand":"546f1","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kMbaB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CognitoIdentityClient", ()=>CognitoIdentityClient);
var _configResolver = require("@aws-sdk/config-resolver");
var _middlewareContentLength = require("@aws-sdk/middleware-content-length");
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareHostHeader = require("@aws-sdk/middleware-host-header");
var _middlewareLogger = require("@aws-sdk/middleware-logger");
var _middlewareRecursionDetection = require("@aws-sdk/middleware-recursion-detection");
var _middlewareRetry = require("@aws-sdk/middleware-retry");
var _middlewareSigning = require("@aws-sdk/middleware-signing");
var _middlewareUserAgent = require("@aws-sdk/middleware-user-agent");
var _smithyClient = require("@aws-sdk/smithy-client");
var _endpointParameters = require("./endpoint/EndpointParameters");
var _runtimeConfig = require("./runtimeConfig");
class CognitoIdentityClient extends (0, _smithyClient.Client) {
    constructor(configuration){
        const _config_0 = (0, _runtimeConfig.getRuntimeConfig)(configuration);
        const _config_1 = (0, _endpointParameters.resolveClientEndpointParameters)(_config_0);
        const _config_2 = (0, _configResolver.resolveRegionConfig)(_config_1);
        const _config_3 = (0, _middlewareEndpoint.resolveEndpointConfig)(_config_2);
        const _config_4 = (0, _middlewareRetry.resolveRetryConfig)(_config_3);
        const _config_5 = (0, _middlewareHostHeader.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0, _middlewareSigning.resolveAwsAuthConfig)(_config_5);
        const _config_7 = (0, _middlewareUserAgent.resolveUserAgentConfig)(_config_6);
        super(_config_7);
        this.config = _config_7;
        this.middlewareStack.use((0, _middlewareRetry.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, _middlewareContentLength.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, _middlewareHostHeader.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, _middlewareLogger.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, _middlewareRecursionDetection.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0, _middlewareUserAgent.getUserAgentPlugin)(this.config));
    }
    destroy() {
        super.destroy();
    }
}

},{"@aws-sdk/config-resolver":"2Zj28","@aws-sdk/middleware-content-length":"lrscz","@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-host-header":"8vcXw","@aws-sdk/middleware-logger":"cyEdQ","@aws-sdk/middleware-recursion-detection":"eNPtz","@aws-sdk/middleware-retry":"iRfgc","@aws-sdk/middleware-signing":"apx8g","@aws-sdk/middleware-user-agent":"6uBwp","@aws-sdk/smithy-client":"ats0l","./endpoint/EndpointParameters":"50koJ","./runtimeConfig":"hveG8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2Zj28":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _endpointsConfig = require("./endpointsConfig");
parcelHelpers.exportAll(_endpointsConfig, exports);
var _regionConfig = require("./regionConfig");
parcelHelpers.exportAll(_regionConfig, exports);
var _regionInfo = require("./regionInfo");
parcelHelpers.exportAll(_regionInfo, exports);

},{"./endpointsConfig":"5yre7","./regionConfig":"11qKt","./regionInfo":"4W4U0","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5yre7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _nodeUseDualstackEndpointConfigOptions = require("./NodeUseDualstackEndpointConfigOptions");
parcelHelpers.exportAll(_nodeUseDualstackEndpointConfigOptions, exports);
var _nodeUseFipsEndpointConfigOptions = require("./NodeUseFipsEndpointConfigOptions");
parcelHelpers.exportAll(_nodeUseFipsEndpointConfigOptions, exports);
var _resolveCustomEndpointsConfig = require("./resolveCustomEndpointsConfig");
parcelHelpers.exportAll(_resolveCustomEndpointsConfig, exports);
var _resolveEndpointsConfig = require("./resolveEndpointsConfig");
parcelHelpers.exportAll(_resolveEndpointsConfig, exports);

},{"./NodeUseDualstackEndpointConfigOptions":"8TmVs","./NodeUseFipsEndpointConfigOptions":"huHp0","./resolveCustomEndpointsConfig":"fmKO3","./resolveEndpointsConfig":"abqXi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8TmVs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ENV_USE_DUALSTACK_ENDPOINT", ()=>ENV_USE_DUALSTACK_ENDPOINT);
parcelHelpers.export(exports, "CONFIG_USE_DUALSTACK_ENDPOINT", ()=>CONFIG_USE_DUALSTACK_ENDPOINT);
parcelHelpers.export(exports, "DEFAULT_USE_DUALSTACK_ENDPOINT", ()=>DEFAULT_USE_DUALSTACK_ENDPOINT);
parcelHelpers.export(exports, "NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS", ()=>NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS);
var _utilConfigProvider = require("@aws-sdk/util-config-provider");
const ENV_USE_DUALSTACK_ENDPOINT = "AWS_USE_DUALSTACK_ENDPOINT";
const CONFIG_USE_DUALSTACK_ENDPOINT = "use_dualstack_endpoint";
const DEFAULT_USE_DUALSTACK_ENDPOINT = false;
const NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS = {
    environmentVariableSelector: (env)=>(0, _utilConfigProvider.booleanSelector)(env, ENV_USE_DUALSTACK_ENDPOINT, (0, _utilConfigProvider.SelectorType).ENV),
    configFileSelector: (profile)=>(0, _utilConfigProvider.booleanSelector)(profile, CONFIG_USE_DUALSTACK_ENDPOINT, (0, _utilConfigProvider.SelectorType).CONFIG),
    default: false
};

},{"@aws-sdk/util-config-provider":"cKNJV","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cKNJV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _booleanSelector = require("./booleanSelector");
parcelHelpers.exportAll(_booleanSelector, exports);

},{"./booleanSelector":"a0u8J","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a0u8J":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SelectorType", ()=>SelectorType);
parcelHelpers.export(exports, "booleanSelector", ()=>booleanSelector);
var SelectorType;
(function(SelectorType) {
    SelectorType["ENV"] = "env";
    SelectorType["CONFIG"] = "shared config entry";
})(SelectorType || (SelectorType = {}));
const booleanSelector = (obj, key, type)=>{
    if (!(key in obj)) return undefined;
    if (obj[key] === "true") return true;
    if (obj[key] === "false") return false;
    throw new Error(`Cannot load ${type} "${key}". Expected "true" or "false", got ${obj[key]}.`);
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gkKU3":[function(require,module,exports) {
exports.interopDefault = function(a) {
    return a && a.__esModule ? a : {
        default: a
    };
};
exports.defineInteropFlag = function(a) {
    Object.defineProperty(a, "__esModule", {
        value: true
    });
};
exports.exportAll = function(source, dest) {
    Object.keys(source).forEach(function(key) {
        if (key === "default" || key === "__esModule" || dest.hasOwnProperty(key)) return;
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function() {
                return source[key];
            }
        });
    });
    return dest;
};
exports.export = function(dest, destName, get) {
    Object.defineProperty(dest, destName, {
        enumerable: true,
        get: get
    });
};

},{}],"huHp0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ENV_USE_FIPS_ENDPOINT", ()=>ENV_USE_FIPS_ENDPOINT);
parcelHelpers.export(exports, "CONFIG_USE_FIPS_ENDPOINT", ()=>CONFIG_USE_FIPS_ENDPOINT);
parcelHelpers.export(exports, "DEFAULT_USE_FIPS_ENDPOINT", ()=>DEFAULT_USE_FIPS_ENDPOINT);
parcelHelpers.export(exports, "NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS", ()=>NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS);
var _utilConfigProvider = require("@aws-sdk/util-config-provider");
const ENV_USE_FIPS_ENDPOINT = "AWS_USE_FIPS_ENDPOINT";
const CONFIG_USE_FIPS_ENDPOINT = "use_fips_endpoint";
const DEFAULT_USE_FIPS_ENDPOINT = false;
const NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS = {
    environmentVariableSelector: (env)=>(0, _utilConfigProvider.booleanSelector)(env, ENV_USE_FIPS_ENDPOINT, (0, _utilConfigProvider.SelectorType).ENV),
    configFileSelector: (profile)=>(0, _utilConfigProvider.booleanSelector)(profile, CONFIG_USE_FIPS_ENDPOINT, (0, _utilConfigProvider.SelectorType).CONFIG),
    default: false
};

},{"@aws-sdk/util-config-provider":"cKNJV","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fmKO3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "resolveCustomEndpointsConfig", ()=>resolveCustomEndpointsConfig);
var _utilMiddleware = require("@aws-sdk/util-middleware");
const resolveCustomEndpointsConfig = (input)=>{
    const { endpoint , urlParser  } = input;
    return {
        ...input,
        tls: input.tls ?? true,
        endpoint: (0, _utilMiddleware.normalizeProvider)(typeof endpoint === "string" ? urlParser(endpoint) : endpoint),
        isCustomEndpoint: true,
        useDualstackEndpoint: (0, _utilMiddleware.normalizeProvider)(input.useDualstackEndpoint)
    };
};

},{"@aws-sdk/util-middleware":"49kxo","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"49kxo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _normalizeProvider = require("./normalizeProvider");
parcelHelpers.exportAll(_normalizeProvider, exports);

},{"./normalizeProvider":"64MuQ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"64MuQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "normalizeProvider", ()=>normalizeProvider);
const normalizeProvider = (input)=>{
    if (typeof input === "function") return input;
    const promisified = Promise.resolve(input);
    return ()=>promisified;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"abqXi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "resolveEndpointsConfig", ()=>resolveEndpointsConfig);
var _utilMiddleware = require("@aws-sdk/util-middleware");
var _getEndpointFromRegion = require("./utils/getEndpointFromRegion");
const resolveEndpointsConfig = (input)=>{
    const useDualstackEndpoint = (0, _utilMiddleware.normalizeProvider)(input.useDualstackEndpoint);
    const { endpoint , useFipsEndpoint , urlParser  } = input;
    return {
        ...input,
        tls: input.tls ?? true,
        endpoint: endpoint ? (0, _utilMiddleware.normalizeProvider)(typeof endpoint === "string" ? urlParser(endpoint) : endpoint) : ()=>(0, _getEndpointFromRegion.getEndpointFromRegion)({
                ...input,
                useDualstackEndpoint,
                useFipsEndpoint
            }),
        isCustomEndpoint: !!endpoint,
        useDualstackEndpoint
    };
};

},{"@aws-sdk/util-middleware":"49kxo","./utils/getEndpointFromRegion":"fyuCA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fyuCA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getEndpointFromRegion", ()=>getEndpointFromRegion);
const getEndpointFromRegion = async (input)=>{
    const { tls =true  } = input;
    const region = await input.region();
    const dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);
    if (!dnsHostRegex.test(region)) throw new Error("Invalid region in client config");
    const useDualstackEndpoint = await input.useDualstackEndpoint();
    const useFipsEndpoint = await input.useFipsEndpoint();
    const { hostname  } = await input.regionInfoProvider(region, {
        useDualstackEndpoint,
        useFipsEndpoint
    }) ?? {};
    if (!hostname) throw new Error("Cannot resolve hostname from client config");
    return input.urlParser(`${tls ? "https:" : "http:"}//${hostname}`);
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"11qKt":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _config = require("./config");
parcelHelpers.exportAll(_config, exports);
var _resolveRegionConfig = require("./resolveRegionConfig");
parcelHelpers.exportAll(_resolveRegionConfig, exports);

},{"./config":"4oYBw","./resolveRegionConfig":"jVRc8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4oYBw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "REGION_ENV_NAME", ()=>REGION_ENV_NAME);
parcelHelpers.export(exports, "REGION_INI_NAME", ()=>REGION_INI_NAME);
parcelHelpers.export(exports, "NODE_REGION_CONFIG_OPTIONS", ()=>NODE_REGION_CONFIG_OPTIONS);
parcelHelpers.export(exports, "NODE_REGION_CONFIG_FILE_OPTIONS", ()=>NODE_REGION_CONFIG_FILE_OPTIONS);
const REGION_ENV_NAME = "AWS_REGION";
const REGION_INI_NAME = "region";
const NODE_REGION_CONFIG_OPTIONS = {
    environmentVariableSelector: (env)=>env[REGION_ENV_NAME],
    configFileSelector: (profile)=>profile[REGION_INI_NAME],
    default: ()=>{
        throw new Error("Region is missing");
    }
};
const NODE_REGION_CONFIG_FILE_OPTIONS = {
    preferredFile: "credentials"
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jVRc8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "resolveRegionConfig", ()=>resolveRegionConfig);
var _getRealRegion = require("./getRealRegion");
var _isFipsRegion = require("./isFipsRegion");
const resolveRegionConfig = (input)=>{
    const { region , useFipsEndpoint  } = input;
    if (!region) throw new Error("Region is missing");
    return {
        ...input,
        region: async ()=>{
            if (typeof region === "string") return (0, _getRealRegion.getRealRegion)(region);
            const providedRegion = await region();
            return (0, _getRealRegion.getRealRegion)(providedRegion);
        },
        useFipsEndpoint: async ()=>{
            const providedRegion = typeof region === "string" ? region : await region();
            if ((0, _isFipsRegion.isFipsRegion)(providedRegion)) return true;
            return typeof useFipsEndpoint === "boolean" ? Promise.resolve(useFipsEndpoint) : useFipsEndpoint();
        }
    };
};

},{"./getRealRegion":"hR8Fd","./isFipsRegion":"2XNCR","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hR8Fd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getRealRegion", ()=>getRealRegion);
var _isFipsRegion = require("./isFipsRegion");
const getRealRegion = (region)=>(0, _isFipsRegion.isFipsRegion)(region) ? [
        "fips-aws-global",
        "aws-fips"
    ].includes(region) ? "us-east-1" : region.replace(/fips-(dkr-|prod-)?|-fips/, "") : region;

},{"./isFipsRegion":"2XNCR","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2XNCR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isFipsRegion", ()=>isFipsRegion);
const isFipsRegion = (region)=>typeof region === "string" && (region.startsWith("fips-") || region.endsWith("-fips"));

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4W4U0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _partitionHash = require("./PartitionHash");
parcelHelpers.exportAll(_partitionHash, exports);
var _regionHash = require("./RegionHash");
parcelHelpers.exportAll(_regionHash, exports);
var _getRegionInfo = require("./getRegionInfo");
parcelHelpers.exportAll(_getRegionInfo, exports);

},{"./PartitionHash":"kEZdd","./RegionHash":"99gCS","./getRegionInfo":"kSt8t","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kEZdd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"99gCS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kSt8t":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getRegionInfo", ()=>getRegionInfo);
var _getHostnameFromVariants = require("./getHostnameFromVariants");
var _getResolvedHostname = require("./getResolvedHostname");
var _getResolvedPartition = require("./getResolvedPartition");
var _getResolvedSigningRegion = require("./getResolvedSigningRegion");
const getRegionInfo = (region, { useFipsEndpoint =false , useDualstackEndpoint =false , signingService , regionHash , partitionHash ,  })=>{
    const partition = (0, _getResolvedPartition.getResolvedPartition)(region, {
        partitionHash
    });
    const resolvedRegion = region in regionHash ? region : partitionHash[partition]?.endpoint ?? region;
    const hostnameOptions = {
        useFipsEndpoint,
        useDualstackEndpoint
    };
    const regionHostname = (0, _getHostnameFromVariants.getHostnameFromVariants)(regionHash[resolvedRegion]?.variants, hostnameOptions);
    const partitionHostname = (0, _getHostnameFromVariants.getHostnameFromVariants)(partitionHash[partition]?.variants, hostnameOptions);
    const hostname = (0, _getResolvedHostname.getResolvedHostname)(resolvedRegion, {
        regionHostname,
        partitionHostname
    });
    if (hostname === undefined) throw new Error(`Endpoint resolution failed for: ${{
        resolvedRegion,
        useFipsEndpoint,
        useDualstackEndpoint
    }}`);
    const signingRegion = (0, _getResolvedSigningRegion.getResolvedSigningRegion)(hostname, {
        signingRegion: regionHash[resolvedRegion]?.signingRegion,
        regionRegex: partitionHash[partition].regionRegex,
        useFipsEndpoint
    });
    return {
        partition,
        signingService,
        hostname,
        ...signingRegion && {
            signingRegion
        },
        ...regionHash[resolvedRegion]?.signingService && {
            signingService: regionHash[resolvedRegion].signingService
        }
    };
};

},{"./getHostnameFromVariants":"8KtYj","./getResolvedHostname":"8eniM","./getResolvedPartition":"3lwuq","./getResolvedSigningRegion":"aBIbT","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8KtYj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getHostnameFromVariants", ()=>getHostnameFromVariants);
const getHostnameFromVariants = (variants = [], { useFipsEndpoint , useDualstackEndpoint  })=>variants.find(({ tags  })=>useFipsEndpoint === tags.includes("fips") && useDualstackEndpoint === tags.includes("dualstack"))?.hostname;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8eniM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getResolvedHostname", ()=>getResolvedHostname);
const getResolvedHostname = (resolvedRegion, { regionHostname , partitionHostname  })=>regionHostname ? regionHostname : partitionHostname ? partitionHostname.replace("{region}", resolvedRegion) : undefined;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3lwuq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getResolvedPartition", ()=>getResolvedPartition);
const getResolvedPartition = (region, { partitionHash  })=>Object.keys(partitionHash || {}).find((key)=>partitionHash[key].regions.includes(region)) ?? "aws";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aBIbT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getResolvedSigningRegion", ()=>getResolvedSigningRegion);
const getResolvedSigningRegion = (hostname, { signingRegion , regionRegex , useFipsEndpoint  })=>{
    if (signingRegion) return signingRegion;
    else if (useFipsEndpoint) {
        const regionRegexJs = regionRegex.replace("\\\\", "\\").replace(/^\^/g, "\\.").replace(/\$$/g, "\\.");
        const regionRegexmatchArray = hostname.match(regionRegexJs);
        if (regionRegexmatchArray) return regionRegexmatchArray[0].slice(1, -1);
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lrscz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "contentLengthMiddleware", ()=>contentLengthMiddleware);
parcelHelpers.export(exports, "contentLengthMiddlewareOptions", ()=>contentLengthMiddlewareOptions);
parcelHelpers.export(exports, "getContentLengthPlugin", ()=>getContentLengthPlugin);
var _protocolHttp = require("@aws-sdk/protocol-http");
const CONTENT_LENGTH_HEADER = "content-length";
function contentLengthMiddleware(bodyLengthChecker) {
    return (next)=>async (args)=>{
            const request = args.request;
            if ((0, _protocolHttp.HttpRequest).isInstance(request)) {
                const { body , headers  } = request;
                if (body && Object.keys(headers).map((str)=>str.toLowerCase()).indexOf(CONTENT_LENGTH_HEADER) === -1) try {
                    const length = bodyLengthChecker(body);
                    request.headers = {
                        ...request.headers,
                        [CONTENT_LENGTH_HEADER]: String(length)
                    };
                } catch (error) {}
            }
            return next({
                ...args,
                request
            });
        };
}
const contentLengthMiddlewareOptions = {
    step: "build",
    tags: [
        "SET_CONTENT_LENGTH",
        "CONTENT_LENGTH"
    ],
    name: "contentLengthMiddleware",
    override: true
};
const getContentLengthPlugin = (options)=>({
        applyToStack: (clientStack)=>{
            clientStack.add(contentLengthMiddleware(options.bodyLengthChecker), contentLengthMiddlewareOptions);
        }
    });

},{"@aws-sdk/protocol-http":"lkWtc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lkWtc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _httpHandler = require("./httpHandler");
parcelHelpers.exportAll(_httpHandler, exports);
var _httpRequest = require("./httpRequest");
parcelHelpers.exportAll(_httpRequest, exports);
var _httpResponse = require("./httpResponse");
parcelHelpers.exportAll(_httpResponse, exports);
var _isValidHostname = require("./isValidHostname");
parcelHelpers.exportAll(_isValidHostname, exports);

},{"./httpHandler":"3IgsO","./httpRequest":"1gtod","./httpResponse":"huYvH","./isValidHostname":"1sxUx","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3IgsO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1gtod":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "HttpRequest", ()=>HttpRequest);
class HttpRequest {
    constructor(options){
        this.method = options.method || "GET";
        this.hostname = options.hostname || "localhost";
        this.port = options.port;
        this.query = options.query || {};
        this.headers = options.headers || {};
        this.body = options.body;
        this.protocol = options.protocol ? options.protocol.slice(-1) !== ":" ? `${options.protocol}:` : options.protocol : "https:";
        this.path = options.path ? options.path.charAt(0) !== "/" ? `/${options.path}` : options.path : "/";
    }
    static isInstance(request) {
        if (!request) return false;
        const req = request;
        return "method" in req && "protocol" in req && "hostname" in req && "path" in req && typeof req["query"] === "object" && typeof req["headers"] === "object";
    }
    clone() {
        const cloned = new HttpRequest({
            ...this,
            headers: {
                ...this.headers
            }
        });
        if (cloned.query) cloned.query = cloneQuery(cloned.query);
        return cloned;
    }
}
function cloneQuery(query) {
    return Object.keys(query).reduce((carry, paramName)=>{
        const param = query[paramName];
        return {
            ...carry,
            [paramName]: Array.isArray(param) ? [
                ...param
            ] : param
        };
    }, {});
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"huYvH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "HttpResponse", ()=>HttpResponse);
class HttpResponse {
    constructor(options){
        this.statusCode = options.statusCode;
        this.headers = options.headers || {};
        this.body = options.body;
    }
    static isInstance(response) {
        if (!response) return false;
        const resp = response;
        return typeof resp.statusCode === "number" && typeof resp.headers === "object";
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1sxUx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isValidHostname", ()=>isValidHostname);
function isValidHostname(hostname) {
    const hostPattern = /^[a-z0-9][a-z0-9\.\-]*[a-z0-9]$/;
    return hostPattern.test(hostname);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2LyB3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _adaptors = require("./adaptors");
parcelHelpers.exportAll(_adaptors, exports);
var _endpointMiddleware = require("./endpointMiddleware");
parcelHelpers.exportAll(_endpointMiddleware, exports);
var _getEndpointPlugin = require("./getEndpointPlugin");
parcelHelpers.exportAll(_getEndpointPlugin, exports);
var _resolveEndpointConfig = require("./resolveEndpointConfig");
parcelHelpers.exportAll(_resolveEndpointConfig, exports);
var _types = require("./types");
parcelHelpers.exportAll(_types, exports);

},{"./adaptors":"gkYEO","./endpointMiddleware":"8WJmi","./getEndpointPlugin":"czPqX","./resolveEndpointConfig":"fBgql","./types":"gO2AF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gkYEO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _getEndpointFromInstructions = require("./getEndpointFromInstructions");
parcelHelpers.exportAll(_getEndpointFromInstructions, exports);
var _toEndpointV1 = require("./toEndpointV1");
parcelHelpers.exportAll(_toEndpointV1, exports);

},{"./getEndpointFromInstructions":"eGoe9","./toEndpointV1":"j4qka","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eGoe9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getEndpointFromInstructions", ()=>getEndpointFromInstructions);
parcelHelpers.export(exports, "resolveParams", ()=>resolveParams);
var _serviceCustomizations = require("../service-customizations");
var _createConfigValueProvider = require("./createConfigValueProvider");
const getEndpointFromInstructions = async (commandInput, instructionsSupplier, clientConfig, context)=>{
    const endpointParams = await resolveParams(commandInput, instructionsSupplier, clientConfig);
    if (typeof clientConfig.endpointProvider !== "function") throw new Error("config.endpointProvider is not set.");
    const endpoint = clientConfig.endpointProvider(endpointParams, context);
    return endpoint;
};
const resolveParams = async (commandInput, instructionsSupplier, clientConfig)=>{
    const endpointParams = {};
    const instructions = instructionsSupplier?.getEndpointParameterInstructions?.() || {};
    for (const [name, instruction] of Object.entries(instructions))switch(instruction.type){
        case "staticContextParams":
            endpointParams[name] = instruction.value;
            break;
        case "contextParams":
            endpointParams[name] = commandInput[instruction.name];
            break;
        case "clientContextParams":
        case "builtInParams":
            endpointParams[name] = await (0, _createConfigValueProvider.createConfigValueProvider)(instruction.name, name, clientConfig)();
            break;
        default:
            throw new Error("Unrecognized endpoint parameter instruction: " + JSON.stringify(instruction));
    }
    if (Object.keys(instructions).length === 0) Object.assign(endpointParams, clientConfig);
    if (String(clientConfig.serviceId).toLowerCase() === "s3") await (0, _serviceCustomizations.resolveParamsForS3)(endpointParams);
    return endpointParams;
};

},{"../service-customizations":"4NNqx","./createConfigValueProvider":"j39qU","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4NNqx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _s3 = require("./s3");
parcelHelpers.exportAll(_s3, exports);

},{"./s3":"6HLS0","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6HLS0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "resolveParamsForS3", ()=>resolveParamsForS3);
parcelHelpers.export(exports, "DOT_PATTERN", ()=>DOT_PATTERN);
parcelHelpers.export(exports, "S3_HOSTNAME_PATTERN", ()=>S3_HOSTNAME_PATTERN);
parcelHelpers.export(exports, "isDnsCompatibleBucketName", ()=>isDnsCompatibleBucketName);
parcelHelpers.export(exports, "isArnBucketName", ()=>isArnBucketName);
const resolveParamsForS3 = async (endpointParams)=>{
    const bucket = endpointParams?.Bucket || "";
    if (typeof endpointParams.Bucket === "string") endpointParams.Bucket = bucket.replace(/#/g, encodeURIComponent("#")).replace(/\?/g, encodeURIComponent("?"));
    if (isArnBucketName(bucket)) {
        if (endpointParams.ForcePathStyle === true) throw new Error("Path-style addressing cannot be used with ARN buckets");
    } else if (!isDnsCompatibleBucketName(bucket) || bucket.indexOf(".") !== -1 && !String(endpointParams.Endpoint).startsWith("http:") || bucket.toLowerCase() !== bucket || bucket.length < 3) endpointParams.ForcePathStyle = true;
    if (endpointParams.DisableMultiRegionAccessPoints) {
        endpointParams.disableMultiRegionAccessPoints = true;
        endpointParams.DisableMRAP = true;
    }
    return endpointParams;
};
const DOMAIN_PATTERN = /^[a-z0-9][a-z0-9\.\-]{1,61}[a-z0-9]$/;
const IP_ADDRESS_PATTERN = /(\d+\.){3}\d+/;
const DOTS_PATTERN = /\.\./;
const DOT_PATTERN = /\./;
const S3_HOSTNAME_PATTERN = /^(.+\.)?s3(-fips)?(\.dualstack)?[.-]([a-z0-9-]+)\./;
const isDnsCompatibleBucketName = (bucketName)=>DOMAIN_PATTERN.test(bucketName) && !IP_ADDRESS_PATTERN.test(bucketName) && !DOTS_PATTERN.test(bucketName);
const isArnBucketName = (bucketName)=>{
    const [arn, partition, service, region, account, typeOrId] = bucketName.split(":");
    const isArn = arn === "arn" && bucketName.split(":").length >= 6;
    const isValidArn = [
        arn,
        partition,
        service,
        account,
        typeOrId
    ].filter(Boolean).length === 5;
    if (isArn && !isValidArn) throw new Error(`Invalid ARN: ${bucketName} was an invalid ARN.`);
    return arn === "arn" && !!partition && !!service && !!account && !!typeOrId;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"j39qU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createConfigValueProvider", ()=>createConfigValueProvider);
const createConfigValueProvider = (configKey, canonicalEndpointParamKey, config)=>{
    const configProvider = async ()=>{
        const configValue = config[configKey] ?? config[canonicalEndpointParamKey];
        if (typeof configValue === "function") return configValue();
        return configValue;
    };
    if (configKey === "endpoint" || canonicalEndpointParamKey === "endpoint") return async ()=>{
        const endpoint = await configProvider();
        if (endpoint && typeof endpoint === "object") {
            if ("url" in endpoint) return endpoint.url.href;
            if ("hostname" in endpoint) {
                const { protocol , hostname , port , path  } = endpoint;
                return `${protocol}//${hostname}${port ? ":" + port : ""}${path}`;
            }
        }
        return endpoint;
    };
    return configProvider;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"j4qka":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "toEndpointV1", ()=>toEndpointV1);
var _urlParser = require("@aws-sdk/url-parser");
const toEndpointV1 = (endpoint)=>{
    if (typeof endpoint === "object") {
        if ("url" in endpoint) return (0, _urlParser.parseUrl)(endpoint.url);
        return endpoint;
    }
    return (0, _urlParser.parseUrl)(endpoint);
};

},{"@aws-sdk/url-parser":"7tZsl","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7tZsl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "parseUrl", ()=>parseUrl);
var _querystringParser = require("@aws-sdk/querystring-parser");
const parseUrl = (url)=>{
    if (typeof url === "string") return parseUrl(new URL(url));
    const { hostname , pathname , port , protocol , search  } = url;
    let query;
    if (search) query = (0, _querystringParser.parseQueryString)(search);
    return {
        hostname,
        port: port ? parseInt(port) : undefined,
        protocol,
        path: pathname,
        query
    };
};

},{"@aws-sdk/querystring-parser":"4EJui","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4EJui":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "parseQueryString", ()=>parseQueryString);
function parseQueryString(querystring) {
    const query = {};
    querystring = querystring.replace(/^\?/, "");
    if (querystring) for (const pair of querystring.split("&")){
        let [key, value = null] = pair.split("=");
        key = decodeURIComponent(key);
        if (value) value = decodeURIComponent(value);
        if (!(key in query)) query[key] = value;
        else if (Array.isArray(query[key])) query[key].push(value);
        else query[key] = [
            query[key],
            value
        ];
    }
    return query;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8WJmi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "endpointMiddleware", ()=>endpointMiddleware);
var _getEndpointFromInstructions = require("./adaptors/getEndpointFromInstructions");
const endpointMiddleware = ({ config , instructions ,  })=>{
    return (next, context)=>async (args)=>{
            const endpoint = await (0, _getEndpointFromInstructions.getEndpointFromInstructions)(args.input, {
                getEndpointParameterInstructions () {
                    return instructions;
                }
            }, {
                ...config
            }, context);
            context.endpointV2 = endpoint;
            context.authSchemes = endpoint.properties?.authSchemes;
            const authScheme = context.authSchemes?.[0];
            if (authScheme) {
                context["signing_region"] = authScheme.signingRegion;
                context["signing_service"] = authScheme.signingName;
            }
            return next({
                ...args
            });
        };
};

},{"./adaptors/getEndpointFromInstructions":"eGoe9","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"czPqX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "endpointMiddlewareOptions", ()=>endpointMiddlewareOptions);
parcelHelpers.export(exports, "getEndpointPlugin", ()=>getEndpointPlugin);
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _endpointMiddleware = require("./endpointMiddleware");
const endpointMiddlewareOptions = {
    step: "serialize",
    tags: [
        "ENDPOINT_PARAMETERS",
        "ENDPOINT_V2",
        "ENDPOINT"
    ],
    name: "endpointV2Middleware",
    override: true,
    relation: "before",
    toMiddleware: (0, _middlewareSerde.serializerMiddlewareOption).name
};
const getEndpointPlugin = (config, instructions)=>({
        applyToStack: (clientStack)=>{
            clientStack.addRelativeTo((0, _endpointMiddleware.endpointMiddleware)({
                config,
                instructions
            }), endpointMiddlewareOptions);
        }
    });

},{"@aws-sdk/middleware-serde":"jHrM0","./endpointMiddleware":"8WJmi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jHrM0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _deserializerMiddleware = require("./deserializerMiddleware");
parcelHelpers.exportAll(_deserializerMiddleware, exports);
var _serdePlugin = require("./serdePlugin");
parcelHelpers.exportAll(_serdePlugin, exports);
var _serializerMiddleware = require("./serializerMiddleware");
parcelHelpers.exportAll(_serializerMiddleware, exports);

},{"./deserializerMiddleware":"6n051","./serdePlugin":"eYiHg","./serializerMiddleware":"jOid8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6n051":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "deserializerMiddleware", ()=>deserializerMiddleware);
const deserializerMiddleware = (options, deserializer)=>(next, context)=>async (args)=>{
            const { response  } = await next(args);
            try {
                const parsed = await deserializer(response, options);
                return {
                    response,
                    output: parsed
                };
            } catch (error) {
                Object.defineProperty(error, "$response", {
                    value: response
                });
                throw error;
            }
        };

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eYiHg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "deserializerMiddlewareOption", ()=>deserializerMiddlewareOption);
parcelHelpers.export(exports, "serializerMiddlewareOption", ()=>serializerMiddlewareOption);
parcelHelpers.export(exports, "getSerdePlugin", ()=>getSerdePlugin);
var _deserializerMiddleware = require("./deserializerMiddleware");
var _serializerMiddleware = require("./serializerMiddleware");
const deserializerMiddlewareOption = {
    name: "deserializerMiddleware",
    step: "deserialize",
    tags: [
        "DESERIALIZER"
    ],
    override: true
};
const serializerMiddlewareOption = {
    name: "serializerMiddleware",
    step: "serialize",
    tags: [
        "SERIALIZER"
    ],
    override: true
};
function getSerdePlugin(config, serializer, deserializer) {
    return {
        applyToStack: (commandStack)=>{
            commandStack.add((0, _deserializerMiddleware.deserializerMiddleware)(config, deserializer), deserializerMiddlewareOption);
            commandStack.add((0, _serializerMiddleware.serializerMiddleware)(config, serializer), serializerMiddlewareOption);
        }
    };
}

},{"./deserializerMiddleware":"6n051","./serializerMiddleware":"jOid8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jOid8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "serializerMiddleware", ()=>serializerMiddleware);
const serializerMiddleware = (options, serializer)=>(next, context)=>async (args)=>{
            const endpoint = context.endpointV2?.url && options.urlParser ? async ()=>options.urlParser(context.endpointV2.url) : options.endpoint;
            if (!endpoint) throw new Error("No valid endpoint provider available.");
            const request = await serializer(args.input, {
                ...options,
                endpoint
            });
            return next({
                ...args,
                request
            });
        };

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fBgql":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "resolveEndpointConfig", ()=>resolveEndpointConfig);
var _utilMiddleware = require("@aws-sdk/util-middleware");
var _toEndpointV1 = require("./adaptors/toEndpointV1");
const resolveEndpointConfig = (input)=>{
    const tls = input.tls ?? true;
    const { endpoint  } = input;
    const customEndpointProvider = endpoint != null ? async ()=>(0, _toEndpointV1.toEndpointV1)(await (0, _utilMiddleware.normalizeProvider)(endpoint)()) : undefined;
    const isCustomEndpoint = !!endpoint;
    return {
        ...input,
        endpoint: customEndpointProvider,
        tls,
        isCustomEndpoint,
        useDualstackEndpoint: (0, _utilMiddleware.normalizeProvider)(input.useDualstackEndpoint ?? false),
        useFipsEndpoint: (0, _utilMiddleware.normalizeProvider)(input.useFipsEndpoint ?? false)
    };
};

},{"@aws-sdk/util-middleware":"49kxo","./adaptors/toEndpointV1":"j4qka","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gO2AF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8vcXw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "resolveHostHeaderConfig", ()=>resolveHostHeaderConfig);
parcelHelpers.export(exports, "hostHeaderMiddleware", ()=>hostHeaderMiddleware);
parcelHelpers.export(exports, "hostHeaderMiddlewareOptions", ()=>hostHeaderMiddlewareOptions);
parcelHelpers.export(exports, "getHostHeaderPlugin", ()=>getHostHeaderPlugin);
var _protocolHttp = require("@aws-sdk/protocol-http");
function resolveHostHeaderConfig(input) {
    return input;
}
const hostHeaderMiddleware = (options)=>(next)=>async (args)=>{
            if (!(0, _protocolHttp.HttpRequest).isInstance(args.request)) return next(args);
            const { request  } = args;
            const { handlerProtocol =""  } = options.requestHandler.metadata || {};
            if (handlerProtocol.indexOf("h2") >= 0 && !request.headers[":authority"]) {
                delete request.headers["host"];
                request.headers[":authority"] = "";
            } else if (!request.headers["host"]) request.headers["host"] = request.hostname;
            return next(args);
        };
const hostHeaderMiddlewareOptions = {
    name: "hostHeaderMiddleware",
    step: "build",
    priority: "low",
    tags: [
        "HOST"
    ],
    override: true
};
const getHostHeaderPlugin = (options)=>({
        applyToStack: (clientStack)=>{
            clientStack.add(hostHeaderMiddleware(options), hostHeaderMiddlewareOptions);
        }
    });

},{"@aws-sdk/protocol-http":"lkWtc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cyEdQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _loggerMiddleware = require("./loggerMiddleware");
parcelHelpers.exportAll(_loggerMiddleware, exports);

},{"./loggerMiddleware":"5TRTb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5TRTb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "loggerMiddleware", ()=>loggerMiddleware);
parcelHelpers.export(exports, "loggerMiddlewareOptions", ()=>loggerMiddlewareOptions);
parcelHelpers.export(exports, "getLoggerPlugin", ()=>getLoggerPlugin);
const loggerMiddleware = ()=>(next, context)=>async (args)=>{
            const { clientName , commandName , inputFilterSensitiveLog , logger , outputFilterSensitiveLog  } = context;
            const response = await next(args);
            if (!logger) return response;
            if (typeof logger.info === "function") {
                const { $metadata , ...outputWithoutMetadata } = response.output;
                logger.info({
                    clientName,
                    commandName,
                    input: inputFilterSensitiveLog(args.input),
                    output: outputFilterSensitiveLog(outputWithoutMetadata),
                    metadata: $metadata
                });
            }
            return response;
        };
const loggerMiddlewareOptions = {
    name: "loggerMiddleware",
    tags: [
        "LOGGER"
    ],
    step: "initialize",
    override: true
};
const getLoggerPlugin = (options)=>({
        applyToStack: (clientStack)=>{
            clientStack.add(loggerMiddleware(), loggerMiddlewareOptions);
        }
    });

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eNPtz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "recursionDetectionMiddleware", ()=>recursionDetectionMiddleware);
parcelHelpers.export(exports, "addRecursionDetectionMiddlewareOptions", ()=>addRecursionDetectionMiddlewareOptions);
parcelHelpers.export(exports, "getRecursionDetectionPlugin", ()=>getRecursionDetectionPlugin);
var _protocolHttp = require("@aws-sdk/protocol-http");
var process = require("process");
const TRACE_ID_HEADER_NAME = "X-Amzn-Trace-Id";
const ENV_LAMBDA_FUNCTION_NAME = "AWS_LAMBDA_FUNCTION_NAME";
const ENV_TRACE_ID = "_X_AMZN_TRACE_ID";
const recursionDetectionMiddleware = (options)=>(next)=>async (args)=>{
            const { request  } = args;
            if (!(0, _protocolHttp.HttpRequest).isInstance(request) || options.runtime !== "node" || request.headers.hasOwnProperty(TRACE_ID_HEADER_NAME)) return next(args);
            const functionName = process.env[ENV_LAMBDA_FUNCTION_NAME];
            const traceId = process.env[ENV_TRACE_ID];
            const nonEmptyString = (str)=>typeof str === "string" && str.length > 0;
            if (nonEmptyString(functionName) && nonEmptyString(traceId)) request.headers[TRACE_ID_HEADER_NAME] = traceId;
            return next({
                ...args,
                request
            });
        };
const addRecursionDetectionMiddlewareOptions = {
    step: "build",
    tags: [
        "RECURSION_DETECTION"
    ],
    name: "recursionDetectionMiddleware",
    override: true,
    priority: "low"
};
const getRecursionDetectionPlugin = (options)=>({
        applyToStack: (clientStack)=>{
            clientStack.add(recursionDetectionMiddleware(options), addRecursionDetectionMiddlewareOptions);
        }
    });

},{"@aws-sdk/protocol-http":"lkWtc","process":"d5jf4","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d5jf4":[function(require,module,exports) {
// shim for using process in browser
var process = module.exports = {};
// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.
var cachedSetTimeout;
var cachedClearTimeout;
function defaultSetTimout() {
    throw new Error("setTimeout has not been defined");
}
function defaultClearTimeout() {
    throw new Error("clearTimeout has not been defined");
}
(function() {
    try {
        if (typeof setTimeout === "function") cachedSetTimeout = setTimeout;
        else cachedSetTimeout = defaultSetTimout;
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === "function") cachedClearTimeout = clearTimeout;
        else cachedClearTimeout = defaultClearTimeout;
    } catch (e1) {
        cachedClearTimeout = defaultClearTimeout;
    }
})();
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) //normal enviroments in sane situations
    return setTimeout(fun, 0);
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch (e1) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }
}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) //normal enviroments in sane situations
    return clearTimeout(marker);
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e1) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;
function cleanUpNextTick() {
    if (!draining || !currentQueue) return;
    draining = false;
    if (currentQueue.length) queue = currentQueue.concat(queue);
    else queueIndex = -1;
    if (queue.length) drainQueue();
}
function drainQueue() {
    if (draining) return;
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;
    var len = queue.length;
    while(len){
        currentQueue = queue;
        queue = [];
        while(++queueIndex < len)if (currentQueue) currentQueue[queueIndex].run();
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}
process.nextTick = function(fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) for(var i = 1; i < arguments.length; i++)args[i - 1] = arguments[i];
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) runTimeout(drainQueue);
};
// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function() {
    this.fun.apply(null, this.array);
};
process.title = "browser";
process.browser = true;
process.env = {};
process.argv = [];
process.version = ""; // empty string to avoid regexp issues
process.versions = {};
function noop() {}
process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;
process.listeners = function(name) {
    return [];
};
process.binding = function(name) {
    throw new Error("process.binding is not supported");
};
process.cwd = function() {
    return "/";
};
process.chdir = function(dir) {
    throw new Error("process.chdir is not supported");
};
process.umask = function() {
    return 0;
};

},{}],"iRfgc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _adaptiveRetryStrategy = require("./AdaptiveRetryStrategy");
parcelHelpers.exportAll(_adaptiveRetryStrategy, exports);
var _defaultRateLimiter = require("./DefaultRateLimiter");
parcelHelpers.exportAll(_defaultRateLimiter, exports);
var _standardRetryStrategy = require("./StandardRetryStrategy");
parcelHelpers.exportAll(_standardRetryStrategy, exports);
var _config = require("./config");
parcelHelpers.exportAll(_config, exports);
var _configurations = require("./configurations");
parcelHelpers.exportAll(_configurations, exports);
var _delayDecider = require("./delayDecider");
parcelHelpers.exportAll(_delayDecider, exports);
var _omitRetryHeadersMiddleware = require("./omitRetryHeadersMiddleware");
parcelHelpers.exportAll(_omitRetryHeadersMiddleware, exports);
var _retryDecider = require("./retryDecider");
parcelHelpers.exportAll(_retryDecider, exports);
var _retryMiddleware = require("./retryMiddleware");
parcelHelpers.exportAll(_retryMiddleware, exports);
var _types = require("./types");
parcelHelpers.exportAll(_types, exports);

},{"./AdaptiveRetryStrategy":"baz4p","./DefaultRateLimiter":"MtXf6","./StandardRetryStrategy":"aKC8D","./config":"6JeJL","./configurations":"yfCHr","./delayDecider":"cDTOQ","./omitRetryHeadersMiddleware":"59saf","./retryDecider":"7tHCy","./retryMiddleware":"bRE0G","./types":"5lukc","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"baz4p":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AdaptiveRetryStrategy", ()=>AdaptiveRetryStrategy);
var _config = require("./config");
var _defaultRateLimiter = require("./DefaultRateLimiter");
var _standardRetryStrategy = require("./StandardRetryStrategy");
class AdaptiveRetryStrategy extends (0, _standardRetryStrategy.StandardRetryStrategy) {
    constructor(maxAttemptsProvider, options){
        const { rateLimiter , ...superOptions } = options ?? {};
        super(maxAttemptsProvider, superOptions);
        this.rateLimiter = rateLimiter ?? new (0, _defaultRateLimiter.DefaultRateLimiter)();
        this.mode = (0, _config.RETRY_MODES).ADAPTIVE;
    }
    async retry(next, args) {
        return super.retry(next, args, {
            beforeRequest: async ()=>{
                return this.rateLimiter.getSendToken();
            },
            afterRequest: (response)=>{
                this.rateLimiter.updateClientSendingRate(response);
            }
        });
    }
}

},{"./config":"6JeJL","./DefaultRateLimiter":"MtXf6","./StandardRetryStrategy":"aKC8D","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6JeJL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "RETRY_MODES", ()=>RETRY_MODES);
parcelHelpers.export(exports, "DEFAULT_MAX_ATTEMPTS", ()=>DEFAULT_MAX_ATTEMPTS);
parcelHelpers.export(exports, "DEFAULT_RETRY_MODE", ()=>DEFAULT_RETRY_MODE);
var RETRY_MODES;
(function(RETRY_MODES) {
    RETRY_MODES["STANDARD"] = "standard";
    RETRY_MODES["ADAPTIVE"] = "adaptive";
})(RETRY_MODES || (RETRY_MODES = {}));
const DEFAULT_MAX_ATTEMPTS = 3;
const DEFAULT_RETRY_MODE = RETRY_MODES.STANDARD;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"MtXf6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DefaultRateLimiter", ()=>DefaultRateLimiter);
var _serviceErrorClassification = require("@aws-sdk/service-error-classification");
class DefaultRateLimiter {
    constructor(options){
        this.currentCapacity = 0;
        this.enabled = false;
        this.lastMaxRate = 0;
        this.measuredTxRate = 0;
        this.requestCount = 0;
        this.lastTimestamp = 0;
        this.timeWindow = 0;
        this.beta = options?.beta ?? 0.7;
        this.minCapacity = options?.minCapacity ?? 1;
        this.minFillRate = options?.minFillRate ?? 0.5;
        this.scaleConstant = options?.scaleConstant ?? 0.4;
        this.smooth = options?.smooth ?? 0.8;
        const currentTimeInSeconds = this.getCurrentTimeInSeconds();
        this.lastThrottleTime = currentTimeInSeconds;
        this.lastTxRateBucket = Math.floor(this.getCurrentTimeInSeconds());
        this.fillRate = this.minFillRate;
        this.maxCapacity = this.minCapacity;
    }
    getCurrentTimeInSeconds() {
        return Date.now() / 1000;
    }
    async getSendToken() {
        return this.acquireTokenBucket(1);
    }
    async acquireTokenBucket(amount) {
        if (!this.enabled) return;
        this.refillTokenBucket();
        if (amount > this.currentCapacity) {
            const delay = (amount - this.currentCapacity) / this.fillRate * 1000;
            await new Promise((resolve)=>setTimeout(resolve, delay));
        }
        this.currentCapacity = this.currentCapacity - amount;
    }
    refillTokenBucket() {
        const timestamp = this.getCurrentTimeInSeconds();
        if (!this.lastTimestamp) {
            this.lastTimestamp = timestamp;
            return;
        }
        const fillAmount = (timestamp - this.lastTimestamp) * this.fillRate;
        this.currentCapacity = Math.min(this.maxCapacity, this.currentCapacity + fillAmount);
        this.lastTimestamp = timestamp;
    }
    updateClientSendingRate(response) {
        let calculatedRate;
        this.updateMeasuredRate();
        if ((0, _serviceErrorClassification.isThrottlingError)(response)) {
            const rateToUse = !this.enabled ? this.measuredTxRate : Math.min(this.measuredTxRate, this.fillRate);
            this.lastMaxRate = rateToUse;
            this.calculateTimeWindow();
            this.lastThrottleTime = this.getCurrentTimeInSeconds();
            calculatedRate = this.cubicThrottle(rateToUse);
            this.enableTokenBucket();
        } else {
            this.calculateTimeWindow();
            calculatedRate = this.cubicSuccess(this.getCurrentTimeInSeconds());
        }
        const newRate = Math.min(calculatedRate, 2 * this.measuredTxRate);
        this.updateTokenBucketRate(newRate);
    }
    calculateTimeWindow() {
        this.timeWindow = this.getPrecise(Math.pow(this.lastMaxRate * (1 - this.beta) / this.scaleConstant, 1 / 3));
    }
    cubicThrottle(rateToUse) {
        return this.getPrecise(rateToUse * this.beta);
    }
    cubicSuccess(timestamp) {
        return this.getPrecise(this.scaleConstant * Math.pow(timestamp - this.lastThrottleTime - this.timeWindow, 3) + this.lastMaxRate);
    }
    enableTokenBucket() {
        this.enabled = true;
    }
    updateTokenBucketRate(newRate) {
        this.refillTokenBucket();
        this.fillRate = Math.max(newRate, this.minFillRate);
        this.maxCapacity = Math.max(newRate, this.minCapacity);
        this.currentCapacity = Math.min(this.currentCapacity, this.maxCapacity);
    }
    updateMeasuredRate() {
        const t = this.getCurrentTimeInSeconds();
        const timeBucket = Math.floor(t * 2) / 2;
        this.requestCount++;
        if (timeBucket > this.lastTxRateBucket) {
            const currentRate = this.requestCount / (timeBucket - this.lastTxRateBucket);
            this.measuredTxRate = this.getPrecise(currentRate * this.smooth + this.measuredTxRate * (1 - this.smooth));
            this.requestCount = 0;
            this.lastTxRateBucket = timeBucket;
        }
    }
    getPrecise(num) {
        return parseFloat(num.toFixed(8));
    }
}

},{"@aws-sdk/service-error-classification":"020nY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"020nY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isRetryableByTrait", ()=>isRetryableByTrait);
parcelHelpers.export(exports, "isClockSkewError", ()=>isClockSkewError);
parcelHelpers.export(exports, "isThrottlingError", ()=>isThrottlingError);
parcelHelpers.export(exports, "isTransientError", ()=>isTransientError);
var _constants = require("./constants");
const isRetryableByTrait = (error)=>error.$retryable !== undefined;
const isClockSkewError = (error)=>(0, _constants.CLOCK_SKEW_ERROR_CODES).includes(error.name);
const isThrottlingError = (error)=>error.$metadata?.httpStatusCode === 429 || (0, _constants.THROTTLING_ERROR_CODES).includes(error.name) || error.$retryable?.throttling == true;
const isTransientError = (error)=>(0, _constants.TRANSIENT_ERROR_CODES).includes(error.name) || (0, _constants.NODEJS_TIMEOUT_ERROR_CODES).includes(error?.code || "") || (0, _constants.TRANSIENT_ERROR_STATUS_CODES).includes(error.$metadata?.httpStatusCode || 0);

},{"./constants":"egZQz","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"egZQz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CLOCK_SKEW_ERROR_CODES", ()=>CLOCK_SKEW_ERROR_CODES);
parcelHelpers.export(exports, "THROTTLING_ERROR_CODES", ()=>THROTTLING_ERROR_CODES);
parcelHelpers.export(exports, "TRANSIENT_ERROR_CODES", ()=>TRANSIENT_ERROR_CODES);
parcelHelpers.export(exports, "TRANSIENT_ERROR_STATUS_CODES", ()=>TRANSIENT_ERROR_STATUS_CODES);
parcelHelpers.export(exports, "NODEJS_TIMEOUT_ERROR_CODES", ()=>NODEJS_TIMEOUT_ERROR_CODES);
const CLOCK_SKEW_ERROR_CODES = [
    "AuthFailure",
    "InvalidSignatureException",
    "RequestExpired",
    "RequestInTheFuture",
    "RequestTimeTooSkewed",
    "SignatureDoesNotMatch", 
];
const THROTTLING_ERROR_CODES = [
    "BandwidthLimitExceeded",
    "EC2ThrottledException",
    "LimitExceededException",
    "PriorRequestNotComplete",
    "ProvisionedThroughputExceededException",
    "RequestLimitExceeded",
    "RequestThrottled",
    "RequestThrottledException",
    "SlowDown",
    "ThrottledException",
    "Throttling",
    "ThrottlingException",
    "TooManyRequestsException",
    "TransactionInProgressException", 
];
const TRANSIENT_ERROR_CODES = [
    "AbortError",
    "TimeoutError",
    "RequestTimeout",
    "RequestTimeoutException"
];
const TRANSIENT_ERROR_STATUS_CODES = [
    500,
    502,
    503,
    504
];
const NODEJS_TIMEOUT_ERROR_CODES = [
    "ECONNRESET",
    "EPIPE",
    "ETIMEDOUT"
];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aKC8D":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "StandardRetryStrategy", ()=>StandardRetryStrategy);
var _protocolHttp = require("@aws-sdk/protocol-http");
var _serviceErrorClassification = require("@aws-sdk/service-error-classification");
var _uuid = require("uuid");
var _config = require("./config");
var _constants = require("./constants");
var _defaultRetryQuota = require("./defaultRetryQuota");
var _delayDecider = require("./delayDecider");
var _retryDecider = require("./retryDecider");
class StandardRetryStrategy {
    constructor(maxAttemptsProvider, options){
        this.maxAttemptsProvider = maxAttemptsProvider;
        this.mode = (0, _config.RETRY_MODES).STANDARD;
        this.retryDecider = options?.retryDecider ?? (0, _retryDecider.defaultRetryDecider);
        this.delayDecider = options?.delayDecider ?? (0, _delayDecider.defaultDelayDecider);
        this.retryQuota = options?.retryQuota ?? (0, _defaultRetryQuota.getDefaultRetryQuota)((0, _constants.INITIAL_RETRY_TOKENS));
    }
    shouldRetry(error, attempts, maxAttempts) {
        return attempts < maxAttempts && this.retryDecider(error) && this.retryQuota.hasRetryTokens(error);
    }
    async getMaxAttempts() {
        let maxAttempts;
        try {
            maxAttempts = await this.maxAttemptsProvider();
        } catch (error) {
            maxAttempts = (0, _config.DEFAULT_MAX_ATTEMPTS);
        }
        return maxAttempts;
    }
    async retry(next, args, options) {
        let retryTokenAmount;
        let attempts = 0;
        let totalDelay = 0;
        const maxAttempts = await this.getMaxAttempts();
        const { request  } = args;
        if ((0, _protocolHttp.HttpRequest).isInstance(request)) request.headers[0, _constants.INVOCATION_ID_HEADER] = (0, _uuid.v4)();
        while(true)try {
            if ((0, _protocolHttp.HttpRequest).isInstance(request)) request.headers[0, _constants.REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;
            if (options?.beforeRequest) await options.beforeRequest();
            const { response , output  } = await next(args);
            if (options?.afterRequest) options.afterRequest(response);
            this.retryQuota.releaseRetryTokens(retryTokenAmount);
            output.$metadata.attempts = attempts + 1;
            output.$metadata.totalRetryDelay = totalDelay;
            return {
                response,
                output
            };
        } catch (e) {
            const err = asSdkError(e);
            attempts++;
            if (this.shouldRetry(err, attempts, maxAttempts)) {
                retryTokenAmount = this.retryQuota.retrieveRetryTokens(err);
                const delayFromDecider = this.delayDecider((0, _serviceErrorClassification.isThrottlingError)(err) ? (0, _constants.THROTTLING_RETRY_DELAY_BASE) : (0, _constants.DEFAULT_RETRY_DELAY_BASE), attempts);
                const delayFromResponse = getDelayFromRetryAfterHeader(err.$response);
                const delay = Math.max(delayFromResponse || 0, delayFromDecider);
                totalDelay += delay;
                await new Promise((resolve)=>setTimeout(resolve, delay));
                continue;
            }
            if (!err.$metadata) err.$metadata = {};
            err.$metadata.attempts = attempts;
            err.$metadata.totalRetryDelay = totalDelay;
            throw err;
        }
    }
}
const getDelayFromRetryAfterHeader = (response)=>{
    if (!(0, _protocolHttp.HttpResponse).isInstance(response)) return;
    const retryAfterHeaderName = Object.keys(response.headers).find((key)=>key.toLowerCase() === "retry-after");
    if (!retryAfterHeaderName) return;
    const retryAfter = response.headers[retryAfterHeaderName];
    const retryAfterSeconds = Number(retryAfter);
    if (!Number.isNaN(retryAfterSeconds)) return retryAfterSeconds * 1000;
    const retryAfterDate = new Date(retryAfter);
    return retryAfterDate.getTime() - Date.now();
};
const asSdkError = (error)=>{
    if (error instanceof Error) return error;
    if (error instanceof Object) return Object.assign(new Error(), error);
    if (typeof error === "string") return new Error(error);
    return new Error(`AWS SDK error wrapper for ${error}`);
};

},{"@aws-sdk/protocol-http":"lkWtc","@aws-sdk/service-error-classification":"020nY","uuid":"j4KJi","./config":"6JeJL","./constants":"bzDOf","./defaultRetryQuota":"j7Wzn","./delayDecider":"cDTOQ","./retryDecider":"7tHCy","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"j4KJi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "v1", ()=>(0, _v1JsDefault.default));
parcelHelpers.export(exports, "v3", ()=>(0, _v3JsDefault.default));
parcelHelpers.export(exports, "v4", ()=>(0, _v4JsDefault.default));
parcelHelpers.export(exports, "v5", ()=>(0, _v5JsDefault.default));
parcelHelpers.export(exports, "NIL", ()=>(0, _nilJsDefault.default));
parcelHelpers.export(exports, "version", ()=>(0, _versionJsDefault.default));
parcelHelpers.export(exports, "validate", ()=>(0, _validateJsDefault.default));
parcelHelpers.export(exports, "stringify", ()=>(0, _stringifyJsDefault.default));
parcelHelpers.export(exports, "parse", ()=>(0, _parseJsDefault.default));
var _v1Js = require("./v1.js");
var _v1JsDefault = parcelHelpers.interopDefault(_v1Js);
var _v3Js = require("./v3.js");
var _v3JsDefault = parcelHelpers.interopDefault(_v3Js);
var _v4Js = require("./v4.js");
var _v4JsDefault = parcelHelpers.interopDefault(_v4Js);
var _v5Js = require("./v5.js");
var _v5JsDefault = parcelHelpers.interopDefault(_v5Js);
var _nilJs = require("./nil.js");
var _nilJsDefault = parcelHelpers.interopDefault(_nilJs);
var _versionJs = require("./version.js");
var _versionJsDefault = parcelHelpers.interopDefault(_versionJs);
var _validateJs = require("./validate.js");
var _validateJsDefault = parcelHelpers.interopDefault(_validateJs);
var _stringifyJs = require("./stringify.js");
var _stringifyJsDefault = parcelHelpers.interopDefault(_stringifyJs);
var _parseJs = require("./parse.js");
var _parseJsDefault = parcelHelpers.interopDefault(_parseJs);

},{"./v1.js":false,"./v3.js":false,"./v4.js":"8zJtu","./v5.js":false,"./nil.js":false,"./version.js":false,"./validate.js":"eHPgI","./stringify.js":"5Y9F1","./parse.js":false,"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8zJtu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _rngJs = require("./rng.js");
var _rngJsDefault = parcelHelpers.interopDefault(_rngJs);
var _stringifyJs = require("./stringify.js");
var _stringifyJsDefault = parcelHelpers.interopDefault(_stringifyJs);
function v4(options, buf, offset) {
    options = options || {};
    var rnds = options.random || (options.rng || (0, _rngJsDefault.default))(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`
    rnds[6] = rnds[6] & 0x0f | 0x40;
    rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided
    if (buf) {
        offset = offset || 0;
        for(var i = 0; i < 16; ++i)buf[offset + i] = rnds[i];
        return buf;
    }
    return (0, _stringifyJsDefault.default)(rnds);
}
exports.default = v4;

},{"./rng.js":"2psyE","./stringify.js":"5Y9F1","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2psyE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// Unique ID creation requires a high quality random # generator. In the browser we therefore
// require the crypto API and do not support built-in fallback to lower quality random number
// generators (like Math.random()).
var getRandomValues;
var rnds8 = new Uint8Array(16);
function rng() {
    // lazy load so that environments that need to polyfill have a chance to do so
    if (!getRandomValues) {
        // getRandomValues needs to be invoked in a context where "this" is a Crypto implementation. Also,
        // find the complete implementation of crypto (msCrypto) on IE11.
        getRandomValues = typeof crypto !== "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== "undefined" && typeof msCrypto.getRandomValues === "function" && msCrypto.getRandomValues.bind(msCrypto);
        if (!getRandomValues) throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
    }
    return getRandomValues(rnds8);
}
exports.default = rng;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5Y9F1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _validateJs = require("./validate.js");
var _validateJsDefault = parcelHelpers.interopDefault(_validateJs);
/**
 * Convert array of 16 byte values to UUID string format of the form:
 * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX
 */ var byteToHex = [];
for(var i = 0; i < 256; ++i)byteToHex.push((i + 0x100).toString(16).substr(1));
function stringify(arr) {
    var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    // Note: Be careful editing this code!  It's been tuned for performance
    // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434
    var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase(); // Consistency check for valid UUID.  If this throws, it's likely due to one
    // of the following:
    // - One or more input array values don't map to a hex octet (leading to
    // "undefined" in the uuid)
    // - Invalid input values for the RFC `version` or `variant` fields
    if (!(0, _validateJsDefault.default)(uuid)) throw TypeError("Stringified UUID is invalid");
    return uuid;
}
exports.default = stringify;

},{"./validate.js":"eHPgI","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eHPgI":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _regexJs = require("./regex.js");
var _regexJsDefault = parcelHelpers.interopDefault(_regexJs);
function validate(uuid) {
    return typeof uuid === "string" && (0, _regexJsDefault.default).test(uuid);
}
exports.default = validate;

},{"./regex.js":"bUa5g","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bUa5g":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bzDOf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DEFAULT_RETRY_DELAY_BASE", ()=>DEFAULT_RETRY_DELAY_BASE);
parcelHelpers.export(exports, "MAXIMUM_RETRY_DELAY", ()=>MAXIMUM_RETRY_DELAY);
parcelHelpers.export(exports, "THROTTLING_RETRY_DELAY_BASE", ()=>THROTTLING_RETRY_DELAY_BASE);
parcelHelpers.export(exports, "INITIAL_RETRY_TOKENS", ()=>INITIAL_RETRY_TOKENS);
parcelHelpers.export(exports, "RETRY_COST", ()=>RETRY_COST);
parcelHelpers.export(exports, "TIMEOUT_RETRY_COST", ()=>TIMEOUT_RETRY_COST);
parcelHelpers.export(exports, "NO_RETRY_INCREMENT", ()=>NO_RETRY_INCREMENT);
parcelHelpers.export(exports, "INVOCATION_ID_HEADER", ()=>INVOCATION_ID_HEADER);
parcelHelpers.export(exports, "REQUEST_HEADER", ()=>REQUEST_HEADER);
const DEFAULT_RETRY_DELAY_BASE = 100;
const MAXIMUM_RETRY_DELAY = 20000;
const THROTTLING_RETRY_DELAY_BASE = 500;
const INITIAL_RETRY_TOKENS = 500;
const RETRY_COST = 5;
const TIMEOUT_RETRY_COST = 10;
const NO_RETRY_INCREMENT = 1;
const INVOCATION_ID_HEADER = "amz-sdk-invocation-id";
const REQUEST_HEADER = "amz-sdk-request";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"j7Wzn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getDefaultRetryQuota", ()=>getDefaultRetryQuota);
var _constants = require("./constants");
const getDefaultRetryQuota = (initialRetryTokens, options)=>{
    const MAX_CAPACITY = initialRetryTokens;
    const noRetryIncrement = options?.noRetryIncrement ?? (0, _constants.NO_RETRY_INCREMENT);
    const retryCost = options?.retryCost ?? (0, _constants.RETRY_COST);
    const timeoutRetryCost = options?.timeoutRetryCost ?? (0, _constants.TIMEOUT_RETRY_COST);
    let availableCapacity = initialRetryTokens;
    const getCapacityAmount = (error)=>error.name === "TimeoutError" ? timeoutRetryCost : retryCost;
    const hasRetryTokens = (error)=>getCapacityAmount(error) <= availableCapacity;
    const retrieveRetryTokens = (error)=>{
        if (!hasRetryTokens(error)) throw new Error("No retry token available");
        const capacityAmount = getCapacityAmount(error);
        availableCapacity -= capacityAmount;
        return capacityAmount;
    };
    const releaseRetryTokens = (capacityReleaseAmount)=>{
        availableCapacity += capacityReleaseAmount ?? noRetryIncrement;
        availableCapacity = Math.min(availableCapacity, MAX_CAPACITY);
    };
    return Object.freeze({
        hasRetryTokens,
        retrieveRetryTokens,
        releaseRetryTokens
    });
};

},{"./constants":"bzDOf","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cDTOQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "defaultDelayDecider", ()=>defaultDelayDecider);
var _constants = require("./constants");
const defaultDelayDecider = (delayBase, attempts)=>Math.floor(Math.min((0, _constants.MAXIMUM_RETRY_DELAY), Math.random() * 2 ** attempts * delayBase));

},{"./constants":"bzDOf","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7tHCy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "defaultRetryDecider", ()=>defaultRetryDecider);
var _serviceErrorClassification = require("@aws-sdk/service-error-classification");
const defaultRetryDecider = (error)=>{
    if (!error) return false;
    return (0, _serviceErrorClassification.isRetryableByTrait)(error) || (0, _serviceErrorClassification.isClockSkewError)(error) || (0, _serviceErrorClassification.isThrottlingError)(error) || (0, _serviceErrorClassification.isTransientError)(error);
};

},{"@aws-sdk/service-error-classification":"020nY","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"yfCHr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ENV_MAX_ATTEMPTS", ()=>ENV_MAX_ATTEMPTS);
parcelHelpers.export(exports, "CONFIG_MAX_ATTEMPTS", ()=>CONFIG_MAX_ATTEMPTS);
parcelHelpers.export(exports, "NODE_MAX_ATTEMPT_CONFIG_OPTIONS", ()=>NODE_MAX_ATTEMPT_CONFIG_OPTIONS);
parcelHelpers.export(exports, "resolveRetryConfig", ()=>resolveRetryConfig);
parcelHelpers.export(exports, "ENV_RETRY_MODE", ()=>ENV_RETRY_MODE);
parcelHelpers.export(exports, "CONFIG_RETRY_MODE", ()=>CONFIG_RETRY_MODE);
parcelHelpers.export(exports, "NODE_RETRY_MODE_CONFIG_OPTIONS", ()=>NODE_RETRY_MODE_CONFIG_OPTIONS);
var _utilMiddleware = require("@aws-sdk/util-middleware");
var _adaptiveRetryStrategy = require("./AdaptiveRetryStrategy");
var _config = require("./config");
var _standardRetryStrategy = require("./StandardRetryStrategy");
const ENV_MAX_ATTEMPTS = "AWS_MAX_ATTEMPTS";
const CONFIG_MAX_ATTEMPTS = "max_attempts";
const NODE_MAX_ATTEMPT_CONFIG_OPTIONS = {
    environmentVariableSelector: (env)=>{
        const value = env[ENV_MAX_ATTEMPTS];
        if (!value) return undefined;
        const maxAttempt = parseInt(value);
        if (Number.isNaN(maxAttempt)) throw new Error(`Environment variable ${ENV_MAX_ATTEMPTS} mast be a number, got "${value}"`);
        return maxAttempt;
    },
    configFileSelector: (profile)=>{
        const value = profile[CONFIG_MAX_ATTEMPTS];
        if (!value) return undefined;
        const maxAttempt = parseInt(value);
        if (Number.isNaN(maxAttempt)) throw new Error(`Shared config file entry ${CONFIG_MAX_ATTEMPTS} mast be a number, got "${value}"`);
        return maxAttempt;
    },
    default: (0, _config.DEFAULT_MAX_ATTEMPTS)
};
const resolveRetryConfig = (input)=>{
    const maxAttempts = (0, _utilMiddleware.normalizeProvider)(input.maxAttempts ?? (0, _config.DEFAULT_MAX_ATTEMPTS));
    return {
        ...input,
        maxAttempts,
        retryStrategy: async ()=>{
            if (input.retryStrategy) return input.retryStrategy;
            const retryMode = await (0, _utilMiddleware.normalizeProvider)(input.retryMode)();
            if (retryMode === (0, _config.RETRY_MODES).ADAPTIVE) return new (0, _adaptiveRetryStrategy.AdaptiveRetryStrategy)(maxAttempts);
            return new (0, _standardRetryStrategy.StandardRetryStrategy)(maxAttempts);
        }
    };
};
const ENV_RETRY_MODE = "AWS_RETRY_MODE";
const CONFIG_RETRY_MODE = "retry_mode";
const NODE_RETRY_MODE_CONFIG_OPTIONS = {
    environmentVariableSelector: (env)=>env[ENV_RETRY_MODE],
    configFileSelector: (profile)=>profile[CONFIG_RETRY_MODE],
    default: (0, _config.DEFAULT_RETRY_MODE)
};

},{"@aws-sdk/util-middleware":"49kxo","./AdaptiveRetryStrategy":"baz4p","./config":"6JeJL","./StandardRetryStrategy":"aKC8D","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"59saf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "omitRetryHeadersMiddleware", ()=>omitRetryHeadersMiddleware);
parcelHelpers.export(exports, "omitRetryHeadersMiddlewareOptions", ()=>omitRetryHeadersMiddlewareOptions);
parcelHelpers.export(exports, "getOmitRetryHeadersPlugin", ()=>getOmitRetryHeadersPlugin);
var _protocolHttp = require("@aws-sdk/protocol-http");
var _constants = require("./constants");
const omitRetryHeadersMiddleware = ()=>(next)=>async (args)=>{
            const { request  } = args;
            if ((0, _protocolHttp.HttpRequest).isInstance(request)) {
                delete request.headers[0, _constants.INVOCATION_ID_HEADER];
                delete request.headers[0, _constants.REQUEST_HEADER];
            }
            return next(args);
        };
const omitRetryHeadersMiddlewareOptions = {
    name: "omitRetryHeadersMiddleware",
    tags: [
        "RETRY",
        "HEADERS",
        "OMIT_RETRY_HEADERS"
    ],
    relation: "before",
    toMiddleware: "awsAuthMiddleware",
    override: true
};
const getOmitRetryHeadersPlugin = (options)=>({
        applyToStack: (clientStack)=>{
            clientStack.addRelativeTo(omitRetryHeadersMiddleware(), omitRetryHeadersMiddlewareOptions);
        }
    });

},{"@aws-sdk/protocol-http":"lkWtc","./constants":"bzDOf","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bRE0G":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "retryMiddleware", ()=>retryMiddleware);
parcelHelpers.export(exports, "retryMiddlewareOptions", ()=>retryMiddlewareOptions);
parcelHelpers.export(exports, "getRetryPlugin", ()=>getRetryPlugin);
const retryMiddleware = (options)=>(next, context)=>async (args)=>{
            const retryStrategy = await options.retryStrategy();
            if (retryStrategy?.mode) context.userAgent = [
                ...context.userAgent || [],
                [
                    "cfg/retry-mode",
                    retryStrategy.mode
                ]
            ];
            return retryStrategy.retry(next, args);
        };
const retryMiddlewareOptions = {
    name: "retryMiddleware",
    tags: [
        "RETRY"
    ],
    step: "finalizeRequest",
    priority: "high",
    override: true
};
const getRetryPlugin = (options)=>({
        applyToStack: (clientStack)=>{
            clientStack.add(retryMiddleware(options), retryMiddlewareOptions);
        }
    });

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5lukc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"apx8g":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _configurations = require("./configurations");
parcelHelpers.exportAll(_configurations, exports);
var _middleware = require("./middleware");
parcelHelpers.exportAll(_middleware, exports);

},{"./configurations":"dDgsy","./middleware":"lmV0m","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dDgsy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "resolveAwsAuthConfig", ()=>resolveAwsAuthConfig);
parcelHelpers.export(exports, "resolveSigV4AuthConfig", ()=>resolveSigV4AuthConfig);
var _propertyProvider = require("@aws-sdk/property-provider");
var _signatureV4 = require("@aws-sdk/signature-v4");
var _utilMiddleware = require("@aws-sdk/util-middleware");
const CREDENTIAL_EXPIRE_WINDOW = 300000;
const resolveAwsAuthConfig = (input)=>{
    const normalizedCreds = input.credentials ? normalizeCredentialProvider(input.credentials) : input.credentialDefaultProvider(input);
    const { signingEscapePath =true , systemClockOffset =input.systemClockOffset || 0 , sha256  } = input;
    let signer;
    if (input.signer) signer = (0, _utilMiddleware.normalizeProvider)(input.signer);
    else if (input.regionInfoProvider) signer = ()=>(0, _utilMiddleware.normalizeProvider)(input.region)().then(async (region)=>[
                await input.regionInfoProvider(region, {
                    useFipsEndpoint: await input.useFipsEndpoint(),
                    useDualstackEndpoint: await input.useDualstackEndpoint()
                }) || {},
                region, 
            ]).then(([regionInfo, region])=>{
            const { signingRegion , signingService  } = regionInfo;
            input.signingRegion = input.signingRegion || signingRegion || region;
            input.signingName = input.signingName || signingService || input.serviceId;
            const params = {
                ...input,
                credentials: normalizedCreds,
                region: input.signingRegion,
                service: input.signingName,
                sha256,
                uriEscapePath: signingEscapePath
            };
            const SignerCtor = input.signerConstructor || (0, _signatureV4.SignatureV4);
            return new SignerCtor(params);
        });
    else signer = async (authScheme)=>{
        authScheme = Object.assign({}, {
            name: "sigv4",
            signingName: input.signingName || input.defaultSigningName,
            signingRegion: await (0, _utilMiddleware.normalizeProvider)(input.region)(),
            properties: {}
        }, authScheme);
        const signingRegion = authScheme.signingRegion;
        const signingService = authScheme.signingName;
        input.signingRegion = input.signingRegion || signingRegion;
        input.signingName = input.signingName || signingService || input.serviceId;
        const params = {
            ...input,
            credentials: normalizedCreds,
            region: input.signingRegion,
            service: input.signingName,
            sha256,
            uriEscapePath: signingEscapePath
        };
        const SignerCtor = input.signerConstructor || (0, _signatureV4.SignatureV4);
        return new SignerCtor(params);
    };
    return {
        ...input,
        systemClockOffset,
        signingEscapePath,
        credentials: normalizedCreds,
        signer
    };
};
const resolveSigV4AuthConfig = (input)=>{
    const normalizedCreds = input.credentials ? normalizeCredentialProvider(input.credentials) : input.credentialDefaultProvider(input);
    const { signingEscapePath =true , systemClockOffset =input.systemClockOffset || 0 , sha256  } = input;
    let signer;
    if (input.signer) signer = (0, _utilMiddleware.normalizeProvider)(input.signer);
    else signer = (0, _utilMiddleware.normalizeProvider)(new (0, _signatureV4.SignatureV4)({
        credentials: normalizedCreds,
        region: input.region,
        service: input.signingName,
        sha256,
        uriEscapePath: signingEscapePath
    }));
    return {
        ...input,
        systemClockOffset,
        signingEscapePath,
        credentials: normalizedCreds,
        signer
    };
};
const normalizeCredentialProvider = (credentials)=>{
    if (typeof credentials === "function") return (0, _propertyProvider.memoize)(credentials, (credentials)=>credentials.expiration !== undefined && credentials.expiration.getTime() - Date.now() < CREDENTIAL_EXPIRE_WINDOW, (credentials)=>credentials.expiration !== undefined);
    return (0, _utilMiddleware.normalizeProvider)(credentials);
};

},{"@aws-sdk/property-provider":"eAar8","@aws-sdk/signature-v4":"6hvul","@aws-sdk/util-middleware":"49kxo","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eAar8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _credentialsProviderError = require("./CredentialsProviderError");
parcelHelpers.exportAll(_credentialsProviderError, exports);
var _providerError = require("./ProviderError");
parcelHelpers.exportAll(_providerError, exports);
var _tokenProviderError = require("./TokenProviderError");
parcelHelpers.exportAll(_tokenProviderError, exports);
var _chain = require("./chain");
parcelHelpers.exportAll(_chain, exports);
var _fromStatic = require("./fromStatic");
parcelHelpers.exportAll(_fromStatic, exports);
var _memoize = require("./memoize");
parcelHelpers.exportAll(_memoize, exports);

},{"./CredentialsProviderError":"8A2K9","./ProviderError":"jiQHC","./TokenProviderError":"485a5","./chain":"2ZXvc","./fromStatic":"gFzJA","./memoize":"baTRG","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8A2K9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CredentialsProviderError", ()=>CredentialsProviderError);
var _providerError = require("./ProviderError");
class CredentialsProviderError extends (0, _providerError.ProviderError) {
    constructor(message, tryNextLink = true){
        super(message, tryNextLink);
        this.tryNextLink = tryNextLink;
        this.name = "CredentialsProviderError";
        Object.setPrototypeOf(this, CredentialsProviderError.prototype);
    }
}

},{"./ProviderError":"jiQHC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jiQHC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ProviderError", ()=>ProviderError);
class ProviderError extends Error {
    constructor(message, tryNextLink = true){
        super(message);
        this.tryNextLink = tryNextLink;
        this.name = "ProviderError";
        Object.setPrototypeOf(this, ProviderError.prototype);
    }
    static from(error, tryNextLink = true) {
        return Object.assign(new this(error.message, tryNextLink), error);
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"485a5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TokenProviderError", ()=>TokenProviderError);
var _providerError = require("./ProviderError");
class TokenProviderError extends (0, _providerError.ProviderError) {
    constructor(message, tryNextLink = true){
        super(message, tryNextLink);
        this.tryNextLink = tryNextLink;
        this.name = "TokenProviderError";
        Object.setPrototypeOf(this, TokenProviderError.prototype);
    }
}

},{"./ProviderError":"jiQHC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2ZXvc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "chain", ()=>chain);
var _providerError = require("./ProviderError");
function chain(...providers) {
    return ()=>{
        let promise = Promise.reject(new (0, _providerError.ProviderError)("No providers in chain"));
        for (const provider of providers)promise = promise.catch((err)=>{
            if (err?.tryNextLink) return provider();
            throw err;
        });
        return promise;
    };
}

},{"./ProviderError":"jiQHC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gFzJA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fromStatic", ()=>fromStatic);
const fromStatic = (staticValue)=>()=>Promise.resolve(staticValue);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"baTRG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "memoize", ()=>memoize);
const memoize = (provider, isExpired, requiresRefresh)=>{
    let resolved;
    let pending;
    let hasResult;
    let isConstant = false;
    const coalesceProvider = async ()=>{
        if (!pending) pending = provider();
        try {
            resolved = await pending;
            hasResult = true;
            isConstant = false;
        } finally{
            pending = undefined;
        }
        return resolved;
    };
    if (isExpired === undefined) return async (options)=>{
        if (!hasResult || options?.forceRefresh) resolved = await coalesceProvider();
        return resolved;
    };
    return async (options)=>{
        if (!hasResult || options?.forceRefresh) resolved = await coalesceProvider();
        if (isConstant) return resolved;
        if (requiresRefresh && !requiresRefresh(resolved)) {
            isConstant = true;
            return resolved;
        }
        if (isExpired(resolved)) {
            await coalesceProvider();
            return resolved;
        }
        return resolved;
    };
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6hvul":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getCanonicalHeaders", ()=>(0, _getCanonicalHeaders.getCanonicalHeaders));
parcelHelpers.export(exports, "getCanonicalQuery", ()=>(0, _getCanonicalQuery.getCanonicalQuery));
parcelHelpers.export(exports, "getPayloadHash", ()=>(0, _getPayloadHash.getPayloadHash));
parcelHelpers.export(exports, "moveHeadersToQuery", ()=>(0, _moveHeadersToQuery.moveHeadersToQuery));
parcelHelpers.export(exports, "prepareRequest", ()=>(0, _prepareRequest.prepareRequest));
var _signatureV4 = require("./SignatureV4");
parcelHelpers.exportAll(_signatureV4, exports);
var _getCanonicalHeaders = require("./getCanonicalHeaders");
var _getCanonicalQuery = require("./getCanonicalQuery");
var _getPayloadHash = require("./getPayloadHash");
var _moveHeadersToQuery = require("./moveHeadersToQuery");
var _prepareRequest = require("./prepareRequest");
var _credentialDerivation = require("./credentialDerivation");
parcelHelpers.exportAll(_credentialDerivation, exports);

},{"./SignatureV4":"kQXsr","./getCanonicalHeaders":"6i0m4","./getCanonicalQuery":"iIBrb","./getPayloadHash":"3i9wg","./moveHeadersToQuery":"7Vr4Q","./prepareRequest":"7dtHd","./credentialDerivation":"4J5wX","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kQXsr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SignatureV4", ()=>SignatureV4);
var _utilHexEncoding = require("@aws-sdk/util-hex-encoding");
var _utilMiddleware = require("@aws-sdk/util-middleware");
var _constants = require("./constants");
var _credentialDerivation = require("./credentialDerivation");
var _getCanonicalHeaders = require("./getCanonicalHeaders");
var _getCanonicalQuery = require("./getCanonicalQuery");
var _getPayloadHash = require("./getPayloadHash");
var _headerUtil = require("./headerUtil");
var _moveHeadersToQuery = require("./moveHeadersToQuery");
var _prepareRequest = require("./prepareRequest");
var _utilDate = require("./utilDate");
class SignatureV4 {
    constructor({ applyChecksum , credentials , region , service , sha256 , uriEscapePath =true ,  }){
        this.service = service;
        this.sha256 = sha256;
        this.uriEscapePath = uriEscapePath;
        this.applyChecksum = typeof applyChecksum === "boolean" ? applyChecksum : true;
        this.regionProvider = (0, _utilMiddleware.normalizeProvider)(region);
        this.credentialProvider = (0, _utilMiddleware.normalizeProvider)(credentials);
    }
    async presign(originalRequest, options = {}) {
        const { signingDate =new Date() , expiresIn =3600 , unsignableHeaders , unhoistableHeaders , signableHeaders , signingRegion , signingService ,  } = options;
        const credentials = await this.credentialProvider();
        this.validateResolvedCredentials(credentials);
        const region = signingRegion ?? await this.regionProvider();
        const { longDate , shortDate  } = formatDate(signingDate);
        if (expiresIn > (0, _constants.MAX_PRESIGNED_TTL)) return Promise.reject("Signature version 4 presigned URLs must have an expiration date less than one week in the future");
        const scope = (0, _credentialDerivation.createScope)(shortDate, region, signingService ?? this.service);
        const request = (0, _moveHeadersToQuery.moveHeadersToQuery)((0, _prepareRequest.prepareRequest)(originalRequest), {
            unhoistableHeaders
        });
        if (credentials.sessionToken) request.query[0, _constants.TOKEN_QUERY_PARAM] = credentials.sessionToken;
        request.query[0, _constants.ALGORITHM_QUERY_PARAM] = (0, _constants.ALGORITHM_IDENTIFIER);
        request.query[0, _constants.CREDENTIAL_QUERY_PARAM] = `${credentials.accessKeyId}/${scope}`;
        request.query[0, _constants.AMZ_DATE_QUERY_PARAM] = longDate;
        request.query[0, _constants.EXPIRES_QUERY_PARAM] = expiresIn.toString(10);
        const canonicalHeaders = (0, _getCanonicalHeaders.getCanonicalHeaders)(request, unsignableHeaders, signableHeaders);
        request.query[0, _constants.SIGNED_HEADERS_QUERY_PARAM] = getCanonicalHeaderList(canonicalHeaders);
        request.query[0, _constants.SIGNATURE_QUERY_PARAM] = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, await (0, _getPayloadHash.getPayloadHash)(originalRequest, this.sha256)));
        return request;
    }
    async sign(toSign, options) {
        if (typeof toSign === "string") return this.signString(toSign, options);
        else if (toSign.headers && toSign.payload) return this.signEvent(toSign, options);
        else return this.signRequest(toSign, options);
    }
    async signEvent({ headers , payload  }, { signingDate =new Date() , priorSignature , signingRegion , signingService  }) {
        const region = signingRegion ?? await this.regionProvider();
        const { shortDate , longDate  } = formatDate(signingDate);
        const scope = (0, _credentialDerivation.createScope)(shortDate, region, signingService ?? this.service);
        const hashedPayload = await (0, _getPayloadHash.getPayloadHash)({
            headers: {},
            body: payload
        }, this.sha256);
        const hash = new this.sha256();
        hash.update(headers);
        const hashedHeaders = (0, _utilHexEncoding.toHex)(await hash.digest());
        const stringToSign = [
            (0, _constants.EVENT_ALGORITHM_IDENTIFIER),
            longDate,
            scope,
            priorSignature,
            hashedHeaders,
            hashedPayload, 
        ].join("\n");
        return this.signString(stringToSign, {
            signingDate,
            signingRegion: region,
            signingService
        });
    }
    async signString(stringToSign, { signingDate =new Date() , signingRegion , signingService  } = {}) {
        const credentials = await this.credentialProvider();
        this.validateResolvedCredentials(credentials);
        const region = signingRegion ?? await this.regionProvider();
        const { shortDate  } = formatDate(signingDate);
        const hash = new this.sha256(await this.getSigningKey(credentials, region, shortDate, signingService));
        hash.update(stringToSign);
        return (0, _utilHexEncoding.toHex)(await hash.digest());
    }
    async signRequest(requestToSign, { signingDate =new Date() , signableHeaders , unsignableHeaders , signingRegion , signingService ,  } = {}) {
        const credentials = await this.credentialProvider();
        this.validateResolvedCredentials(credentials);
        const region = signingRegion ?? await this.regionProvider();
        const request = (0, _prepareRequest.prepareRequest)(requestToSign);
        const { longDate , shortDate  } = formatDate(signingDate);
        const scope = (0, _credentialDerivation.createScope)(shortDate, region, signingService ?? this.service);
        request.headers[0, _constants.AMZ_DATE_HEADER] = longDate;
        if (credentials.sessionToken) request.headers[0, _constants.TOKEN_HEADER] = credentials.sessionToken;
        const payloadHash = await (0, _getPayloadHash.getPayloadHash)(request, this.sha256);
        if (!(0, _headerUtil.hasHeader)((0, _constants.SHA256_HEADER), request.headers) && this.applyChecksum) request.headers[0, _constants.SHA256_HEADER] = payloadHash;
        const canonicalHeaders = (0, _getCanonicalHeaders.getCanonicalHeaders)(request, unsignableHeaders, signableHeaders);
        const signature = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, payloadHash));
        request.headers[0, _constants.AUTH_HEADER] = `${0, _constants.ALGORITHM_IDENTIFIER} ` + `Credential=${credentials.accessKeyId}/${scope}, ` + `SignedHeaders=${getCanonicalHeaderList(canonicalHeaders)}, ` + `Signature=${signature}`;
        return request;
    }
    createCanonicalRequest(request, canonicalHeaders, payloadHash) {
        const sortedHeaders = Object.keys(canonicalHeaders).sort();
        return `${request.method}
${this.getCanonicalPath(request)}
${(0, _getCanonicalQuery.getCanonicalQuery)(request)}
${sortedHeaders.map((name)=>`${name}:${canonicalHeaders[name]}`).join("\n")}

${sortedHeaders.join(";")}
${payloadHash}`;
    }
    async createStringToSign(longDate, credentialScope, canonicalRequest) {
        const hash = new this.sha256();
        hash.update(canonicalRequest);
        const hashedRequest = await hash.digest();
        return `${0, _constants.ALGORITHM_IDENTIFIER}
${longDate}
${credentialScope}
${(0, _utilHexEncoding.toHex)(hashedRequest)}`;
    }
    getCanonicalPath({ path  }) {
        if (this.uriEscapePath) {
            const normalizedPathSegments = [];
            for (const pathSegment of path.split("/")){
                if (pathSegment?.length === 0) continue;
                if (pathSegment === ".") continue;
                if (pathSegment === "..") normalizedPathSegments.pop();
                else normalizedPathSegments.push(pathSegment);
            }
            const normalizedPath = `${path?.startsWith("/") ? "/" : ""}${normalizedPathSegments.join("/")}${normalizedPathSegments.length > 0 && path?.endsWith("/") ? "/" : ""}`;
            const doubleEncoded = encodeURIComponent(normalizedPath);
            return doubleEncoded.replace(/%2F/g, "/");
        }
        return path;
    }
    async getSignature(longDate, credentialScope, keyPromise, canonicalRequest) {
        const stringToSign = await this.createStringToSign(longDate, credentialScope, canonicalRequest);
        const hash = new this.sha256(await keyPromise);
        hash.update(stringToSign);
        return (0, _utilHexEncoding.toHex)(await hash.digest());
    }
    getSigningKey(credentials, region, shortDate, service) {
        return (0, _credentialDerivation.getSigningKey)(this.sha256, credentials, shortDate, region, service || this.service);
    }
    validateResolvedCredentials(credentials) {
        if (typeof credentials !== "object" || typeof credentials.accessKeyId !== "string" || typeof credentials.secretAccessKey !== "string") throw new Error("Resolved credential object is not valid");
    }
}
const formatDate = (now)=>{
    const longDate = (0, _utilDate.iso8601)(now).replace(/[\-:]/g, "");
    return {
        longDate,
        shortDate: longDate.slice(0, 8)
    };
};
const getCanonicalHeaderList = (headers)=>Object.keys(headers).sort().join(";");

},{"@aws-sdk/util-hex-encoding":"d6D69","@aws-sdk/util-middleware":"49kxo","./constants":"93sQf","./credentialDerivation":"4J5wX","./getCanonicalHeaders":"6i0m4","./getCanonicalQuery":"iIBrb","./getPayloadHash":"3i9wg","./headerUtil":"aCekx","./moveHeadersToQuery":"7Vr4Q","./prepareRequest":"7dtHd","./utilDate":"6Oggi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d6D69":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fromHex", ()=>fromHex);
parcelHelpers.export(exports, "toHex", ()=>toHex);
const SHORT_TO_HEX = {};
const HEX_TO_SHORT = {};
for(let i = 0; i < 256; i++){
    let encodedByte = i.toString(16).toLowerCase();
    if (encodedByte.length === 1) encodedByte = `0${encodedByte}`;
    SHORT_TO_HEX[i] = encodedByte;
    HEX_TO_SHORT[encodedByte] = i;
}
function fromHex(encoded) {
    if (encoded.length % 2 !== 0) throw new Error("Hex encoded strings must have an even number length");
    const out = new Uint8Array(encoded.length / 2);
    for(let i = 0; i < encoded.length; i += 2){
        const encodedByte = encoded.slice(i, i + 2).toLowerCase();
        if (encodedByte in HEX_TO_SHORT) out[i / 2] = HEX_TO_SHORT[encodedByte];
        else throw new Error(`Cannot decode unrecognized sequence ${encodedByte} as hexadecimal`);
    }
    return out;
}
function toHex(bytes) {
    let out = "";
    for(let i = 0; i < bytes.byteLength; i++)out += SHORT_TO_HEX[bytes[i]];
    return out;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"93sQf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ALGORITHM_QUERY_PARAM", ()=>ALGORITHM_QUERY_PARAM);
parcelHelpers.export(exports, "CREDENTIAL_QUERY_PARAM", ()=>CREDENTIAL_QUERY_PARAM);
parcelHelpers.export(exports, "AMZ_DATE_QUERY_PARAM", ()=>AMZ_DATE_QUERY_PARAM);
parcelHelpers.export(exports, "SIGNED_HEADERS_QUERY_PARAM", ()=>SIGNED_HEADERS_QUERY_PARAM);
parcelHelpers.export(exports, "EXPIRES_QUERY_PARAM", ()=>EXPIRES_QUERY_PARAM);
parcelHelpers.export(exports, "SIGNATURE_QUERY_PARAM", ()=>SIGNATURE_QUERY_PARAM);
parcelHelpers.export(exports, "TOKEN_QUERY_PARAM", ()=>TOKEN_QUERY_PARAM);
parcelHelpers.export(exports, "REGION_SET_PARAM", ()=>REGION_SET_PARAM);
parcelHelpers.export(exports, "AUTH_HEADER", ()=>AUTH_HEADER);
parcelHelpers.export(exports, "AMZ_DATE_HEADER", ()=>AMZ_DATE_HEADER);
parcelHelpers.export(exports, "DATE_HEADER", ()=>DATE_HEADER);
parcelHelpers.export(exports, "GENERATED_HEADERS", ()=>GENERATED_HEADERS);
parcelHelpers.export(exports, "SIGNATURE_HEADER", ()=>SIGNATURE_HEADER);
parcelHelpers.export(exports, "SHA256_HEADER", ()=>SHA256_HEADER);
parcelHelpers.export(exports, "TOKEN_HEADER", ()=>TOKEN_HEADER);
parcelHelpers.export(exports, "HOST_HEADER", ()=>HOST_HEADER);
parcelHelpers.export(exports, "ALWAYS_UNSIGNABLE_HEADERS", ()=>ALWAYS_UNSIGNABLE_HEADERS);
parcelHelpers.export(exports, "PROXY_HEADER_PATTERN", ()=>PROXY_HEADER_PATTERN);
parcelHelpers.export(exports, "SEC_HEADER_PATTERN", ()=>SEC_HEADER_PATTERN);
parcelHelpers.export(exports, "UNSIGNABLE_PATTERNS", ()=>UNSIGNABLE_PATTERNS);
parcelHelpers.export(exports, "ALGORITHM_IDENTIFIER", ()=>ALGORITHM_IDENTIFIER);
parcelHelpers.export(exports, "ALGORITHM_IDENTIFIER_V4A", ()=>ALGORITHM_IDENTIFIER_V4A);
parcelHelpers.export(exports, "EVENT_ALGORITHM_IDENTIFIER", ()=>EVENT_ALGORITHM_IDENTIFIER);
parcelHelpers.export(exports, "UNSIGNED_PAYLOAD", ()=>UNSIGNED_PAYLOAD);
parcelHelpers.export(exports, "MAX_CACHE_SIZE", ()=>MAX_CACHE_SIZE);
parcelHelpers.export(exports, "KEY_TYPE_IDENTIFIER", ()=>KEY_TYPE_IDENTIFIER);
parcelHelpers.export(exports, "MAX_PRESIGNED_TTL", ()=>MAX_PRESIGNED_TTL);
const ALGORITHM_QUERY_PARAM = "X-Amz-Algorithm";
const CREDENTIAL_QUERY_PARAM = "X-Amz-Credential";
const AMZ_DATE_QUERY_PARAM = "X-Amz-Date";
const SIGNED_HEADERS_QUERY_PARAM = "X-Amz-SignedHeaders";
const EXPIRES_QUERY_PARAM = "X-Amz-Expires";
const SIGNATURE_QUERY_PARAM = "X-Amz-Signature";
const TOKEN_QUERY_PARAM = "X-Amz-Security-Token";
const REGION_SET_PARAM = "X-Amz-Region-Set";
const AUTH_HEADER = "authorization";
const AMZ_DATE_HEADER = AMZ_DATE_QUERY_PARAM.toLowerCase();
const DATE_HEADER = "date";
const GENERATED_HEADERS = [
    AUTH_HEADER,
    AMZ_DATE_HEADER,
    DATE_HEADER
];
const SIGNATURE_HEADER = SIGNATURE_QUERY_PARAM.toLowerCase();
const SHA256_HEADER = "x-amz-content-sha256";
const TOKEN_HEADER = TOKEN_QUERY_PARAM.toLowerCase();
const HOST_HEADER = "host";
const ALWAYS_UNSIGNABLE_HEADERS = {
    authorization: true,
    "cache-control": true,
    connection: true,
    expect: true,
    from: true,
    "keep-alive": true,
    "max-forwards": true,
    pragma: true,
    referer: true,
    te: true,
    trailer: true,
    "transfer-encoding": true,
    upgrade: true,
    "user-agent": true,
    "x-amzn-trace-id": true
};
const PROXY_HEADER_PATTERN = /^proxy-/;
const SEC_HEADER_PATTERN = /^sec-/;
const UNSIGNABLE_PATTERNS = [
    /^proxy-/i,
    /^sec-/i
];
const ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256";
const ALGORITHM_IDENTIFIER_V4A = "AWS4-ECDSA-P256-SHA256";
const EVENT_ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256-PAYLOAD";
const UNSIGNED_PAYLOAD = "UNSIGNED-PAYLOAD";
const MAX_CACHE_SIZE = 50;
const KEY_TYPE_IDENTIFIER = "aws4_request";
const MAX_PRESIGNED_TTL = 604800;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4J5wX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createScope", ()=>createScope);
parcelHelpers.export(exports, "getSigningKey", ()=>getSigningKey);
parcelHelpers.export(exports, "clearCredentialCache", ()=>clearCredentialCache);
var _utilHexEncoding = require("@aws-sdk/util-hex-encoding");
var _constants = require("./constants");
const signingKeyCache = {};
const cacheQueue = [];
const createScope = (shortDate, region, service)=>`${shortDate}/${region}/${service}/${0, _constants.KEY_TYPE_IDENTIFIER}`;
const getSigningKey = async (sha256Constructor, credentials, shortDate, region, service)=>{
    const credsHash = await hmac(sha256Constructor, credentials.secretAccessKey, credentials.accessKeyId);
    const cacheKey = `${shortDate}:${region}:${service}:${(0, _utilHexEncoding.toHex)(credsHash)}:${credentials.sessionToken}`;
    if (cacheKey in signingKeyCache) return signingKeyCache[cacheKey];
    cacheQueue.push(cacheKey);
    while(cacheQueue.length > (0, _constants.MAX_CACHE_SIZE))delete signingKeyCache[cacheQueue.shift()];
    let key = `AWS4${credentials.secretAccessKey}`;
    for (const signable of [
        shortDate,
        region,
        service,
        (0, _constants.KEY_TYPE_IDENTIFIER)
    ])key = await hmac(sha256Constructor, key, signable);
    return signingKeyCache[cacheKey] = key;
};
const clearCredentialCache = ()=>{
    cacheQueue.length = 0;
    Object.keys(signingKeyCache).forEach((cacheKey)=>{
        delete signingKeyCache[cacheKey];
    });
};
const hmac = (ctor, secret, data)=>{
    const hash = new ctor(secret);
    hash.update(data);
    return hash.digest();
};

},{"@aws-sdk/util-hex-encoding":"d6D69","./constants":"93sQf","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6i0m4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getCanonicalHeaders", ()=>getCanonicalHeaders);
var _constants = require("./constants");
const getCanonicalHeaders = ({ headers  }, unsignableHeaders, signableHeaders)=>{
    const canonical = {};
    for (const headerName of Object.keys(headers).sort()){
        if (headers[headerName] == undefined) continue;
        const canonicalHeaderName = headerName.toLowerCase();
        if (canonicalHeaderName in (0, _constants.ALWAYS_UNSIGNABLE_HEADERS) || unsignableHeaders?.has(canonicalHeaderName) || (0, _constants.PROXY_HEADER_PATTERN).test(canonicalHeaderName) || (0, _constants.SEC_HEADER_PATTERN).test(canonicalHeaderName)) {
            if (!signableHeaders || signableHeaders && !signableHeaders.has(canonicalHeaderName)) continue;
        }
        canonical[canonicalHeaderName] = headers[headerName].trim().replace(/\s+/g, " ");
    }
    return canonical;
};

},{"./constants":"93sQf","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iIBrb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getCanonicalQuery", ()=>getCanonicalQuery);
var _utilUriEscape = require("@aws-sdk/util-uri-escape");
var _constants = require("./constants");
const getCanonicalQuery = ({ query ={}  })=>{
    const keys = [];
    const serialized = {};
    for (const key of Object.keys(query).sort()){
        if (key.toLowerCase() === (0, _constants.SIGNATURE_HEADER)) continue;
        keys.push(key);
        const value = query[key];
        if (typeof value === "string") serialized[key] = `${(0, _utilUriEscape.escapeUri)(key)}=${(0, _utilUriEscape.escapeUri)(value)}`;
        else if (Array.isArray(value)) serialized[key] = value.slice(0).sort().reduce((encoded, value)=>encoded.concat([
                `${(0, _utilUriEscape.escapeUri)(key)}=${(0, _utilUriEscape.escapeUri)(value)}`
            ]), []).join("&");
    }
    return keys.map((key)=>serialized[key]).filter((serialized)=>serialized).join("&");
};

},{"@aws-sdk/util-uri-escape":"ihZwy","./constants":"93sQf","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ihZwy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _escapeUri = require("./escape-uri");
parcelHelpers.exportAll(_escapeUri, exports);
var _escapeUriPath = require("./escape-uri-path");
parcelHelpers.exportAll(_escapeUriPath, exports);

},{"./escape-uri":"fPTV2","./escape-uri-path":"ap8YS","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fPTV2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "escapeUri", ()=>escapeUri);
const escapeUri = (uri)=>encodeURIComponent(uri).replace(/[!'()*]/g, hexEncode);
const hexEncode = (c)=>`%${c.charCodeAt(0).toString(16).toUpperCase()}`;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ap8YS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "escapeUriPath", ()=>escapeUriPath);
var _escapeUri = require("./escape-uri");
const escapeUriPath = (uri)=>uri.split("/").map((0, _escapeUri.escapeUri)).join("/");

},{"./escape-uri":"fPTV2","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3i9wg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getPayloadHash", ()=>getPayloadHash);
var _isArrayBuffer = require("@aws-sdk/is-array-buffer");
var _utilHexEncoding = require("@aws-sdk/util-hex-encoding");
var _constants = require("./constants");
const getPayloadHash = async ({ headers , body  }, hashConstructor)=>{
    for (const headerName of Object.keys(headers)){
        if (headerName.toLowerCase() === (0, _constants.SHA256_HEADER)) return headers[headerName];
    }
    if (body == undefined) return "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";
    else if (typeof body === "string" || ArrayBuffer.isView(body) || (0, _isArrayBuffer.isArrayBuffer)(body)) {
        const hashCtor = new hashConstructor();
        hashCtor.update(body);
        return (0, _utilHexEncoding.toHex)(await hashCtor.digest());
    }
    return 0, _constants.UNSIGNED_PAYLOAD;
};

},{"@aws-sdk/is-array-buffer":"9QzrT","@aws-sdk/util-hex-encoding":"d6D69","./constants":"93sQf","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9QzrT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isArrayBuffer", ()=>isArrayBuffer);
const isArrayBuffer = (arg)=>typeof ArrayBuffer === "function" && arg instanceof ArrayBuffer || Object.prototype.toString.call(arg) === "[object ArrayBuffer]";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aCekx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "hasHeader", ()=>hasHeader);
parcelHelpers.export(exports, "getHeaderValue", ()=>getHeaderValue);
parcelHelpers.export(exports, "deleteHeader", ()=>deleteHeader);
const hasHeader = (soughtHeader, headers)=>{
    soughtHeader = soughtHeader.toLowerCase();
    for (const headerName of Object.keys(headers)){
        if (soughtHeader === headerName.toLowerCase()) return true;
    }
    return false;
};
const getHeaderValue = (soughtHeader, headers)=>{
    soughtHeader = soughtHeader.toLowerCase();
    for (const headerName of Object.keys(headers)){
        if (soughtHeader === headerName.toLowerCase()) return headers[headerName];
    }
    return undefined;
};
const deleteHeader = (soughtHeader, headers)=>{
    soughtHeader = soughtHeader.toLowerCase();
    for (const headerName of Object.keys(headers))if (soughtHeader === headerName.toLowerCase()) delete headers[headerName];
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7Vr4Q":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "moveHeadersToQuery", ()=>moveHeadersToQuery);
var _cloneRequest = require("./cloneRequest");
const moveHeadersToQuery = (request, options = {})=>{
    const { headers , query ={}  } = typeof request.clone === "function" ? request.clone() : (0, _cloneRequest.cloneRequest)(request);
    for (const name of Object.keys(headers)){
        const lname = name.toLowerCase();
        if (lname.slice(0, 6) === "x-amz-" && !options.unhoistableHeaders?.has(lname)) {
            query[name] = headers[name];
            delete headers[name];
        }
    }
    return {
        ...request,
        headers,
        query
    };
};

},{"./cloneRequest":"lJubb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lJubb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "cloneRequest", ()=>cloneRequest);
parcelHelpers.export(exports, "cloneQuery", ()=>cloneQuery);
const cloneRequest = ({ headers , query , ...rest })=>({
        ...rest,
        headers: {
            ...headers
        },
        query: query ? cloneQuery(query) : undefined
    });
const cloneQuery = (query)=>Object.keys(query).reduce((carry, paramName)=>{
        const param = query[paramName];
        return {
            ...carry,
            [paramName]: Array.isArray(param) ? [
                ...param
            ] : param
        };
    }, {});

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7dtHd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "prepareRequest", ()=>prepareRequest);
var _cloneRequest = require("./cloneRequest");
var _constants = require("./constants");
const prepareRequest = (request)=>{
    request = typeof request.clone === "function" ? request.clone() : (0, _cloneRequest.cloneRequest)(request);
    for (const headerName of Object.keys(request.headers))if ((0, _constants.GENERATED_HEADERS).indexOf(headerName.toLowerCase()) > -1) delete request.headers[headerName];
    return request;
};

},{"./cloneRequest":"lJubb","./constants":"93sQf","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6Oggi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "iso8601", ()=>iso8601);
parcelHelpers.export(exports, "toDate", ()=>toDate);
const iso8601 = (time)=>toDate(time).toISOString().replace(/\.\d{3}Z$/, "Z");
const toDate = (time)=>{
    if (typeof time === "number") return new Date(time * 1000);
    if (typeof time === "string") {
        if (Number(time)) return new Date(Number(time) * 1000);
        return new Date(time);
    }
    return time;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lmV0m":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "awsAuthMiddleware", ()=>awsAuthMiddleware);
parcelHelpers.export(exports, "awsAuthMiddlewareOptions", ()=>awsAuthMiddlewareOptions);
parcelHelpers.export(exports, "getAwsAuthPlugin", ()=>getAwsAuthPlugin);
parcelHelpers.export(exports, "getSigV4AuthPlugin", ()=>getSigV4AuthPlugin);
var _protocolHttp = require("@aws-sdk/protocol-http");
var _getSkewCorrectedDate = require("./utils/getSkewCorrectedDate");
var _getUpdatedSystemClockOffset = require("./utils/getUpdatedSystemClockOffset");
const awsAuthMiddleware = (options)=>(next, context)=>async function(args) {
            if (!(0, _protocolHttp.HttpRequest).isInstance(args.request)) return next(args);
            const authScheme = context.endpointV2?.properties?.authSchemes?.[0];
            const multiRegionOverride = authScheme?.name === "sigv4a" ? authScheme?.signingRegionSet?.join(",") : undefined;
            const signer = await options.signer(authScheme);
            const output = await next({
                ...args,
                request: await signer.sign(args.request, {
                    signingDate: (0, _getSkewCorrectedDate.getSkewCorrectedDate)(options.systemClockOffset),
                    signingRegion: multiRegionOverride || context["signing_region"],
                    signingService: context["signing_service"]
                })
            }).catch((error)=>{
                const serverTime = error.ServerTime ?? getDateHeader(error.$response);
                if (serverTime) options.systemClockOffset = (0, _getUpdatedSystemClockOffset.getUpdatedSystemClockOffset)(serverTime, options.systemClockOffset);
                throw error;
            });
            const dateHeader = getDateHeader(output.response);
            if (dateHeader) options.systemClockOffset = (0, _getUpdatedSystemClockOffset.getUpdatedSystemClockOffset)(dateHeader, options.systemClockOffset);
            return output;
        };
const getDateHeader = (response)=>(0, _protocolHttp.HttpResponse).isInstance(response) ? response.headers?.date ?? response.headers?.Date : undefined;
const awsAuthMiddlewareOptions = {
    name: "awsAuthMiddleware",
    tags: [
        "SIGNATURE",
        "AWSAUTH"
    ],
    relation: "after",
    toMiddleware: "retryMiddleware",
    override: true
};
const getAwsAuthPlugin = (options)=>({
        applyToStack: (clientStack)=>{
            clientStack.addRelativeTo(awsAuthMiddleware(options), awsAuthMiddlewareOptions);
        }
    });
const getSigV4AuthPlugin = getAwsAuthPlugin;

},{"@aws-sdk/protocol-http":"lkWtc","./utils/getSkewCorrectedDate":"1Xz4y","./utils/getUpdatedSystemClockOffset":"fLlgJ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1Xz4y":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getSkewCorrectedDate", ()=>getSkewCorrectedDate);
const getSkewCorrectedDate = (systemClockOffset)=>new Date(Date.now() + systemClockOffset);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fLlgJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getUpdatedSystemClockOffset", ()=>getUpdatedSystemClockOffset);
var _isClockSkewed = require("./isClockSkewed");
const getUpdatedSystemClockOffset = (clockTime, currentSystemClockOffset)=>{
    const clockTimeInMs = Date.parse(clockTime);
    if ((0, _isClockSkewed.isClockSkewed)(clockTimeInMs, currentSystemClockOffset)) return clockTimeInMs - Date.now();
    return currentSystemClockOffset;
};

},{"./isClockSkewed":"bAIeC","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bAIeC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isClockSkewed", ()=>isClockSkewed);
var _getSkewCorrectedDate = require("./getSkewCorrectedDate");
const isClockSkewed = (clockTime, systemClockOffset)=>Math.abs((0, _getSkewCorrectedDate.getSkewCorrectedDate)(systemClockOffset).getTime() - clockTime) >= 300000;

},{"./getSkewCorrectedDate":"1Xz4y","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6uBwp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _configurations = require("./configurations");
parcelHelpers.exportAll(_configurations, exports);
var _userAgentMiddleware = require("./user-agent-middleware");
parcelHelpers.exportAll(_userAgentMiddleware, exports);

},{"./configurations":"lRaCm","./user-agent-middleware":"jcZ4G","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lRaCm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "resolveUserAgentConfig", ()=>resolveUserAgentConfig);
function resolveUserAgentConfig(input) {
    return {
        ...input,
        customUserAgent: typeof input.customUserAgent === "string" ? [
            [
                input.customUserAgent
            ]
        ] : input.customUserAgent
    };
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jcZ4G":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "userAgentMiddleware", ()=>userAgentMiddleware);
parcelHelpers.export(exports, "getUserAgentMiddlewareOptions", ()=>getUserAgentMiddlewareOptions);
parcelHelpers.export(exports, "getUserAgentPlugin", ()=>getUserAgentPlugin);
var _protocolHttp = require("@aws-sdk/protocol-http");
var _constants = require("./constants");
const userAgentMiddleware = (options)=>(next, context)=>async (args)=>{
            const { request  } = args;
            if (!(0, _protocolHttp.HttpRequest).isInstance(request)) return next(args);
            const { headers  } = request;
            const userAgent = context?.userAgent?.map(escapeUserAgent) || [];
            const defaultUserAgent = (await options.defaultUserAgentProvider()).map(escapeUserAgent);
            const customUserAgent = options?.customUserAgent?.map(escapeUserAgent) || [];
            const sdkUserAgentValue = [
                ...defaultUserAgent,
                ...userAgent,
                ...customUserAgent
            ].join((0, _constants.SPACE));
            const normalUAValue = [
                ...defaultUserAgent.filter((section)=>section.startsWith("aws-sdk-")),
                ...customUserAgent, 
            ].join((0, _constants.SPACE));
            if (options.runtime !== "browser") {
                if (normalUAValue) headers[0, _constants.X_AMZ_USER_AGENT] = headers[0, _constants.X_AMZ_USER_AGENT] ? `${headers[0, _constants.USER_AGENT]} ${normalUAValue}` : normalUAValue;
                headers[0, _constants.USER_AGENT] = sdkUserAgentValue;
            } else headers[0, _constants.X_AMZ_USER_AGENT] = sdkUserAgentValue;
            return next({
                ...args,
                request
            });
        };
const escapeUserAgent = ([name, version])=>{
    const prefixSeparatorIndex = name.indexOf("/");
    const prefix = name.substring(0, prefixSeparatorIndex);
    let uaName = name.substring(prefixSeparatorIndex + 1);
    if (prefix === "api") uaName = uaName.toLowerCase();
    return [
        prefix,
        uaName,
        version
    ].filter((item)=>item && item.length > 0).map((item)=>item?.replace((0, _constants.UA_ESCAPE_REGEX), "_")).join("/");
};
const getUserAgentMiddlewareOptions = {
    name: "getUserAgentMiddleware",
    step: "build",
    priority: "low",
    tags: [
        "SET_USER_AGENT",
        "USER_AGENT"
    ],
    override: true
};
const getUserAgentPlugin = (config)=>({
        applyToStack: (clientStack)=>{
            clientStack.add(userAgentMiddleware(config), getUserAgentMiddlewareOptions);
        }
    });

},{"@aws-sdk/protocol-http":"lkWtc","./constants":"2OvLZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2OvLZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "USER_AGENT", ()=>USER_AGENT);
parcelHelpers.export(exports, "X_AMZ_USER_AGENT", ()=>X_AMZ_USER_AGENT);
parcelHelpers.export(exports, "SPACE", ()=>SPACE);
parcelHelpers.export(exports, "UA_ESCAPE_REGEX", ()=>UA_ESCAPE_REGEX);
const USER_AGENT = "user-agent";
const X_AMZ_USER_AGENT = "x-amz-user-agent";
const SPACE = " ";
const UA_ESCAPE_REGEX = /[^\!\#\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w]/g;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ats0l":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _client = require("./client");
parcelHelpers.exportAll(_client, exports);
var _command = require("./command");
parcelHelpers.exportAll(_command, exports);
var _constants = require("./constants");
parcelHelpers.exportAll(_constants, exports);
var _dateUtils = require("./date-utils");
parcelHelpers.exportAll(_dateUtils, exports);
var _defaultErrorHandler = require("./default-error-handler");
parcelHelpers.exportAll(_defaultErrorHandler, exports);
var _defaultsMode = require("./defaults-mode");
parcelHelpers.exportAll(_defaultsMode, exports);
var _emitWarningIfUnsupportedVersion = require("./emitWarningIfUnsupportedVersion");
parcelHelpers.exportAll(_emitWarningIfUnsupportedVersion, exports);
var _exceptions = require("./exceptions");
parcelHelpers.exportAll(_exceptions, exports);
var _extendedEncodeUriComponent = require("./extended-encode-uri-component");
parcelHelpers.exportAll(_extendedEncodeUriComponent, exports);
var _getArrayIfSingleItem = require("./get-array-if-single-item");
parcelHelpers.exportAll(_getArrayIfSingleItem, exports);
var _getValueFromTextNode = require("./get-value-from-text-node");
parcelHelpers.exportAll(_getValueFromTextNode, exports);
var _lazyJson = require("./lazy-json");
parcelHelpers.exportAll(_lazyJson, exports);
var _objectMapping = require("./object-mapping");
parcelHelpers.exportAll(_objectMapping, exports);
var _parseUtils = require("./parse-utils");
parcelHelpers.exportAll(_parseUtils, exports);
var _resolvePath = require("./resolve-path");
parcelHelpers.exportAll(_resolvePath, exports);
var _serUtils = require("./ser-utils");
parcelHelpers.exportAll(_serUtils, exports);
var _splitEvery = require("./split-every");
parcelHelpers.exportAll(_splitEvery, exports);

},{"./client":"byjfJ","./command":"4252b","./constants":"gVeUS","./date-utils":"hw2Vl","./default-error-handler":"bG4lh","./defaults-mode":"bwWM5","./emitWarningIfUnsupportedVersion":"4TK97","./exceptions":"hliAV","./extended-encode-uri-component":"843Ff","./get-array-if-single-item":"gBHBn","./get-value-from-text-node":"ggvWO","./lazy-json":"js6bs","./object-mapping":"cvh8s","./parse-utils":"h47HV","./resolve-path":"43uvW","./ser-utils":"bjeXK","./split-every":"4jYlS","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"byjfJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Client", ()=>Client);
var _middlewareStack = require("@aws-sdk/middleware-stack");
class Client {
    constructor(config){
        this.middlewareStack = (0, _middlewareStack.constructStack)();
        this.config = config;
    }
    send(command, optionsOrCb, cb) {
        const options = typeof optionsOrCb !== "function" ? optionsOrCb : undefined;
        const callback = typeof optionsOrCb === "function" ? optionsOrCb : cb;
        const handler = command.resolveMiddleware(this.middlewareStack, this.config, options);
        if (callback) handler(command).then((result)=>callback(null, result.output), (err)=>callback(err)).catch(()=>{});
        else return handler(command).then((result)=>result.output);
    }
    destroy() {
        if (this.config.requestHandler.destroy) this.config.requestHandler.destroy();
    }
}

},{"@aws-sdk/middleware-stack":"bDs53","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bDs53":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _middlewareStack = require("./MiddlewareStack");
parcelHelpers.exportAll(_middlewareStack, exports);

},{"./MiddlewareStack":"iUMap","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iUMap":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "constructStack", ()=>constructStack);
const constructStack = ()=>{
    let absoluteEntries = [];
    let relativeEntries = [];
    const entriesNameSet = new Set();
    const sort = (entries)=>entries.sort((a, b)=>stepWeights[b.step] - stepWeights[a.step] || priorityWeights[b.priority || "normal"] - priorityWeights[a.priority || "normal"]);
    const removeByName = (toRemove)=>{
        let isRemoved = false;
        const filterCb = (entry)=>{
            if (entry.name && entry.name === toRemove) {
                isRemoved = true;
                entriesNameSet.delete(toRemove);
                return false;
            }
            return true;
        };
        absoluteEntries = absoluteEntries.filter(filterCb);
        relativeEntries = relativeEntries.filter(filterCb);
        return isRemoved;
    };
    const removeByReference = (toRemove)=>{
        let isRemoved = false;
        const filterCb = (entry)=>{
            if (entry.middleware === toRemove) {
                isRemoved = true;
                if (entry.name) entriesNameSet.delete(entry.name);
                return false;
            }
            return true;
        };
        absoluteEntries = absoluteEntries.filter(filterCb);
        relativeEntries = relativeEntries.filter(filterCb);
        return isRemoved;
    };
    const cloneTo = (toStack)=>{
        absoluteEntries.forEach((entry)=>{
            toStack.add(entry.middleware, {
                ...entry
            });
        });
        relativeEntries.forEach((entry)=>{
            toStack.addRelativeTo(entry.middleware, {
                ...entry
            });
        });
        return toStack;
    };
    const expandRelativeMiddlewareList = (from)=>{
        const expandedMiddlewareList = [];
        from.before.forEach((entry)=>{
            if (entry.before.length === 0 && entry.after.length === 0) expandedMiddlewareList.push(entry);
            else expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));
        });
        expandedMiddlewareList.push(from);
        from.after.reverse().forEach((entry)=>{
            if (entry.before.length === 0 && entry.after.length === 0) expandedMiddlewareList.push(entry);
            else expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));
        });
        return expandedMiddlewareList;
    };
    const getMiddlewareList = (debug = false)=>{
        const normalizedAbsoluteEntries = [];
        const normalizedRelativeEntries = [];
        const normalizedEntriesNameMap = {};
        absoluteEntries.forEach((entry)=>{
            const normalizedEntry = {
                ...entry,
                before: [],
                after: []
            };
            if (normalizedEntry.name) normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;
            normalizedAbsoluteEntries.push(normalizedEntry);
        });
        relativeEntries.forEach((entry)=>{
            const normalizedEntry = {
                ...entry,
                before: [],
                after: []
            };
            if (normalizedEntry.name) normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;
            normalizedRelativeEntries.push(normalizedEntry);
        });
        normalizedRelativeEntries.forEach((entry)=>{
            if (entry.toMiddleware) {
                const toMiddleware = normalizedEntriesNameMap[entry.toMiddleware];
                if (toMiddleware === undefined) {
                    if (debug) return;
                    throw new Error(`${entry.toMiddleware} is not found when adding ${entry.name || "anonymous"} middleware ${entry.relation} ${entry.toMiddleware}`);
                }
                if (entry.relation === "after") toMiddleware.after.push(entry);
                if (entry.relation === "before") toMiddleware.before.push(entry);
            }
        });
        const mainChain = sort(normalizedAbsoluteEntries).map(expandRelativeMiddlewareList).reduce((wholeList, expendedMiddlewareList)=>{
            wholeList.push(...expendedMiddlewareList);
            return wholeList;
        }, []);
        return mainChain;
    };
    const stack = {
        add: (middleware, options = {})=>{
            const { name , override  } = options;
            const entry = {
                step: "initialize",
                priority: "normal",
                middleware,
                ...options
            };
            if (name) {
                if (entriesNameSet.has(name)) {
                    if (!override) throw new Error(`Duplicate middleware name '${name}'`);
                    const toOverrideIndex = absoluteEntries.findIndex((entry)=>entry.name === name);
                    const toOverride = absoluteEntries[toOverrideIndex];
                    if (toOverride.step !== entry.step || toOverride.priority !== entry.priority) throw new Error(`"${name}" middleware with ${toOverride.priority} priority in ${toOverride.step} step cannot be ` + `overridden by same-name middleware with ${entry.priority} priority in ${entry.step} step.`);
                    absoluteEntries.splice(toOverrideIndex, 1);
                }
                entriesNameSet.add(name);
            }
            absoluteEntries.push(entry);
        },
        addRelativeTo: (middleware, options)=>{
            const { name , override  } = options;
            const entry = {
                middleware,
                ...options
            };
            if (name) {
                if (entriesNameSet.has(name)) {
                    if (!override) throw new Error(`Duplicate middleware name '${name}'`);
                    const toOverrideIndex = relativeEntries.findIndex((entry)=>entry.name === name);
                    const toOverride = relativeEntries[toOverrideIndex];
                    if (toOverride.toMiddleware !== entry.toMiddleware || toOverride.relation !== entry.relation) throw new Error(`"${name}" middleware ${toOverride.relation} "${toOverride.toMiddleware}" middleware cannot be overridden ` + `by same-name middleware ${entry.relation} "${entry.toMiddleware}" middleware.`);
                    relativeEntries.splice(toOverrideIndex, 1);
                }
                entriesNameSet.add(name);
            }
            relativeEntries.push(entry);
        },
        clone: ()=>cloneTo(constructStack()),
        use: (plugin)=>{
            plugin.applyToStack(stack);
        },
        remove: (toRemove)=>{
            if (typeof toRemove === "string") return removeByName(toRemove);
            else return removeByReference(toRemove);
        },
        removeByTag: (toRemove)=>{
            let isRemoved = false;
            const filterCb = (entry)=>{
                const { tags , name  } = entry;
                if (tags && tags.includes(toRemove)) {
                    if (name) entriesNameSet.delete(name);
                    isRemoved = true;
                    return false;
                }
                return true;
            };
            absoluteEntries = absoluteEntries.filter(filterCb);
            relativeEntries = relativeEntries.filter(filterCb);
            return isRemoved;
        },
        concat: (from)=>{
            const cloned = cloneTo(constructStack());
            cloned.use(from);
            return cloned;
        },
        applyToStack: cloneTo,
        identify: ()=>{
            return getMiddlewareList(true).map((mw)=>{
                return mw.name + ": " + (mw.tags || []).join(",");
            });
        },
        resolve: (handler, context)=>{
            for (const middleware of getMiddlewareList().map((entry)=>entry.middleware).reverse())handler = middleware(handler, context);
            return handler;
        }
    };
    return stack;
};
const stepWeights = {
    initialize: 5,
    serialize: 4,
    build: 3,
    finalizeRequest: 2,
    deserialize: 1
};
const priorityWeights = {
    high: 3,
    normal: 2,
    low: 1
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4252b":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Command", ()=>Command);
var _middlewareStack = require("@aws-sdk/middleware-stack");
class Command {
    constructor(){
        this.middlewareStack = (0, _middlewareStack.constructStack)();
    }
}

},{"@aws-sdk/middleware-stack":"bDs53","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gVeUS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SENSITIVE_STRING", ()=>SENSITIVE_STRING);
const SENSITIVE_STRING = "***SensitiveInformation***";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hw2Vl":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "dateToUtcString", ()=>dateToUtcString);
parcelHelpers.export(exports, "parseRfc3339DateTime", ()=>parseRfc3339DateTime);
parcelHelpers.export(exports, "parseRfc7231DateTime", ()=>parseRfc7231DateTime);
parcelHelpers.export(exports, "parseEpochTimestamp", ()=>parseEpochTimestamp);
var _parseUtils = require("./parse-utils");
const DAYS = [
    "Sun",
    "Mon",
    "Tue",
    "Wed",
    "Thu",
    "Fri",
    "Sat"
];
const MONTHS = [
    "Jan",
    "Feb",
    "Mar",
    "Apr",
    "May",
    "Jun",
    "Jul",
    "Aug",
    "Sep",
    "Oct",
    "Nov",
    "Dec"
];
function dateToUtcString(date) {
    const year = date.getUTCFullYear();
    const month = date.getUTCMonth();
    const dayOfWeek = date.getUTCDay();
    const dayOfMonthInt = date.getUTCDate();
    const hoursInt = date.getUTCHours();
    const minutesInt = date.getUTCMinutes();
    const secondsInt = date.getUTCSeconds();
    const dayOfMonthString = dayOfMonthInt < 10 ? `0${dayOfMonthInt}` : `${dayOfMonthInt}`;
    const hoursString = hoursInt < 10 ? `0${hoursInt}` : `${hoursInt}`;
    const minutesString = minutesInt < 10 ? `0${minutesInt}` : `${minutesInt}`;
    const secondsString = secondsInt < 10 ? `0${secondsInt}` : `${secondsInt}`;
    return `${DAYS[dayOfWeek]}, ${dayOfMonthString} ${MONTHS[month]} ${year} ${hoursString}:${minutesString}:${secondsString} GMT`;
}
const RFC3339 = new RegExp(/^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(?:\.(\d+))?[zZ]$/);
const parseRfc3339DateTime = (value)=>{
    if (value === null || value === undefined) return undefined;
    if (typeof value !== "string") throw new TypeError("RFC-3339 date-times must be expressed as strings");
    const match = RFC3339.exec(value);
    if (!match) throw new TypeError("Invalid RFC-3339 date-time value");
    const [_, yearStr, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds] = match;
    const year = (0, _parseUtils.strictParseShort)(stripLeadingZeroes(yearStr));
    const month = parseDateValue(monthStr, "month", 1, 12);
    const day = parseDateValue(dayStr, "day", 1, 31);
    return buildDate(year, month, day, {
        hours,
        minutes,
        seconds,
        fractionalMilliseconds
    });
};
const IMF_FIXDATE = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d{2}) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? GMT$/);
const RFC_850_DATE = new RegExp(/^(?:Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\d{2})-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d{2}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? GMT$/);
const ASC_TIME = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( [1-9]|\d{2}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? (\d{4})$/);
const parseRfc7231DateTime = (value)=>{
    if (value === null || value === undefined) return undefined;
    if (typeof value !== "string") throw new TypeError("RFC-7231 date-times must be expressed as strings");
    let match = IMF_FIXDATE.exec(value);
    if (match) {
        const [_, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match;
        return buildDate((0, _parseUtils.strictParseShort)(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr, "day", 1, 31), {
            hours,
            minutes,
            seconds,
            fractionalMilliseconds
        });
    }
    match = RFC_850_DATE.exec(value);
    if (match) {
        const [_1, dayStr1, monthStr1, yearStr1, hours1, minutes1, seconds1, fractionalMilliseconds1] = match;
        return adjustRfc850Year(buildDate(parseTwoDigitYear(yearStr1), parseMonthByShortName(monthStr1), parseDateValue(dayStr1, "day", 1, 31), {
            hours: hours1,
            minutes: minutes1,
            seconds: seconds1,
            fractionalMilliseconds: fractionalMilliseconds1
        }));
    }
    match = ASC_TIME.exec(value);
    if (match) {
        const [_2, monthStr2, dayStr2, hours2, minutes2, seconds2, fractionalMilliseconds2, yearStr2] = match;
        return buildDate((0, _parseUtils.strictParseShort)(stripLeadingZeroes(yearStr2)), parseMonthByShortName(monthStr2), parseDateValue(dayStr2.trimLeft(), "day", 1, 31), {
            hours: hours2,
            minutes: minutes2,
            seconds: seconds2,
            fractionalMilliseconds: fractionalMilliseconds2
        });
    }
    throw new TypeError("Invalid RFC-7231 date-time value");
};
const parseEpochTimestamp = (value)=>{
    if (value === null || value === undefined) return undefined;
    let valueAsDouble;
    if (typeof value === "number") valueAsDouble = value;
    else if (typeof value === "string") valueAsDouble = (0, _parseUtils.strictParseDouble)(value);
    else throw new TypeError("Epoch timestamps must be expressed as floating point numbers or their string representation");
    if (Number.isNaN(valueAsDouble) || valueAsDouble === Infinity || valueAsDouble === -Infinity) throw new TypeError("Epoch timestamps must be valid, non-Infinite, non-NaN numerics");
    return new Date(Math.round(valueAsDouble * 1000));
};
const buildDate = (year, month, day, time)=>{
    const adjustedMonth = month - 1;
    validateDayOfMonth(year, adjustedMonth, day);
    return new Date(Date.UTC(year, adjustedMonth, day, parseDateValue(time.hours, "hour", 0, 23), parseDateValue(time.minutes, "minute", 0, 59), parseDateValue(time.seconds, "seconds", 0, 60), parseMilliseconds(time.fractionalMilliseconds)));
};
const parseTwoDigitYear = (value)=>{
    const thisYear = new Date().getUTCFullYear();
    const valueInThisCentury = Math.floor(thisYear / 100) * 100 + (0, _parseUtils.strictParseShort)(stripLeadingZeroes(value));
    if (valueInThisCentury < thisYear) return valueInThisCentury + 100;
    return valueInThisCentury;
};
const FIFTY_YEARS_IN_MILLIS = 1576800000000;
const adjustRfc850Year = (input)=>{
    if (input.getTime() - new Date().getTime() > FIFTY_YEARS_IN_MILLIS) return new Date(Date.UTC(input.getUTCFullYear() - 100, input.getUTCMonth(), input.getUTCDate(), input.getUTCHours(), input.getUTCMinutes(), input.getUTCSeconds(), input.getUTCMilliseconds()));
    return input;
};
const parseMonthByShortName = (value)=>{
    const monthIdx = MONTHS.indexOf(value);
    if (monthIdx < 0) throw new TypeError(`Invalid month: ${value}`);
    return monthIdx + 1;
};
const DAYS_IN_MONTH = [
    31,
    28,
    31,
    30,
    31,
    30,
    31,
    31,
    30,
    31,
    30,
    31
];
const validateDayOfMonth = (year, month, day)=>{
    let maxDays = DAYS_IN_MONTH[month];
    if (month === 1 && isLeapYear(year)) maxDays = 29;
    if (day > maxDays) throw new TypeError(`Invalid day for ${MONTHS[month]} in ${year}: ${day}`);
};
const isLeapYear = (year)=>{
    return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
};
const parseDateValue = (value, type, lower, upper)=>{
    const dateVal = (0, _parseUtils.strictParseByte)(stripLeadingZeroes(value));
    if (dateVal < lower || dateVal > upper) throw new TypeError(`${type} must be between ${lower} and ${upper}, inclusive`);
    return dateVal;
};
const parseMilliseconds = (value)=>{
    if (value === null || value === undefined) return 0;
    return (0, _parseUtils.strictParseFloat32)("0." + value) * 1000;
};
const stripLeadingZeroes = (value)=>{
    let idx = 0;
    while(idx < value.length - 1 && value.charAt(idx) === "0")idx++;
    if (idx === 0) return value;
    return value.slice(idx);
};

},{"./parse-utils":"h47HV","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"h47HV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "parseBoolean", ()=>parseBoolean);
parcelHelpers.export(exports, "expectBoolean", ()=>expectBoolean);
parcelHelpers.export(exports, "expectNumber", ()=>expectNumber);
parcelHelpers.export(exports, "expectFloat32", ()=>expectFloat32);
parcelHelpers.export(exports, "expectLong", ()=>expectLong);
parcelHelpers.export(exports, "expectInt", ()=>expectInt);
parcelHelpers.export(exports, "expectInt32", ()=>expectInt32);
parcelHelpers.export(exports, "expectShort", ()=>expectShort);
parcelHelpers.export(exports, "expectByte", ()=>expectByte);
parcelHelpers.export(exports, "expectNonNull", ()=>expectNonNull);
parcelHelpers.export(exports, "expectObject", ()=>expectObject);
parcelHelpers.export(exports, "expectString", ()=>expectString);
parcelHelpers.export(exports, "expectUnion", ()=>expectUnion);
parcelHelpers.export(exports, "strictParseDouble", ()=>strictParseDouble);
parcelHelpers.export(exports, "strictParseFloat", ()=>strictParseFloat);
parcelHelpers.export(exports, "strictParseFloat32", ()=>strictParseFloat32);
parcelHelpers.export(exports, "limitedParseDouble", ()=>limitedParseDouble);
parcelHelpers.export(exports, "handleFloat", ()=>handleFloat);
parcelHelpers.export(exports, "limitedParseFloat", ()=>limitedParseFloat);
parcelHelpers.export(exports, "limitedParseFloat32", ()=>limitedParseFloat32);
parcelHelpers.export(exports, "strictParseLong", ()=>strictParseLong);
parcelHelpers.export(exports, "strictParseInt", ()=>strictParseInt);
parcelHelpers.export(exports, "strictParseInt32", ()=>strictParseInt32);
parcelHelpers.export(exports, "strictParseShort", ()=>strictParseShort);
parcelHelpers.export(exports, "strictParseByte", ()=>strictParseByte);
parcelHelpers.export(exports, "logger", ()=>logger);
const parseBoolean = (value)=>{
    switch(value){
        case "true":
            return true;
        case "false":
            return false;
        default:
            throw new Error(`Unable to parse boolean value "${value}"`);
    }
};
const expectBoolean = (value)=>{
    if (value === null || value === undefined) return undefined;
    if (typeof value === "number") {
        if (value === 0 || value === 1) logger.warn(stackTraceWarning(`Expected boolean, got ${typeof value}: ${value}`));
        if (value === 0) return false;
        if (value === 1) return true;
    }
    if (typeof value === "string") {
        const lower = value.toLowerCase();
        if (lower === "false" || lower === "true") logger.warn(stackTraceWarning(`Expected boolean, got ${typeof value}: ${value}`));
        if (lower === "false") return false;
        if (lower === "true") return true;
    }
    if (typeof value === "boolean") return value;
    throw new TypeError(`Expected boolean, got ${typeof value}: ${value}`);
};
const expectNumber = (value)=>{
    if (value === null || value === undefined) return undefined;
    if (typeof value === "string") {
        const parsed = parseFloat(value);
        if (!Number.isNaN(parsed)) {
            if (String(parsed) !== String(value)) logger.warn(stackTraceWarning(`Expected number but observed string: ${value}`));
            return parsed;
        }
    }
    if (typeof value === "number") return value;
    throw new TypeError(`Expected number, got ${typeof value}: ${value}`);
};
const MAX_FLOAT = Math.ceil(2 ** 127 * (2 - 2 ** -23));
const expectFloat32 = (value)=>{
    const expected = expectNumber(value);
    if (expected !== undefined && !Number.isNaN(expected) && expected !== Infinity && expected !== -Infinity) {
        if (Math.abs(expected) > MAX_FLOAT) throw new TypeError(`Expected 32-bit float, got ${value}`);
    }
    return expected;
};
const expectLong = (value)=>{
    if (value === null || value === undefined) return undefined;
    if (Number.isInteger(value) && !Number.isNaN(value)) return value;
    throw new TypeError(`Expected integer, got ${typeof value}: ${value}`);
};
const expectInt = expectLong;
const expectInt32 = (value)=>expectSizedInt(value, 32);
const expectShort = (value)=>expectSizedInt(value, 16);
const expectByte = (value)=>expectSizedInt(value, 8);
const expectSizedInt = (value, size)=>{
    const expected = expectLong(value);
    if (expected !== undefined && castInt(expected, size) !== expected) throw new TypeError(`Expected ${size}-bit integer, got ${value}`);
    return expected;
};
const castInt = (value, size)=>{
    switch(size){
        case 32:
            return Int32Array.of(value)[0];
        case 16:
            return Int16Array.of(value)[0];
        case 8:
            return Int8Array.of(value)[0];
    }
};
const expectNonNull = (value, location)=>{
    if (value === null || value === undefined) {
        if (location) throw new TypeError(`Expected a non-null value for ${location}`);
        throw new TypeError("Expected a non-null value");
    }
    return value;
};
const expectObject = (value)=>{
    if (value === null || value === undefined) return undefined;
    if (typeof value === "object" && !Array.isArray(value)) return value;
    const receivedType = Array.isArray(value) ? "array" : typeof value;
    throw new TypeError(`Expected object, got ${receivedType}: ${value}`);
};
const expectString = (value)=>{
    if (value === null || value === undefined) return undefined;
    if (typeof value === "string") return value;
    if ([
        "boolean",
        "number",
        "bigint"
    ].includes(typeof value)) {
        logger.warn(stackTraceWarning(`Expected string, got ${typeof value}: ${value}`));
        return String(value);
    }
    throw new TypeError(`Expected string, got ${typeof value}: ${value}`);
};
const expectUnion = (value)=>{
    if (value === null || value === undefined) return undefined;
    const asObject = expectObject(value);
    const setKeys = Object.entries(asObject).filter(([, v])=>v != null).map(([k])=>k);
    if (setKeys.length === 0) throw new TypeError(`Unions must have exactly one non-null member. None were found.`);
    if (setKeys.length > 1) throw new TypeError(`Unions must have exactly one non-null member. Keys ${setKeys} were not null.`);
    return asObject;
};
const strictParseDouble = (value)=>{
    if (typeof value == "string") return expectNumber(parseNumber(value));
    return expectNumber(value);
};
const strictParseFloat = strictParseDouble;
const strictParseFloat32 = (value)=>{
    if (typeof value == "string") return expectFloat32(parseNumber(value));
    return expectFloat32(value);
};
const NUMBER_REGEX = /(-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?)|(-?Infinity)|(NaN)/g;
const parseNumber = (value)=>{
    const matches = value.match(NUMBER_REGEX);
    if (matches === null || matches[0].length !== value.length) throw new TypeError(`Expected real number, got implicit NaN`);
    return parseFloat(value);
};
const limitedParseDouble = (value)=>{
    if (typeof value == "string") return parseFloatString(value);
    return expectNumber(value);
};
const handleFloat = limitedParseDouble;
const limitedParseFloat = limitedParseDouble;
const limitedParseFloat32 = (value)=>{
    if (typeof value == "string") return parseFloatString(value);
    return expectFloat32(value);
};
const parseFloatString = (value)=>{
    switch(value){
        case "NaN":
            return NaN;
        case "Infinity":
            return Infinity;
        case "-Infinity":
            return -Infinity;
        default:
            throw new Error(`Unable to parse float value: ${value}`);
    }
};
const strictParseLong = (value)=>{
    if (typeof value === "string") return expectLong(parseNumber(value));
    return expectLong(value);
};
const strictParseInt = strictParseLong;
const strictParseInt32 = (value)=>{
    if (typeof value === "string") return expectInt32(parseNumber(value));
    return expectInt32(value);
};
const strictParseShort = (value)=>{
    if (typeof value === "string") return expectShort(parseNumber(value));
    return expectShort(value);
};
const strictParseByte = (value)=>{
    if (typeof value === "string") return expectByte(parseNumber(value));
    return expectByte(value);
};
const stackTraceWarning = (message)=>{
    return String(new TypeError(message).stack || message).split("\n").slice(0, 5).filter((s)=>!s.includes("stackTraceWarning")).join("\n");
};
const logger = {
    warn: console.warn
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bG4lh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "throwDefaultError", ()=>throwDefaultError);
var _exceptions = require("./exceptions");
const throwDefaultError = ({ output , parsedBody , exceptionCtor , errorCode  })=>{
    const $metadata = deserializeMetadata(output);
    const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : undefined;
    const response = new exceptionCtor({
        name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknownError",
        $fault: "client",
        $metadata
    });
    throw (0, _exceptions.decorateServiceException)(response, parsedBody);
};
const deserializeMetadata = (output)=>({
        httpStatusCode: output.statusCode,
        requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"],
        extendedRequestId: output.headers["x-amz-id-2"],
        cfId: output.headers["x-amz-cf-id"]
    });

},{"./exceptions":"hliAV","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hliAV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ServiceException", ()=>ServiceException);
parcelHelpers.export(exports, "decorateServiceException", ()=>decorateServiceException);
class ServiceException extends Error {
    constructor(options){
        super(options.message);
        Object.setPrototypeOf(this, ServiceException.prototype);
        this.name = options.name;
        this.$fault = options.$fault;
        this.$metadata = options.$metadata;
    }
}
const decorateServiceException = (exception, additions = {})=>{
    Object.entries(additions).filter(([, v])=>v !== undefined).forEach(([k, v])=>{
        if (exception[k] == undefined || exception[k] === "") exception[k] = v;
    });
    const message = exception.message || exception.Message || "UnknownError";
    exception.message = message;
    delete exception.Message;
    return exception;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bwWM5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "loadConfigsForDefaultMode", ()=>loadConfigsForDefaultMode);
const loadConfigsForDefaultMode = (mode)=>{
    switch(mode){
        case "standard":
            return {
                retryMode: "standard",
                connectionTimeout: 3100
            };
        case "in-region":
            return {
                retryMode: "standard",
                connectionTimeout: 1100
            };
        case "cross-region":
            return {
                retryMode: "standard",
                connectionTimeout: 3100
            };
        case "mobile":
            return {
                retryMode: "standard",
                connectionTimeout: 30000
            };
        default:
            return {};
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4TK97":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "emitWarningIfUnsupportedVersion", ()=>emitWarningIfUnsupportedVersion);
var process = require("process");
let warningEmitted = false;
const emitWarningIfUnsupportedVersion = (version)=>{
    if (version && !warningEmitted && parseInt(version.substring(1, version.indexOf("."))) < 14) {
        warningEmitted = true;
        process.emitWarning(`The AWS SDK for JavaScript (v3) will\n` + `no longer support Node.js ${version} on November 1, 2022.\n\n` + `To continue receiving updates to AWS services, bug fixes, and security\n` + `updates please upgrade to Node.js 14.x or later.\n\n` + `For details, please refer our blog post: https://a.co/48dbdYz`, `NodeDeprecationWarning`);
    }
};

},{"process":"d5jf4","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"843Ff":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "extendedEncodeURIComponent", ()=>extendedEncodeURIComponent);
function extendedEncodeURIComponent(str) {
    return encodeURIComponent(str).replace(/[!'()*]/g, function(c) {
        return "%" + c.charCodeAt(0).toString(16).toUpperCase();
    });
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gBHBn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getArrayIfSingleItem", ()=>getArrayIfSingleItem);
const getArrayIfSingleItem = (mayBeArray)=>Array.isArray(mayBeArray) ? mayBeArray : [
        mayBeArray
    ];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ggvWO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getValueFromTextNode", ()=>getValueFromTextNode);
const getValueFromTextNode = (obj)=>{
    const textNodeName = "#text";
    for(const key in obj){
        if (obj.hasOwnProperty(key) && obj[key][textNodeName] !== undefined) obj[key] = obj[key][textNodeName];
        else if (typeof obj[key] === "object" && obj[key] !== null) obj[key] = getValueFromTextNode(obj[key]);
    }
    return obj;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"js6bs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "StringWrapper", ()=>StringWrapper);
parcelHelpers.export(exports, "LazyJsonString", ()=>LazyJsonString);
const StringWrapper = function() {
    const Class = Object.getPrototypeOf(this).constructor;
    const Constructor = Function.bind.apply(String, [
        null,
        ...arguments
    ]);
    const instance = new Constructor();
    Object.setPrototypeOf(instance, Class.prototype);
    return instance;
};
StringWrapper.prototype = Object.create(String.prototype, {
    constructor: {
        value: StringWrapper,
        enumerable: false,
        writable: true,
        configurable: true
    }
});
Object.setPrototypeOf(StringWrapper, String);
class LazyJsonString extends StringWrapper {
    deserializeJSON() {
        return JSON.parse(super.toString());
    }
    toJSON() {
        return super.toString();
    }
    static fromObject(object) {
        if (object instanceof LazyJsonString) return object;
        else if (object instanceof String || typeof object === "string") return new LazyJsonString(object);
        return new LazyJsonString(JSON.stringify(object));
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cvh8s":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "map", ()=>map);
parcelHelpers.export(exports, "convertMap", ()=>convertMap);
function map(arg0, arg1, arg2) {
    let target;
    let filter;
    let instructions;
    if (typeof arg1 === "undefined" && typeof arg2 === "undefined") {
        target = {};
        instructions = arg0;
    } else {
        target = arg0;
        if (typeof arg1 === "function") {
            filter = arg1;
            instructions = arg2;
            return mapWithFilter(target, filter, instructions);
        } else instructions = arg1;
    }
    for (const key of Object.keys(instructions)){
        if (!Array.isArray(instructions[key])) {
            target[key] = instructions[key];
            continue;
        }
        let [filter1, value] = instructions[key];
        if (typeof value === "function") {
            let _value;
            const defaultFilterPassed = filter1 === undefined && (_value = value()) != null;
            const customFilterPassed = typeof filter1 === "function" && !!filter1(void 0) || typeof filter1 !== "function" && !!filter1;
            if (defaultFilterPassed) target[key] = _value;
            else if (customFilterPassed) target[key] = value();
        } else {
            const defaultFilterPassed1 = filter1 === undefined && value != null;
            const customFilterPassed1 = typeof filter1 === "function" && !!filter1(value) || typeof filter1 !== "function" && !!filter1;
            if (defaultFilterPassed1 || customFilterPassed1) target[key] = value;
        }
    }
    return target;
}
const convertMap = (target)=>{
    const output = {};
    for (const [k, v] of Object.entries(target || {}))output[k] = [
        ,
        v
    ];
    return output;
};
const mapWithFilter = (target, filter, instructions)=>{
    return map(target, Object.entries(instructions).reduce((_instructions, [key, value])=>{
        if (Array.isArray(value)) _instructions[key] = value;
        else if (typeof value === "function") _instructions[key] = [
            filter,
            value()
        ];
        else _instructions[key] = [
            filter,
            value
        ];
        return _instructions;
    }, {}));
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"43uvW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "resolvedPath", ()=>resolvedPath);
var _extendedEncodeUriComponent = require("./extended-encode-uri-component");
const resolvedPath = (resolvedPath, input, memberName, labelValueProvider, uriLabel, isGreedyLabel)=>{
    if (input != null && input[memberName] !== undefined) {
        const labelValue = labelValueProvider();
        if (labelValue.length <= 0) throw new Error("Empty value provided for input HTTP label: " + memberName + ".");
        resolvedPath = resolvedPath.replace(uriLabel, isGreedyLabel ? labelValue.split("/").map((segment)=>(0, _extendedEncodeUriComponent.extendedEncodeURIComponent)(segment)).join("/") : (0, _extendedEncodeUriComponent.extendedEncodeURIComponent)(labelValue));
    } else throw new Error("No value provided for input HTTP label: " + memberName + ".");
    return resolvedPath;
};

},{"./extended-encode-uri-component":"843Ff","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bjeXK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "serializeFloat", ()=>serializeFloat);
const serializeFloat = (value)=>{
    if (value !== value) return "NaN";
    switch(value){
        case Infinity:
            return "Infinity";
        case -Infinity:
            return "-Infinity";
        default:
            return value;
    }
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4jYlS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "splitEvery", ()=>splitEvery);
function splitEvery(value, delimiter, numDelimiters) {
    if (numDelimiters <= 0 || !Number.isInteger(numDelimiters)) throw new Error("Invalid number of delimiters (" + numDelimiters + ") for splitEvery.");
    const segments = value.split(delimiter);
    if (numDelimiters === 1) return segments;
    const compoundSegments = [];
    let currentSegment = "";
    for(let i = 0; i < segments.length; i++){
        if (currentSegment === "") currentSegment = segments[i];
        else currentSegment += delimiter + segments[i];
        if ((i + 1) % numDelimiters === 0) {
            compoundSegments.push(currentSegment);
            currentSegment = "";
        }
    }
    if (currentSegment !== "") compoundSegments.push(currentSegment);
    return compoundSegments;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"50koJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "resolveClientEndpointParameters", ()=>resolveClientEndpointParameters);
const resolveClientEndpointParameters = (options)=>{
    return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "cognito-identity"
    };
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hveG8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getRuntimeConfig", ()=>getRuntimeConfig);
var _packageJson = require("../package.json");
var _packageJsonDefault = parcelHelpers.interopDefault(_packageJson);
var _sha256Browser = require("@aws-crypto/sha256-browser");
var _configResolver = require("@aws-sdk/config-resolver");
var _fetchHttpHandler = require("@aws-sdk/fetch-http-handler");
var _invalidDependency = require("@aws-sdk/invalid-dependency");
var _middlewareRetry = require("@aws-sdk/middleware-retry");
var _utilBase64Browser = require("@aws-sdk/util-base64-browser");
var _utilBodyLengthBrowser = require("@aws-sdk/util-body-length-browser");
var _utilUserAgentBrowser = require("@aws-sdk/util-user-agent-browser");
var _utilUtf8Browser = require("@aws-sdk/util-utf8-browser");
var _runtimeConfigShared = require("./runtimeConfig.shared");
var _smithyClient = require("@aws-sdk/smithy-client");
var _utilDefaultsModeBrowser = require("@aws-sdk/util-defaults-mode-browser");
const getRuntimeConfig = (config)=>{
    const defaultsMode = (0, _utilDefaultsModeBrowser.resolveDefaultsModeConfig)(config);
    const defaultConfigProvider = ()=>defaultsMode().then((0, _smithyClient.loadConfigsForDefaultMode));
    const clientSharedValues = (0, _runtimeConfigShared.getRuntimeConfig)(config);
    return {
        ...clientSharedValues,
        ...config,
        runtime: "browser",
        defaultsMode,
        base64Decoder: config?.base64Decoder ?? (0, _utilBase64Browser.fromBase64),
        base64Encoder: config?.base64Encoder ?? (0, _utilBase64Browser.toBase64),
        bodyLengthChecker: config?.bodyLengthChecker ?? (0, _utilBodyLengthBrowser.calculateBodyLength),
        credentialDefaultProvider: config?.credentialDefaultProvider ?? ((_)=>()=>Promise.reject(new Error("Credential is missing"))),
        defaultUserAgentProvider: config?.defaultUserAgentProvider ?? (0, _utilUserAgentBrowser.defaultUserAgent)({
            serviceId: clientSharedValues.serviceId,
            clientVersion: (0, _packageJsonDefault.default).version
        }),
        maxAttempts: config?.maxAttempts ?? (0, _middlewareRetry.DEFAULT_MAX_ATTEMPTS),
        region: config?.region ?? (0, _invalidDependency.invalidProvider)("Region is missing"),
        requestHandler: config?.requestHandler ?? new (0, _fetchHttpHandler.FetchHttpHandler)(defaultConfigProvider),
        retryMode: config?.retryMode ?? (async ()=>(await defaultConfigProvider()).retryMode || (0, _middlewareRetry.DEFAULT_RETRY_MODE)),
        sha256: config?.sha256 ?? (0, _sha256Browser.Sha256),
        streamCollector: config?.streamCollector ?? (0, _fetchHttpHandler.streamCollector),
        useDualstackEndpoint: config?.useDualstackEndpoint ?? (()=>Promise.resolve((0, _configResolver.DEFAULT_USE_DUALSTACK_ENDPOINT))),
        useFipsEndpoint: config?.useFipsEndpoint ?? (()=>Promise.resolve((0, _configResolver.DEFAULT_USE_FIPS_ENDPOINT))),
        utf8Decoder: config?.utf8Decoder ?? (0, _utilUtf8Browser.fromUtf8),
        utf8Encoder: config?.utf8Encoder ?? (0, _utilUtf8Browser.toUtf8)
    };
};

},{"../package.json":"1oTCA","@aws-crypto/sha256-browser":"h7M77","@aws-sdk/config-resolver":"2Zj28","@aws-sdk/fetch-http-handler":"etWgp","@aws-sdk/invalid-dependency":"1kvFV","@aws-sdk/middleware-retry":"iRfgc","@aws-sdk/util-base64-browser":"9aHTk","@aws-sdk/util-body-length-browser":"6ddt5","@aws-sdk/util-user-agent-browser":"duqKe","@aws-sdk/util-utf8-browser":"3Y1HX","./runtimeConfig.shared":"e35dg","@aws-sdk/smithy-client":"ats0l","@aws-sdk/util-defaults-mode-browser":"lFq8A","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1oTCA":[function(require,module,exports) {
module.exports = JSON.parse('{"name":"@aws-sdk/client-cognito-identity","description":"AWS SDK for JavaScript Cognito Identity Client for Node.js, Browser and React Native","version":"3.199.0","scripts":{"build":"concurrently \'yarn:build:cjs\' \'yarn:build:es\' \'yarn:build:types\'","build:cjs":"tsc -p tsconfig.cjs.json","build:docs":"typedoc","build:es":"tsc -p tsconfig.es.json","build:include:deps":"lerna run --scope $npm_package_name --include-dependencies build","build:types":"tsc -p tsconfig.types.json","build:types:downlevel":"downlevel-dts dist-types dist-types/ts3.4","clean":"rimraf ./dist-* && rimraf *.tsbuildinfo","test:e2e":"ts-mocha test/**/*.ispec.ts && karma start karma.conf.js"},"main":"./dist-cjs/index.js","types":"./dist-types/index.d.ts","module":"./dist-es/index.js","sideEffects":false,"dependencies":{"@aws-crypto/sha256-browser":"2.0.0","@aws-crypto/sha256-js":"2.0.0","@aws-sdk/client-sts":"3.199.0","@aws-sdk/config-resolver":"3.198.0","@aws-sdk/credential-provider-node":"3.199.0","@aws-sdk/fetch-http-handler":"3.199.0","@aws-sdk/hash-node":"3.198.0","@aws-sdk/invalid-dependency":"3.198.0","@aws-sdk/middleware-content-length":"3.199.0","@aws-sdk/middleware-endpoint":"3.198.0","@aws-sdk/middleware-host-header":"3.198.0","@aws-sdk/middleware-logger":"3.198.0","@aws-sdk/middleware-recursion-detection":"3.198.0","@aws-sdk/middleware-retry":"3.198.0","@aws-sdk/middleware-serde":"3.198.0","@aws-sdk/middleware-signing":"3.198.0","@aws-sdk/middleware-stack":"3.198.0","@aws-sdk/middleware-user-agent":"3.198.0","@aws-sdk/node-config-provider":"3.198.0","@aws-sdk/node-http-handler":"3.199.0","@aws-sdk/protocol-http":"3.198.0","@aws-sdk/smithy-client":"3.198.0","@aws-sdk/types":"3.198.0","@aws-sdk/url-parser":"3.198.0","@aws-sdk/util-base64-browser":"3.188.0","@aws-sdk/util-base64-node":"3.188.0","@aws-sdk/util-body-length-browser":"3.188.0","@aws-sdk/util-body-length-node":"3.188.0","@aws-sdk/util-defaults-mode-browser":"3.198.0","@aws-sdk/util-defaults-mode-node":"3.198.0","@aws-sdk/util-endpoints":"3.198.0","@aws-sdk/util-user-agent-browser":"3.198.0","@aws-sdk/util-user-agent-node":"3.198.0","@aws-sdk/util-utf8-browser":"3.188.0","@aws-sdk/util-utf8-node":"3.199.0","tslib":"^2.3.1"},"devDependencies":{"@aws-sdk/client-iam":"3.199.0","@aws-sdk/service-client-documentation-generator":"3.188.0","@tsconfig/recommended":"1.0.1","@types/chai":"^4.2.11","@types/mocha":"^8.0.4","@types/node":"^12.7.5","concurrently":"7.0.0","downlevel-dts":"0.10.1","rimraf":"3.0.2","typedoc":"0.19.2","typescript":"~4.6.2"},"overrides":{"typedoc":{"typescript":"~4.6.2"}},"engines":{"node":">=12.0.0"},"typesVersions":{"<4.0":{"dist-types/*":["dist-types/ts3.4/*"]}},"files":["dist-*"],"author":{"name":"AWS SDK for JavaScript Team","url":"https://aws.amazon.com/javascript/"},"license":"Apache-2.0","browser":{"./dist-es/runtimeConfig":"./dist-es/runtimeConfig.browser"},"react-native":{"./dist-es/runtimeConfig":"./dist-es/runtimeConfig.native"},"homepage":"https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-cognito-identity","repository":{"type":"git","url":"https://github.com/aws/aws-sdk-js-v3.git","directory":"clients/client-cognito-identity"}}');

},{}],"h7M77":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.WebCryptoSha256 = exports.Ie11Sha256 = void 0;
var tslib_1 = require("tslib");
(0, tslib_1.__exportStar)(require("./crossPlatformSha256"), exports);
var ie11Sha256_1 = require("./ie11Sha256");
Object.defineProperty(exports, "Ie11Sha256", {
    enumerable: true,
    get: function() {
        return ie11Sha256_1.Sha256;
    }
});
var webCryptoSha256_1 = require("./webCryptoSha256");
Object.defineProperty(exports, "WebCryptoSha256", {
    enumerable: true,
    get: function() {
        return webCryptoSha256_1.Sha256;
    }
});

},{"tslib":"1ibki","./crossPlatformSha256":"5zD05","./ie11Sha256":"4aNxR","./webCryptoSha256":"1toRi"}],"1ibki":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
parcelHelpers.export(exports, "__spread", ()=>__spread);
parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}
function __exportStar(m, exports) {
    for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    }
    result.default = mod;
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
    privateMap.set(receiver, value);
    return value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5zD05":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Sha256 = void 0;
var ie11Sha256_1 = require("./ie11Sha256");
var webCryptoSha256_1 = require("./webCryptoSha256");
var sha256_js_1 = require("@aws-crypto/sha256-js");
var supports_web_crypto_1 = require("@aws-crypto/supports-web-crypto");
var ie11_detection_1 = require("@aws-crypto/ie11-detection");
var util_locate_window_1 = require("@aws-sdk/util-locate-window");
var Sha256 = /** @class */ function() {
    function Sha256(secret) {
        if ((0, supports_web_crypto_1.supportsWebCrypto)((0, util_locate_window_1.locateWindow)())) this.hash = new webCryptoSha256_1.Sha256(secret);
        else if ((0, ie11_detection_1.isMsWindow)((0, util_locate_window_1.locateWindow)())) this.hash = new ie11Sha256_1.Sha256(secret);
        else this.hash = new sha256_js_1.Sha256(secret);
    }
    Sha256.prototype.update = function(data, encoding) {
        this.hash.update(data, encoding);
    };
    Sha256.prototype.digest = function() {
        return this.hash.digest();
    };
    return Sha256;
}();
exports.Sha256 = Sha256;

},{"./ie11Sha256":"4aNxR","./webCryptoSha256":"1toRi","@aws-crypto/sha256-js":"fXmvu","@aws-crypto/supports-web-crypto":"hF3NL","@aws-crypto/ie11-detection":"l9y1G","@aws-sdk/util-locate-window":"7axS0"}],"4aNxR":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Sha256 = void 0;
var isEmptyData_1 = require("./isEmptyData");
var constants_1 = require("./constants");
var util_utf8_browser_1 = require("@aws-sdk/util-utf8-browser");
var util_locate_window_1 = require("@aws-sdk/util-locate-window");
var Sha256 = /** @class */ function() {
    function Sha256(secret) {
        if (secret) {
            this.operation = getKeyPromise(secret).then(function(keyData) {
                return (0, util_locate_window_1.locateWindow)().msCrypto.subtle.sign(constants_1.SHA_256_HMAC_ALGO, keyData);
            });
            this.operation.catch(function() {});
        } else this.operation = Promise.resolve((0, util_locate_window_1.locateWindow)().msCrypto.subtle.digest("SHA-256"));
    }
    Sha256.prototype.update = function(toHash) {
        var _this = this;
        if ((0, isEmptyData_1.isEmptyData)(toHash)) return;
        this.operation = this.operation.then(function(operation) {
            operation.onerror = function() {
                _this.operation = Promise.reject(new Error("Error encountered updating hash"));
            };
            operation.process(toArrayBufferView(toHash));
            return operation;
        });
        this.operation.catch(function() {});
    };
    Sha256.prototype.digest = function() {
        return this.operation.then(function(operation) {
            return new Promise(function(resolve, reject) {
                operation.onerror = function() {
                    reject(new Error("Error encountered finalizing hash"));
                };
                operation.oncomplete = function() {
                    if (operation.result) resolve(new Uint8Array(operation.result));
                    reject(new Error("Error encountered finalizing hash"));
                };
                operation.finish();
            });
        });
    };
    return Sha256;
}();
exports.Sha256 = Sha256;
function getKeyPromise(secret) {
    return new Promise(function(resolve, reject) {
        var keyOperation = (0, util_locate_window_1.locateWindow)().msCrypto.subtle.importKey("raw", toArrayBufferView(secret), constants_1.SHA_256_HMAC_ALGO, false, [
            "sign"
        ]);
        keyOperation.oncomplete = function() {
            if (keyOperation.result) resolve(keyOperation.result);
            reject(new Error("ImportKey completed without importing key."));
        };
        keyOperation.onerror = function() {
            reject(new Error("ImportKey failed to import key."));
        };
    });
}
function toArrayBufferView(data) {
    if (typeof data === "string") return (0, util_utf8_browser_1.fromUtf8)(data);
    if (ArrayBuffer.isView(data)) return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
    return new Uint8Array(data);
}

},{"./isEmptyData":"2P0qd","./constants":"YaYqM","@aws-sdk/util-utf8-browser":"3Y1HX","@aws-sdk/util-locate-window":"7axS0"}],"2P0qd":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isEmptyData = void 0;
function isEmptyData(data) {
    if (typeof data === "string") return data.length === 0;
    return data.byteLength === 0;
}
exports.isEmptyData = isEmptyData;

},{}],"YaYqM":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.EMPTY_DATA_SHA_256 = exports.SHA_256_HMAC_ALGO = exports.SHA_256_HASH = void 0;
exports.SHA_256_HASH = {
    name: "SHA-256"
};
exports.SHA_256_HMAC_ALGO = {
    name: "HMAC",
    hash: exports.SHA_256_HASH
};
exports.EMPTY_DATA_SHA_256 = new Uint8Array([
    227,
    176,
    196,
    66,
    152,
    252,
    28,
    20,
    154,
    251,
    244,
    200,
    153,
    111,
    185,
    36,
    39,
    174,
    65,
    228,
    100,
    155,
    147,
    76,
    164,
    149,
    153,
    27,
    120,
    82,
    184,
    85
]);

},{}],"3Y1HX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fromUtf8", ()=>fromUtf8);
parcelHelpers.export(exports, "toUtf8", ()=>toUtf8);
var _pureJs = require("./pureJs");
var _whatwgEncodingApi = require("./whatwgEncodingApi");
const fromUtf8 = (input)=>typeof TextEncoder === "function" ? (0, _whatwgEncodingApi.fromUtf8)(input) : (0, _pureJs.fromUtf8)(input);
const toUtf8 = (input)=>typeof TextDecoder === "function" ? (0, _whatwgEncodingApi.toUtf8)(input) : (0, _pureJs.toUtf8)(input);

},{"./pureJs":"aef7j","./whatwgEncodingApi":"bpscb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aef7j":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fromUtf8", ()=>fromUtf8);
parcelHelpers.export(exports, "toUtf8", ()=>toUtf8);
const fromUtf8 = (input)=>{
    const bytes = [];
    for(let i = 0, len = input.length; i < len; i++){
        const value = input.charCodeAt(i);
        if (value < 0x80) bytes.push(value);
        else if (value < 0x800) bytes.push(value >> 6 | 192, value & 63 | 128);
        else if (i + 1 < input.length && (value & 0xfc00) === 0xd800 && (input.charCodeAt(i + 1) & 0xfc00) === 0xdc00) {
            const surrogatePair = 0x10000 + ((value & 1023) << 10) + (input.charCodeAt(++i) & 1023);
            bytes.push(surrogatePair >> 18 | 240, surrogatePair >> 12 & 63 | 128, surrogatePair >> 6 & 63 | 128, surrogatePair & 63 | 128);
        } else bytes.push(value >> 12 | 224, value >> 6 & 63 | 128, value & 63 | 128);
    }
    return Uint8Array.from(bytes);
};
const toUtf8 = (input)=>{
    let decoded = "";
    for(let i = 0, len = input.length; i < len; i++){
        const byte = input[i];
        if (byte < 0x80) decoded += String.fromCharCode(byte);
        else if (192 <= byte && byte < 224) {
            const nextByte = input[++i];
            decoded += String.fromCharCode((byte & 31) << 6 | nextByte & 63);
        } else if (240 <= byte && byte < 365) {
            const surrogatePair = [
                byte,
                input[++i],
                input[++i],
                input[++i]
            ];
            const encoded = "%" + surrogatePair.map((byteValue)=>byteValue.toString(16)).join("%");
            decoded += decodeURIComponent(encoded);
        } else decoded += String.fromCharCode((byte & 15) << 12 | (input[++i] & 63) << 6 | input[++i] & 63);
    }
    return decoded;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bpscb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fromUtf8", ()=>fromUtf8);
parcelHelpers.export(exports, "toUtf8", ()=>toUtf8);
function fromUtf8(input) {
    return new TextEncoder().encode(input);
}
function toUtf8(input) {
    return new TextDecoder("utf-8").decode(input);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7axS0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "locateWindow", ()=>locateWindow);
const fallbackWindow = {};
function locateWindow() {
    if (typeof window !== "undefined") return window;
    else if (typeof self !== "undefined") return self;
    return fallbackWindow;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1toRi":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Sha256 = void 0;
var util_1 = require("@aws-crypto/util");
var constants_1 = require("./constants");
var util_locate_window_1 = require("@aws-sdk/util-locate-window");
var Sha256 = /** @class */ function() {
    function Sha256(secret) {
        this.toHash = new Uint8Array(0);
        if (secret !== void 0) {
            this.key = new Promise(function(resolve, reject) {
                (0, util_locate_window_1.locateWindow)().crypto.subtle.importKey("raw", (0, util_1.convertToBuffer)(secret), constants_1.SHA_256_HMAC_ALGO, false, [
                    "sign"
                ]).then(resolve, reject);
            });
            this.key.catch(function() {});
        }
    }
    Sha256.prototype.update = function(data) {
        if ((0, util_1.isEmptyData)(data)) return;
        var update = (0, util_1.convertToBuffer)(data);
        var typedArray = new Uint8Array(this.toHash.byteLength + update.byteLength);
        typedArray.set(this.toHash, 0);
        typedArray.set(update, this.toHash.byteLength);
        this.toHash = typedArray;
    };
    Sha256.prototype.digest = function() {
        var _this = this;
        if (this.key) return this.key.then(function(key) {
            return (0, util_locate_window_1.locateWindow)().crypto.subtle.sign(constants_1.SHA_256_HMAC_ALGO, key, _this.toHash).then(function(data) {
                return new Uint8Array(data);
            });
        });
        if ((0, util_1.isEmptyData)(this.toHash)) return Promise.resolve(constants_1.EMPTY_DATA_SHA_256);
        return Promise.resolve().then(function() {
            return (0, util_locate_window_1.locateWindow)().crypto.subtle.digest(constants_1.SHA_256_HASH, _this.toHash);
        }).then(function(data) {
            return Promise.resolve(new Uint8Array(data));
        });
    };
    return Sha256;
}();
exports.Sha256 = Sha256;

},{"@aws-crypto/util":"aDvRG","./constants":"YaYqM","@aws-sdk/util-locate-window":"7axS0"}],"aDvRG":[function(require,module,exports) {
"use strict";
// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.uint32ArrayFrom = exports.numToUint8 = exports.isEmptyData = exports.convertToBuffer = void 0;
var convertToBuffer_1 = require("./convertToBuffer");
Object.defineProperty(exports, "convertToBuffer", {
    enumerable: true,
    get: function() {
        return convertToBuffer_1.convertToBuffer;
    }
});
var isEmptyData_1 = require("./isEmptyData");
Object.defineProperty(exports, "isEmptyData", {
    enumerable: true,
    get: function() {
        return isEmptyData_1.isEmptyData;
    }
});
var numToUint8_1 = require("./numToUint8");
Object.defineProperty(exports, "numToUint8", {
    enumerable: true,
    get: function() {
        return numToUint8_1.numToUint8;
    }
});
var uint32ArrayFrom_1 = require("./uint32ArrayFrom");
Object.defineProperty(exports, "uint32ArrayFrom", {
    enumerable: true,
    get: function() {
        return uint32ArrayFrom_1.uint32ArrayFrom;
    }
});

},{"./convertToBuffer":"9wG1p","./isEmptyData":"7lZKK","./numToUint8":"6vB9f","./uint32ArrayFrom":"gwA65"}],"9wG1p":[function(require,module,exports) {
"use strict";
var Buffer = require("buffer").Buffer;
// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.convertToBuffer = void 0;
var util_utf8_browser_1 = require("@aws-sdk/util-utf8-browser");
// Quick polyfill
var fromUtf8 = typeof Buffer !== "undefined" && Buffer.from ? function(input) {
    return Buffer.from(input, "utf8");
} : util_utf8_browser_1.fromUtf8;
function convertToBuffer(data) {
    // Already a Uint8, do nothing
    if (data instanceof Uint8Array) return data;
    if (typeof data === "string") return fromUtf8(data);
    if (ArrayBuffer.isView(data)) return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
    return new Uint8Array(data);
}
exports.convertToBuffer = convertToBuffer;

},{"buffer":"fCgem","@aws-sdk/util-utf8-browser":"3Y1HX"}],"fCgem":[function(require,module,exports) {
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */ /* eslint-disable no-proto */ "use strict";
var global = arguments[3];
var base64 = require("base64-js");
var ieee754 = require("ieee754");
var isArray = require("isarray");
exports.Buffer = Buffer;
exports.SlowBuffer = SlowBuffer;
exports.INSPECT_MAX_BYTES = 50;
/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */ Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined ? global.TYPED_ARRAY_SUPPORT : typedArraySupport();
/*
 * Export kMaxLength after typed array support is determined.
 */ exports.kMaxLength = kMaxLength();
function typedArraySupport() {
    try {
        var arr = new Uint8Array(1);
        arr.__proto__ = {
            __proto__: Uint8Array.prototype,
            foo: function() {
                return 42;
            }
        };
        return arr.foo() === 42 && typeof arr.subarray === "function" && arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
        ;
    } catch (e) {
        return false;
    }
}
function kMaxLength() {
    return Buffer.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff;
}
function createBuffer(that, length) {
    if (kMaxLength() < length) throw new RangeError("Invalid typed array length");
    if (Buffer.TYPED_ARRAY_SUPPORT) {
        // Return an augmented `Uint8Array` instance, for best performance
        that = new Uint8Array(length);
        that.__proto__ = Buffer.prototype;
    } else {
        // Fallback: Return an object instance of the Buffer class
        if (that === null) that = new Buffer(length);
        that.length = length;
    }
    return that;
}
/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */ function Buffer(arg, encodingOrOffset, length) {
    if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) return new Buffer(arg, encodingOrOffset, length);
    // Common case.
    if (typeof arg === "number") {
        if (typeof encodingOrOffset === "string") throw new Error("If encoding is specified then the first argument must be a string");
        return allocUnsafe(this, arg);
    }
    return from(this, arg, encodingOrOffset, length);
}
Buffer.poolSize = 8192 // not used by this implementation
;
// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function(arr) {
    arr.__proto__ = Buffer.prototype;
    return arr;
};
function from(that, value, encodingOrOffset, length) {
    if (typeof value === "number") throw new TypeError('"value" argument must not be a number');
    if (typeof ArrayBuffer !== "undefined" && value instanceof ArrayBuffer) return fromArrayBuffer(that, value, encodingOrOffset, length);
    if (typeof value === "string") return fromString(that, value, encodingOrOffset);
    return fromObject(that, value);
}
/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/ Buffer.from = function(value, encodingOrOffset, length) {
    return from(null, value, encodingOrOffset, length);
};
if (Buffer.TYPED_ARRAY_SUPPORT) {
    Buffer.prototype.__proto__ = Uint8Array.prototype;
    Buffer.__proto__ = Uint8Array;
    if (typeof Symbol !== "undefined" && Symbol.species && Buffer[Symbol.species] === Buffer) // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
        value: null,
        configurable: true
    });
}
function assertSize(size) {
    if (typeof size !== "number") throw new TypeError('"size" argument must be a number');
    else if (size < 0) throw new RangeError('"size" argument must not be negative');
}
function alloc(that, size, fill, encoding) {
    assertSize(size);
    if (size <= 0) return createBuffer(that, size);
    if (fill !== undefined) // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === "string" ? createBuffer(that, size).fill(fill, encoding) : createBuffer(that, size).fill(fill);
    return createBuffer(that, size);
}
/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/ Buffer.alloc = function(size, fill, encoding) {
    return alloc(null, size, fill, encoding);
};
function allocUnsafe(that, size) {
    assertSize(size);
    that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
    if (!Buffer.TYPED_ARRAY_SUPPORT) for(var i = 0; i < size; ++i)that[i] = 0;
    return that;
}
/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */ Buffer.allocUnsafe = function(size) {
    return allocUnsafe(null, size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */ Buffer.allocUnsafeSlow = function(size) {
    return allocUnsafe(null, size);
};
function fromString(that, string, encoding) {
    if (typeof encoding !== "string" || encoding === "") encoding = "utf8";
    if (!Buffer.isEncoding(encoding)) throw new TypeError('"encoding" must be a valid string encoding');
    var length = byteLength(string, encoding) | 0;
    that = createBuffer(that, length);
    var actual = that.write(string, encoding);
    if (actual !== length) // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual);
    return that;
}
function fromArrayLike(that, array) {
    var length = array.length < 0 ? 0 : checked(array.length) | 0;
    that = createBuffer(that, length);
    for(var i = 0; i < length; i += 1)that[i] = array[i] & 255;
    return that;
}
function fromArrayBuffer(that, array, byteOffset, length) {
    array.byteLength // this throws if `array` is not a valid ArrayBuffer
    ;
    if (byteOffset < 0 || array.byteLength < byteOffset) throw new RangeError("'offset' is out of bounds");
    if (array.byteLength < byteOffset + (length || 0)) throw new RangeError("'length' is out of bounds");
    if (byteOffset === undefined && length === undefined) array = new Uint8Array(array);
    else if (length === undefined) array = new Uint8Array(array, byteOffset);
    else array = new Uint8Array(array, byteOffset, length);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
        // Return an augmented `Uint8Array` instance, for best performance
        that = array;
        that.__proto__ = Buffer.prototype;
    } else // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array);
    return that;
}
function fromObject(that, obj) {
    if (Buffer.isBuffer(obj)) {
        var len = checked(obj.length) | 0;
        that = createBuffer(that, len);
        if (that.length === 0) return that;
        obj.copy(that, 0, 0, len);
        return that;
    }
    if (obj) {
        if (typeof ArrayBuffer !== "undefined" && obj.buffer instanceof ArrayBuffer || "length" in obj) {
            if (typeof obj.length !== "number" || isnan(obj.length)) return createBuffer(that, 0);
            return fromArrayLike(that, obj);
        }
        if (obj.type === "Buffer" && isArray(obj.data)) return fromArrayLike(that, obj.data);
    }
    throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.");
}
function checked(length) {
    // Note: cannot use `length < kMaxLength()` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= kMaxLength()) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + kMaxLength().toString(16) + " bytes");
    return length | 0;
}
function SlowBuffer(length) {
    if (+length != length) length = 0;
    return Buffer.alloc(+length);
}
Buffer.isBuffer = function isBuffer(b) {
    return !!(b != null && b._isBuffer);
};
Buffer.compare = function compare(a, b) {
    if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) throw new TypeError("Arguments must be Buffers");
    if (a === b) return 0;
    var x = a.length;
    var y = b.length;
    for(var i = 0, len = Math.min(x, y); i < len; ++i)if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
Buffer.isEncoding = function isEncoding(encoding) {
    switch(String(encoding).toLowerCase()){
        case "hex":
        case "utf8":
        case "utf-8":
        case "ascii":
        case "latin1":
        case "binary":
        case "base64":
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return true;
        default:
            return false;
    }
};
Buffer.concat = function concat(list, length) {
    if (!isArray(list)) throw new TypeError('"list" argument must be an Array of Buffers');
    if (list.length === 0) return Buffer.alloc(0);
    var i;
    if (length === undefined) {
        length = 0;
        for(i = 0; i < list.length; ++i)length += list[i].length;
    }
    var buffer = Buffer.allocUnsafe(length);
    var pos = 0;
    for(i = 0; i < list.length; ++i){
        var buf = list[i];
        if (!Buffer.isBuffer(buf)) throw new TypeError('"list" argument must be an Array of Buffers');
        buf.copy(buffer, pos);
        pos += buf.length;
    }
    return buffer;
};
function byteLength(string, encoding) {
    if (Buffer.isBuffer(string)) return string.length;
    if (typeof ArrayBuffer !== "undefined" && typeof ArrayBuffer.isView === "function" && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) return string.byteLength;
    if (typeof string !== "string") string = "" + string;
    var len = string.length;
    if (len === 0) return 0;
    // Use a for loop to avoid recursion
    var loweredCase = false;
    for(;;)switch(encoding){
        case "ascii":
        case "latin1":
        case "binary":
            return len;
        case "utf8":
        case "utf-8":
        case undefined:
            return utf8ToBytes(string).length;
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return len * 2;
        case "hex":
            return len >>> 1;
        case "base64":
            return base64ToBytes(string).length;
        default:
            if (loweredCase) return utf8ToBytes(string).length // assume utf8
            ;
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
    }
}
Buffer.byteLength = byteLength;
function slowToString(encoding, start, end) {
    var loweredCase = false;
    // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    // property of a typed array.
    // This behaves neither like String nor Uint8Array in that we set start/end
    // to their upper/lower bounds if the value passed is out of range.
    // undefined is handled specially as per ECMA-262 6th Edition,
    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
    if (start === undefined || start < 0) start = 0;
    // Return early if start > this.length. Done here to prevent potential uint32
    // coercion fail below.
    if (start > this.length) return "";
    if (end === undefined || end > this.length) end = this.length;
    if (end <= 0) return "";
    // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
    end >>>= 0;
    start >>>= 0;
    if (end <= start) return "";
    if (!encoding) encoding = "utf8";
    while(true)switch(encoding){
        case "hex":
            return hexSlice(this, start, end);
        case "utf8":
        case "utf-8":
            return utf8Slice(this, start, end);
        case "ascii":
            return asciiSlice(this, start, end);
        case "latin1":
        case "binary":
            return latin1Slice(this, start, end);
        case "base64":
            return base64Slice(this, start, end);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return utf16leSlice(this, start, end);
        default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
            encoding = (encoding + "").toLowerCase();
            loweredCase = true;
    }
}
// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true;
function swap(b, n, m) {
    var i = b[n];
    b[n] = b[m];
    b[m] = i;
}
Buffer.prototype.swap16 = function swap16() {
    var len = this.length;
    if (len % 2 !== 0) throw new RangeError("Buffer size must be a multiple of 16-bits");
    for(var i = 0; i < len; i += 2)swap(this, i, i + 1);
    return this;
};
Buffer.prototype.swap32 = function swap32() {
    var len = this.length;
    if (len % 4 !== 0) throw new RangeError("Buffer size must be a multiple of 32-bits");
    for(var i = 0; i < len; i += 4){
        swap(this, i, i + 3);
        swap(this, i + 1, i + 2);
    }
    return this;
};
Buffer.prototype.swap64 = function swap64() {
    var len = this.length;
    if (len % 8 !== 0) throw new RangeError("Buffer size must be a multiple of 64-bits");
    for(var i = 0; i < len; i += 8){
        swap(this, i, i + 7);
        swap(this, i + 1, i + 6);
        swap(this, i + 2, i + 5);
        swap(this, i + 3, i + 4);
    }
    return this;
};
Buffer.prototype.toString = function toString() {
    var length = this.length | 0;
    if (length === 0) return "";
    if (arguments.length === 0) return utf8Slice(this, 0, length);
    return slowToString.apply(this, arguments);
};
Buffer.prototype.equals = function equals(b) {
    if (!Buffer.isBuffer(b)) throw new TypeError("Argument must be a Buffer");
    if (this === b) return true;
    return Buffer.compare(this, b) === 0;
};
Buffer.prototype.inspect = function inspect() {
    var str = "";
    var max = exports.INSPECT_MAX_BYTES;
    if (this.length > 0) {
        str = this.toString("hex", 0, max).match(/.{2}/g).join(" ");
        if (this.length > max) str += " ... ";
    }
    return "<Buffer " + str + ">";
};
Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
    if (!Buffer.isBuffer(target)) throw new TypeError("Argument must be a Buffer");
    if (start === undefined) start = 0;
    if (end === undefined) end = target ? target.length : 0;
    if (thisStart === undefined) thisStart = 0;
    if (thisEnd === undefined) thisEnd = this.length;
    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) throw new RangeError("out of range index");
    if (thisStart >= thisEnd && start >= end) return 0;
    if (thisStart >= thisEnd) return -1;
    if (start >= end) return 1;
    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;
    if (this === target) return 0;
    var x = thisEnd - thisStart;
    var y = end - start;
    var len = Math.min(x, y);
    var thisCopy = this.slice(thisStart, thisEnd);
    var targetCopy = target.slice(start, end);
    for(var i = 0; i < len; ++i)if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i];
        y = targetCopy[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
    // Empty buffer means no match
    if (buffer.length === 0) return -1;
    // Normalize byteOffset
    if (typeof byteOffset === "string") {
        encoding = byteOffset;
        byteOffset = 0;
    } else if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff;
    else if (byteOffset < -2147483648) byteOffset = -2147483648;
    byteOffset = +byteOffset // Coerce to Number.
    ;
    if (isNaN(byteOffset)) // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : buffer.length - 1;
    // Normalize byteOffset: negative offsets start from the end of the buffer
    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
    if (byteOffset >= buffer.length) {
        if (dir) return -1;
        else byteOffset = buffer.length - 1;
    } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;
        else return -1;
    }
    // Normalize val
    if (typeof val === "string") val = Buffer.from(val, encoding);
    // Finally, search either indexOf (if dir is true) or lastIndexOf
    if (Buffer.isBuffer(val)) {
        // Special case: looking for empty string/buffer always fails
        if (val.length === 0) return -1;
        return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
    } else if (typeof val === "number") {
        val = val & 0xFF // Search for a byte value [0-255]
        ;
        if (Buffer.TYPED_ARRAY_SUPPORT && typeof Uint8Array.prototype.indexOf === "function") {
            if (dir) return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
            else return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
        }
        return arrayIndexOf(buffer, [
            val
        ], byteOffset, encoding, dir);
    }
    throw new TypeError("val must be string, number or Buffer");
}
function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
    var indexSize = 1;
    var arrLength = arr.length;
    var valLength = val.length;
    if (encoding !== undefined) {
        encoding = String(encoding).toLowerCase();
        if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
            if (arr.length < 2 || val.length < 2) return -1;
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
        }
    }
    function read(buf, i) {
        if (indexSize === 1) return buf[i];
        else return buf.readUInt16BE(i * indexSize);
    }
    var i;
    if (dir) {
        var foundIndex = -1;
        for(i = byteOffset; i < arrLength; i++)if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
            if (foundIndex === -1) foundIndex = i;
            if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
        } else {
            if (foundIndex !== -1) i -= i - foundIndex;
            foundIndex = -1;
        }
    } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
        for(i = byteOffset; i >= 0; i--){
            var found = true;
            for(var j = 0; j < valLength; j++)if (read(arr, i + j) !== read(val, j)) {
                found = false;
                break;
            }
            if (found) return i;
        }
    }
    return -1;
}
Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1;
};
Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};
Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};
function hexWrite(buf, string, offset, length) {
    offset = Number(offset) || 0;
    var remaining = buf.length - offset;
    if (!length) length = remaining;
    else {
        length = Number(length);
        if (length > remaining) length = remaining;
    }
    // must be an even number of digits
    var strLen = string.length;
    if (strLen % 2 !== 0) throw new TypeError("Invalid hex string");
    if (length > strLen / 2) length = strLen / 2;
    for(var i = 0; i < length; ++i){
        var parsed = parseInt(string.substr(i * 2, 2), 16);
        if (isNaN(parsed)) return i;
        buf[offset + i] = parsed;
    }
    return i;
}
function utf8Write(buf, string, offset, length) {
    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
}
function asciiWrite(buf, string, offset, length) {
    return blitBuffer(asciiToBytes(string), buf, offset, length);
}
function latin1Write(buf, string, offset, length) {
    return asciiWrite(buf, string, offset, length);
}
function base64Write(buf, string, offset, length) {
    return blitBuffer(base64ToBytes(string), buf, offset, length);
}
function ucs2Write(buf, string, offset, length) {
    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
}
Buffer.prototype.write = function write(string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
        encoding = "utf8";
        length = this.length;
        offset = 0;
    // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === "string") {
        encoding = offset;
        length = this.length;
        offset = 0;
    // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
        offset = offset | 0;
        if (isFinite(length)) {
            length = length | 0;
            if (encoding === undefined) encoding = "utf8";
        } else {
            encoding = length;
            length = undefined;
        }
    // legacy write(string, encoding, offset, length) - remove in v0.13
    } else throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");
    var remaining = this.length - offset;
    if (length === undefined || length > remaining) length = remaining;
    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) throw new RangeError("Attempt to write outside buffer bounds");
    if (!encoding) encoding = "utf8";
    var loweredCase = false;
    for(;;)switch(encoding){
        case "hex":
            return hexWrite(this, string, offset, length);
        case "utf8":
        case "utf-8":
            return utf8Write(this, string, offset, length);
        case "ascii":
            return asciiWrite(this, string, offset, length);
        case "latin1":
        case "binary":
            return latin1Write(this, string, offset, length);
        case "base64":
            // Warning: maxLength not taken into account in base64Write
            return base64Write(this, string, offset, length);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
            return ucs2Write(this, string, offset, length);
        default:
            if (loweredCase) throw new TypeError("Unknown encoding: " + encoding);
            encoding = ("" + encoding).toLowerCase();
            loweredCase = true;
    }
};
Buffer.prototype.toJSON = function toJSON() {
    return {
        type: "Buffer",
        data: Array.prototype.slice.call(this._arr || this, 0)
    };
};
function base64Slice(buf, start, end) {
    if (start === 0 && end === buf.length) return base64.fromByteArray(buf);
    else return base64.fromByteArray(buf.slice(start, end));
}
function utf8Slice(buf, start, end) {
    end = Math.min(buf.length, end);
    var res = [];
    var i = start;
    while(i < end){
        var firstByte = buf[i];
        var codePoint = null;
        var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;
        if (i + bytesPerSequence <= end) {
            var secondByte, thirdByte, fourthByte, tempCodePoint;
            switch(bytesPerSequence){
                case 1:
                    if (firstByte < 0x80) codePoint = firstByte;
                    break;
                case 2:
                    secondByte = buf[i + 1];
                    if ((secondByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;
                        if (tempCodePoint > 0x7F) codePoint = tempCodePoint;
                    }
                    break;
                case 3:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;
                        if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) codePoint = tempCodePoint;
                    }
                    break;
                case 4:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    fourthByte = buf[i + 3];
                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                        tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;
                        if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) codePoint = tempCodePoint;
                    }
            }
        }
        if (codePoint === null) {
            // we did not generate a valid codePoint so insert a
            // replacement char (U+FFFD) and advance only 1 byte
            codePoint = 0xFFFD;
            bytesPerSequence = 1;
        } else if (codePoint > 0xFFFF) {
            // encode to utf16 (surrogate pair dance)
            codePoint -= 0x10000;
            res.push(codePoint >>> 10 & 0x3FF | 0xD800);
            codePoint = 0xDC00 | codePoint & 0x3FF;
        }
        res.push(codePoint);
        i += bytesPerSequence;
    }
    return decodeCodePointsArray(res);
}
// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000;
function decodeCodePointsArray(codePoints) {
    var len = codePoints.length;
    if (len <= MAX_ARGUMENTS_LENGTH) return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
    ;
    // Decode in chunks to avoid "call stack size exceeded".
    var res = "";
    var i = 0;
    while(i < len)res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
    return res;
}
function asciiSlice(buf, start, end) {
    var ret = "";
    end = Math.min(buf.length, end);
    for(var i = start; i < end; ++i)ret += String.fromCharCode(buf[i] & 0x7F);
    return ret;
}
function latin1Slice(buf, start, end) {
    var ret = "";
    end = Math.min(buf.length, end);
    for(var i = start; i < end; ++i)ret += String.fromCharCode(buf[i]);
    return ret;
}
function hexSlice(buf, start, end) {
    var len = buf.length;
    if (!start || start < 0) start = 0;
    if (!end || end < 0 || end > len) end = len;
    var out = "";
    for(var i = start; i < end; ++i)out += toHex(buf[i]);
    return out;
}
function utf16leSlice(buf, start, end) {
    var bytes = buf.slice(start, end);
    var res = "";
    for(var i = 0; i < bytes.length; i += 2)res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    return res;
}
Buffer.prototype.slice = function slice(start, end) {
    var len = this.length;
    start = ~~start;
    end = end === undefined ? len : ~~end;
    if (start < 0) {
        start += len;
        if (start < 0) start = 0;
    } else if (start > len) start = len;
    if (end < 0) {
        end += len;
        if (end < 0) end = 0;
    } else if (end > len) end = len;
    if (end < start) end = start;
    var newBuf;
    if (Buffer.TYPED_ARRAY_SUPPORT) {
        newBuf = this.subarray(start, end);
        newBuf.__proto__ = Buffer.prototype;
    } else {
        var sliceLen = end - start;
        newBuf = new Buffer(sliceLen, undefined);
        for(var i = 0; i < sliceLen; ++i)newBuf[i] = this[i + start];
    }
    return newBuf;
};
/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */ function checkOffset(offset, ext, length) {
    if (offset % 1 !== 0 || offset < 0) throw new RangeError("offset is not uint");
    if (offset + ext > length) throw new RangeError("Trying to access beyond buffer length");
}
Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    var val = this[offset];
    var mul = 1;
    var i = 0;
    while(++i < byteLength && (mul *= 0x100))val += this[offset + i] * mul;
    return val;
};
Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    var val = this[offset + --byteLength];
    var mul = 1;
    while(byteLength > 0 && (mul *= 0x100))val += this[offset + --byteLength] * mul;
    return val;
};
Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 1, this.length);
    return this[offset];
};
Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] | this[offset + 1] << 8;
};
Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] << 8 | this[offset + 1];
};
Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);
    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;
};
Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};
Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    var val = this[offset];
    var mul = 1;
    var i = 0;
    while(++i < byteLength && (mul *= 0x100))val += this[offset + i] * mul;
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
};
Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) checkOffset(offset, byteLength, this.length);
    var i = byteLength;
    var mul = 1;
    var val = this[offset + --i];
    while(i > 0 && (mul *= 0x100))val += this[offset + --i] * mul;
    mul *= 0x80;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength);
    return val;
};
Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 1, this.length);
    if (!(this[offset] & 0x80)) return this[offset];
    return (0xff - this[offset] + 1) * -1;
};
Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset] | this[offset + 1] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
};
Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset + 1] | this[offset] << 8;
    return val & 0x8000 ? val | 0xFFFF0000 : val;
};
Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};
Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};
Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, true, 23, 4);
};
Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, false, 23, 4);
};
Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, true, 52, 8);
};
Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, false, 52, 8);
};
function checkInt(buf, value, offset, ext, max, min) {
    if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
    if (offset + ext > buf.length) throw new RangeError("Index out of range");
}
Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    var mul = 1;
    var i = 0;
    this[offset] = value & 0xFF;
    while(++i < byteLength && (mul *= 0x100))this[offset + i] = value / mul & 0xFF;
    return offset + byteLength;
};
Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    byteLength = byteLength | 0;
    if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
    }
    var i = byteLength - 1;
    var mul = 1;
    this[offset + i] = value & 0xFF;
    while(--i >= 0 && (mul *= 0x100))this[offset + i] = value / mul & 0xFF;
    return offset + byteLength;
};
Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
    if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
    this[offset] = value & 0xff;
    return offset + 1;
};
function objectWriteUInt16(buf, value, offset, littleEndian) {
    if (value < 0) value = 0xffff + value + 1;
    for(var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i)buf[offset + i] = (value & 0xff << 8 * (littleEndian ? i : 1 - i)) >>> (littleEndian ? i : 1 - i) * 8;
}
Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = value & 0xff;
        this[offset + 1] = value >>> 8;
    } else objectWriteUInt16(this, value, offset, true);
    return offset + 2;
};
Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = value >>> 8;
        this[offset + 1] = value & 0xff;
    } else objectWriteUInt16(this, value, offset, false);
    return offset + 2;
};
function objectWriteUInt32(buf, value, offset, littleEndian) {
    if (value < 0) value = 0xffffffff + value + 1;
    for(var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i)buf[offset + i] = value >>> (littleEndian ? i : 3 - i) * 8 & 0xff;
}
Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset + 3] = value >>> 24;
        this[offset + 2] = value >>> 16;
        this[offset + 1] = value >>> 8;
        this[offset] = value & 0xff;
    } else objectWriteUInt32(this, value, offset, true);
    return offset + 4;
};
Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = value >>> 24;
        this[offset + 1] = value >>> 16;
        this[offset + 2] = value >>> 8;
        this[offset + 3] = value & 0xff;
    } else objectWriteUInt32(this, value, offset, false);
    return offset + 4;
};
Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength - 1);
        checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    var i = 0;
    var mul = 1;
    var sub = 0;
    this[offset] = value & 0xFF;
    while(++i < byteLength && (mul *= 0x100)){
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
    return offset + byteLength;
};
Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength - 1);
        checkInt(this, value, offset, byteLength, limit - 1, -limit);
    }
    var i = byteLength - 1;
    var mul = 1;
    var sub = 0;
    this[offset + i] = value & 0xFF;
    while(--i >= 0 && (mul *= 0x100)){
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 0xFF;
    }
    return offset + byteLength;
};
Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -128);
    if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
    if (value < 0) value = 0xff + value + 1;
    this[offset] = value & 0xff;
    return offset + 1;
};
Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -32768);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = value & 0xff;
        this[offset + 1] = value >>> 8;
    } else objectWriteUInt16(this, value, offset, true);
    return offset + 2;
};
Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -32768);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = value >>> 8;
        this[offset + 1] = value & 0xff;
    } else objectWriteUInt16(this, value, offset, false);
    return offset + 2;
};
Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
    if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = value & 0xff;
        this[offset + 1] = value >>> 8;
        this[offset + 2] = value >>> 16;
        this[offset + 3] = value >>> 24;
    } else objectWriteUInt32(this, value, offset, true);
    return offset + 4;
};
Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset | 0;
    if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -2147483648);
    if (value < 0) value = 0xffffffff + value + 1;
    if (Buffer.TYPED_ARRAY_SUPPORT) {
        this[offset] = value >>> 24;
        this[offset + 1] = value >>> 16;
        this[offset + 2] = value >>> 8;
        this[offset + 3] = value & 0xff;
    } else objectWriteUInt32(this, value, offset, false);
    return offset + 4;
};
function checkIEEE754(buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError("Index out of range");
    if (offset < 0) throw new RangeError("Index out of range");
}
function writeFloat(buf, value, offset, littleEndian, noAssert) {
    if (!noAssert) checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -340282346638528860000000000000000000000);
    ieee754.write(buf, value, offset, littleEndian, 23, 4);
    return offset + 4;
}
Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
    return writeFloat(this, value, offset, true, noAssert);
};
Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
    return writeFloat(this, value, offset, false, noAssert);
};
function writeDouble(buf, value, offset, littleEndian, noAssert) {
    if (!noAssert) checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -179769313486231570000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000);
    ieee754.write(buf, value, offset, littleEndian, 52, 8);
    return offset + 8;
}
Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
    return writeDouble(this, value, offset, true, noAssert);
};
Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
    return writeDouble(this, value, offset, false, noAssert);
};
// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy(target, targetStart, start, end) {
    if (!start) start = 0;
    if (!end && end !== 0) end = this.length;
    if (targetStart >= target.length) targetStart = target.length;
    if (!targetStart) targetStart = 0;
    if (end > 0 && end < start) end = start;
    // Copy 0 bytes; we're done
    if (end === start) return 0;
    if (target.length === 0 || this.length === 0) return 0;
    // Fatal error conditions
    if (targetStart < 0) throw new RangeError("targetStart out of bounds");
    if (start < 0 || start >= this.length) throw new RangeError("sourceStart out of bounds");
    if (end < 0) throw new RangeError("sourceEnd out of bounds");
    // Are we oob?
    if (end > this.length) end = this.length;
    if (target.length - targetStart < end - start) end = target.length - targetStart + start;
    var len = end - start;
    var i;
    if (this === target && start < targetStart && targetStart < end) // descending copy from end
    for(i = len - 1; i >= 0; --i)target[i + targetStart] = this[i + start];
    else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) // ascending copy from start
    for(i = 0; i < len; ++i)target[i + targetStart] = this[i + start];
    else Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);
    return len;
};
// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill(val, start, end, encoding) {
    // Handle string cases:
    if (typeof val === "string") {
        if (typeof start === "string") {
            encoding = start;
            start = 0;
            end = this.length;
        } else if (typeof end === "string") {
            encoding = end;
            end = this.length;
        }
        if (val.length === 1) {
            var code = val.charCodeAt(0);
            if (code < 256) val = code;
        }
        if (encoding !== undefined && typeof encoding !== "string") throw new TypeError("encoding must be a string");
        if (typeof encoding === "string" && !Buffer.isEncoding(encoding)) throw new TypeError("Unknown encoding: " + encoding);
    } else if (typeof val === "number") val = val & 255;
    // Invalid ranges are not set to a default, so can range check early.
    if (start < 0 || this.length < start || this.length < end) throw new RangeError("Out of range index");
    if (end <= start) return this;
    start = start >>> 0;
    end = end === undefined ? this.length : end >>> 0;
    if (!val) val = 0;
    var i;
    if (typeof val === "number") for(i = start; i < end; ++i)this[i] = val;
    else {
        var bytes = Buffer.isBuffer(val) ? val : utf8ToBytes(new Buffer(val, encoding).toString());
        var len = bytes.length;
        for(i = 0; i < end - start; ++i)this[i + start] = bytes[i % len];
    }
    return this;
};
// HELPER FUNCTIONS
// ================
var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;
function base64clean(str) {
    // Node strips out invalid characters like \n and \t from the string, base64-js does not
    str = stringtrim(str).replace(INVALID_BASE64_RE, "");
    // Node converts strings with length < 2 to ''
    if (str.length < 2) return "";
    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
    while(str.length % 4 !== 0)str = str + "=";
    return str;
}
function stringtrim(str) {
    if (str.trim) return str.trim();
    return str.replace(/^\s+|\s+$/g, "");
}
function toHex(n) {
    if (n < 16) return "0" + n.toString(16);
    return n.toString(16);
}
function utf8ToBytes(string, units) {
    units = units || Infinity;
    var codePoint;
    var length = string.length;
    var leadSurrogate = null;
    var bytes = [];
    for(var i = 0; i < length; ++i){
        codePoint = string.charCodeAt(i);
        // is surrogate component
        if (codePoint > 0xD7FF && codePoint < 0xE000) {
            // last char was a lead
            if (!leadSurrogate) {
                // no lead yet
                if (codePoint > 0xDBFF) {
                    // unexpected trail
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    continue;
                } else if (i + 1 === length) {
                    // unpaired lead
                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                    continue;
                }
                // valid lead
                leadSurrogate = codePoint;
                continue;
            }
            // 2 leads in a row
            if (codePoint < 0xDC00) {
                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
                leadSurrogate = codePoint;
                continue;
            }
            // valid surrogate pair
            codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
        } else if (leadSurrogate) // valid bmp char, but last char was a lead
        {
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        }
        leadSurrogate = null;
        // encode utf8
        if (codePoint < 0x80) {
            if ((units -= 1) < 0) break;
            bytes.push(codePoint);
        } else if (codePoint < 0x800) {
            if ((units -= 2) < 0) break;
            bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x10000) {
            if ((units -= 3) < 0) break;
            bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
        } else if (codePoint < 0x110000) {
            if ((units -= 4) < 0) break;
            bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);
        } else throw new Error("Invalid code point");
    }
    return bytes;
}
function asciiToBytes(str) {
    var byteArray = [];
    for(var i = 0; i < str.length; ++i)// Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF);
    return byteArray;
}
function utf16leToBytes(str, units) {
    var c, hi, lo;
    var byteArray = [];
    for(var i = 0; i < str.length; ++i){
        if ((units -= 2) < 0) break;
        c = str.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
    }
    return byteArray;
}
function base64ToBytes(str) {
    return base64.toByteArray(base64clean(str));
}
function blitBuffer(src, dst, offset, length) {
    for(var i = 0; i < length; ++i){
        if (i + offset >= dst.length || i >= src.length) break;
        dst[i + offset] = src[i];
    }
    return i;
}
function isnan(val) {
    return val !== val // eslint-disable-line no-self-compare
    ;
}

},{"base64-js":"eIiSV","ieee754":"cO95r","isarray":"hk7XJ"}],"eIiSV":[function(require,module,exports) {
"use strict";
exports.byteLength = byteLength;
exports.toByteArray = toByteArray;
exports.fromByteArray = fromByteArray;
var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
for(var i = 0, len = code.length; i < len; ++i){
    lookup[i] = code[i];
    revLookup[code.charCodeAt(i)] = i;
}
// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup["-".charCodeAt(0)] = 62;
revLookup["_".charCodeAt(0)] = 63;
function getLens(b64) {
    var len = b64.length;
    if (len % 4 > 0) throw new Error("Invalid string. Length must be a multiple of 4");
    // Trim off extra bytes after placeholder bytes are found
    // See: https://github.com/beatgammit/base64-js/issues/42
    var validLen = b64.indexOf("=");
    if (validLen === -1) validLen = len;
    var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;
    return [
        validLen,
        placeHoldersLen
    ];
}
// base64 is 4/3 + up to two characters of the original data
function byteLength(b64) {
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function _byteLength(b64, validLen, placeHoldersLen) {
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function toByteArray(b64) {
    var tmp;
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
    var curByte = 0;
    // if there are placeholders, only get up to the last complete 4 chars
    var len = placeHoldersLen > 0 ? validLen - 4 : validLen;
    var i;
    for(i = 0; i < len; i += 4){
        tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];
        arr[curByte++] = tmp >> 16 & 0xFF;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 2) {
        tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;
        arr[curByte++] = tmp & 0xFF;
    }
    if (placeHoldersLen === 1) {
        tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 0xFF;
        arr[curByte++] = tmp & 0xFF;
    }
    return arr;
}
function tripletToBase64(num) {
    return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];
}
function encodeChunk(uint8, start, end) {
    var tmp;
    var output = [];
    for(var i = start; i < end; i += 3){
        tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);
        output.push(tripletToBase64(tmp));
    }
    return output.join("");
}
function fromByteArray(uint8) {
    var tmp;
    var len = uint8.length;
    var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
    ;
    var parts = [];
    var maxChunkLength = 16383 // must be multiple of 3
    ;
    // go through the array every three bytes, we'll deal with trailing stuff later
    for(var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength)parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));
    // pad the end with zeros, but make sure to not forget the extra bytes
    if (extraBytes === 1) {
        tmp = uint8[len - 1];
        parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + "==");
    } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + uint8[len - 1];
        parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + "=");
    }
    return parts.join("");
}

},{}],"cO95r":[function(require,module,exports) {
exports.read = function(buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? nBytes - 1 : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];
    i += d;
    e = s & (1 << -nBits) - 1;
    s >>= -nBits;
    nBits += eLen;
    for(; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);
    m = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;
    for(; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);
    if (e === 0) e = 1 - eBias;
    else if (e === eMax) return m ? NaN : (s ? -1 : 1) * Infinity;
    else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};
exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
    var i = isLE ? 0 : nBytes - 1;
    var d = isLE ? 1 : -1;
    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    value = Math.abs(value);
    if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
    } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
        }
        if (e + eBias >= 1) value += rt / c;
        else value += rt * Math.pow(2, 1 - eBias);
        if (value * c >= 2) {
            e++;
            c /= 2;
        }
        if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
        } else if (e + eBias >= 1) {
            m = (value * c - 1) * Math.pow(2, mLen);
            e = e + eBias;
        } else {
            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
        }
    }
    for(; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);
    e = e << mLen | m;
    eLen += mLen;
    for(; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);
    buffer[offset + i - d] |= s * 128;
};

},{}],"hk7XJ":[function(require,module,exports) {
var toString = {}.toString;
module.exports = Array.isArray || function(arr) {
    return toString.call(arr) == "[object Array]";
};

},{}],"7lZKK":[function(require,module,exports) {
"use strict";
// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isEmptyData = void 0;
function isEmptyData(data) {
    if (typeof data === "string") return data.length === 0;
    return data.byteLength === 0;
}
exports.isEmptyData = isEmptyData;

},{}],"6vB9f":[function(require,module,exports) {
"use strict";
// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.numToUint8 = void 0;
function numToUint8(num) {
    return new Uint8Array([
        (num & 0xff000000) >> 24,
        (num & 0x00ff0000) >> 16,
        (num & 0x0000ff00) >> 8,
        num & 0x000000ff, 
    ]);
}
exports.numToUint8 = numToUint8;

},{}],"gwA65":[function(require,module,exports) {
"use strict";
// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.uint32ArrayFrom = void 0;
// IE 11 does not support Array.from, so we do it manually
function uint32ArrayFrom(a_lookUpTable) {
    if (!Uint32Array.from) {
        var return_array = new Uint32Array(a_lookUpTable.length);
        var a_index = 0;
        while(a_index < a_lookUpTable.length){
            return_array[a_index] = a_lookUpTable[a_index];
            a_index += 1;
        }
        return return_array;
    }
    return Uint32Array.from(a_lookUpTable);
}
exports.uint32ArrayFrom = uint32ArrayFrom;

},{}],"fXmvu":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var tslib_1 = require("tslib");
(0, tslib_1.__exportStar)(require("./jsSha256"), exports);

},{"tslib":"h6r7o","./jsSha256":"3dWmU"}],"h6r7o":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
parcelHelpers.export(exports, "__spread", ()=>__spread);
parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}
function __exportStar(m, exports) {
    for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    }
    result.default = mod;
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
    privateMap.set(receiver, value);
    return value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3dWmU":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.Sha256 = void 0;
var tslib_1 = require("tslib");
var constants_1 = require("./constants");
var RawSha256_1 = require("./RawSha256");
var util_1 = require("@aws-crypto/util");
var Sha256 = /** @class */ function() {
    function Sha256(secret) {
        this.hash = new RawSha256_1.RawSha256();
        if (secret) {
            this.outer = new RawSha256_1.RawSha256();
            var inner = bufferFromSecret(secret);
            var outer = new Uint8Array(constants_1.BLOCK_SIZE);
            outer.set(inner);
            for(var i = 0; i < constants_1.BLOCK_SIZE; i++){
                inner[i] ^= 0x36;
                outer[i] ^= 0x5c;
            }
            this.hash.update(inner);
            this.outer.update(outer);
            // overwrite the copied key in memory
            for(var i = 0; i < inner.byteLength; i++)inner[i] = 0;
        }
    }
    Sha256.prototype.update = function(toHash) {
        if ((0, util_1.isEmptyData)(toHash) || this.error) return;
        try {
            this.hash.update((0, util_1.convertToBuffer)(toHash));
        } catch (e) {
            this.error = e;
        }
    };
    /* This synchronous method keeps compatibility
     * with the v2 aws-sdk.
     */ Sha256.prototype.digestSync = function() {
        if (this.error) throw this.error;
        if (this.outer) {
            if (!this.outer.finished) this.outer.update(this.hash.digest());
            return this.outer.digest();
        }
        return this.hash.digest();
    };
    /* The underlying digest method here is synchronous.
     * To keep the same interface with the other hash functions
     * the default is to expose this as an async method.
     * However, it can sometimes be useful to have a sync method.
     */ Sha256.prototype.digest = function() {
        return (0, tslib_1.__awaiter)(this, void 0, void 0, function() {
            return (0, tslib_1.__generator)(this, function(_a) {
                return [
                    2 /*return*/ ,
                    this.digestSync()
                ];
            });
        });
    };
    return Sha256;
}();
exports.Sha256 = Sha256;
function bufferFromSecret(secret) {
    var input = (0, util_1.convertToBuffer)(secret);
    if (input.byteLength > constants_1.BLOCK_SIZE) {
        var bufferHash = new RawSha256_1.RawSha256();
        bufferHash.update(input);
        input = bufferHash.digest();
    }
    var buffer = new Uint8Array(constants_1.BLOCK_SIZE);
    buffer.set(input);
    return buffer;
}

},{"tslib":"h6r7o","./constants":"hkOxZ","./RawSha256":"4LQhY","@aws-crypto/util":"aDvRG"}],"hkOxZ":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.MAX_HASHABLE_LENGTH = exports.INIT = exports.KEY = exports.DIGEST_LENGTH = exports.BLOCK_SIZE = void 0;
/**
 * @internal
 */ exports.BLOCK_SIZE = 64;
/**
 * @internal
 */ exports.DIGEST_LENGTH = 32;
/**
 * @internal
 */ exports.KEY = new Uint32Array([
    0x428a2f98,
    0x71374491,
    0xb5c0fbcf,
    0xe9b5dba5,
    0x3956c25b,
    0x59f111f1,
    0x923f82a4,
    0xab1c5ed5,
    0xd807aa98,
    0x12835b01,
    0x243185be,
    0x550c7dc3,
    0x72be5d74,
    0x80deb1fe,
    0x9bdc06a7,
    0xc19bf174,
    0xe49b69c1,
    0xefbe4786,
    0x0fc19dc6,
    0x240ca1cc,
    0x2de92c6f,
    0x4a7484aa,
    0x5cb0a9dc,
    0x76f988da,
    0x983e5152,
    0xa831c66d,
    0xb00327c8,
    0xbf597fc7,
    0xc6e00bf3,
    0xd5a79147,
    0x06ca6351,
    0x14292967,
    0x27b70a85,
    0x2e1b2138,
    0x4d2c6dfc,
    0x53380d13,
    0x650a7354,
    0x766a0abb,
    0x81c2c92e,
    0x92722c85,
    0xa2bfe8a1,
    0xa81a664b,
    0xc24b8b70,
    0xc76c51a3,
    0xd192e819,
    0xd6990624,
    0xf40e3585,
    0x106aa070,
    0x19a4c116,
    0x1e376c08,
    0x2748774c,
    0x34b0bcb5,
    0x391c0cb3,
    0x4ed8aa4a,
    0x5b9cca4f,
    0x682e6ff3,
    0x748f82ee,
    0x78a5636f,
    0x84c87814,
    0x8cc70208,
    0x90befffa,
    0xa4506ceb,
    0xbef9a3f7,
    0xc67178f2
]);
/**
 * @internal
 */ exports.INIT = [
    0x6a09e667,
    0xbb67ae85,
    0x3c6ef372,
    0xa54ff53a,
    0x510e527f,
    0x9b05688c,
    0x1f83d9ab,
    0x5be0cd19
];
/**
 * @internal
 */ exports.MAX_HASHABLE_LENGTH = Math.pow(2, 53) - 1;

},{}],"4LQhY":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.RawSha256 = void 0;
var constants_1 = require("./constants");
/**
 * @internal
 */ var RawSha256 = /** @class */ function() {
    function RawSha256() {
        this.state = Int32Array.from(constants_1.INIT);
        this.temp = new Int32Array(64);
        this.buffer = new Uint8Array(64);
        this.bufferLength = 0;
        this.bytesHashed = 0;
        /**
         * @internal
         */ this.finished = false;
    }
    RawSha256.prototype.update = function(data) {
        if (this.finished) throw new Error("Attempted to update an already finished hash.");
        var position = 0;
        var byteLength = data.byteLength;
        this.bytesHashed += byteLength;
        if (this.bytesHashed * 8 > constants_1.MAX_HASHABLE_LENGTH) throw new Error("Cannot hash more than 2^53 - 1 bits");
        while(byteLength > 0){
            this.buffer[this.bufferLength++] = data[position++];
            byteLength--;
            if (this.bufferLength === constants_1.BLOCK_SIZE) {
                this.hashBuffer();
                this.bufferLength = 0;
            }
        }
    };
    RawSha256.prototype.digest = function() {
        if (!this.finished) {
            var bitsHashed = this.bytesHashed * 8;
            var bufferView = new DataView(this.buffer.buffer, this.buffer.byteOffset, this.buffer.byteLength);
            var undecoratedLength = this.bufferLength;
            bufferView.setUint8(this.bufferLength++, 0x80);
            // Ensure the final block has enough room for the hashed length
            if (undecoratedLength % constants_1.BLOCK_SIZE >= constants_1.BLOCK_SIZE - 8) {
                for(var i = this.bufferLength; i < constants_1.BLOCK_SIZE; i++)bufferView.setUint8(i, 0);
                this.hashBuffer();
                this.bufferLength = 0;
            }
            for(var i = this.bufferLength; i < constants_1.BLOCK_SIZE - 8; i++)bufferView.setUint8(i, 0);
            bufferView.setUint32(constants_1.BLOCK_SIZE - 8, Math.floor(bitsHashed / 0x100000000), true);
            bufferView.setUint32(constants_1.BLOCK_SIZE - 4, bitsHashed);
            this.hashBuffer();
            this.finished = true;
        }
        // The value in state is little-endian rather than big-endian, so flip
        // each word into a new Uint8Array
        var out = new Uint8Array(constants_1.DIGEST_LENGTH);
        for(var i = 0; i < 8; i++){
            out[i * 4] = this.state[i] >>> 24 & 0xff;
            out[i * 4 + 1] = this.state[i] >>> 16 & 0xff;
            out[i * 4 + 2] = this.state[i] >>> 8 & 0xff;
            out[i * 4 + 3] = this.state[i] >>> 0 & 0xff;
        }
        return out;
    };
    RawSha256.prototype.hashBuffer = function() {
        var _a = this, buffer = _a.buffer, state = _a.state;
        var state0 = state[0], state1 = state[1], state2 = state[2], state3 = state[3], state4 = state[4], state5 = state[5], state6 = state[6], state7 = state[7];
        for(var i = 0; i < constants_1.BLOCK_SIZE; i++){
            if (i < 16) this.temp[i] = (buffer[i * 4] & 0xff) << 24 | (buffer[i * 4 + 1] & 0xff) << 16 | (buffer[i * 4 + 2] & 0xff) << 8 | buffer[i * 4 + 3] & 0xff;
            else {
                var u = this.temp[i - 2];
                var t1_1 = (u >>> 17 | u << 15) ^ (u >>> 19 | u << 13) ^ u >>> 10;
                u = this.temp[i - 15];
                var t2_1 = (u >>> 7 | u << 25) ^ (u >>> 18 | u << 14) ^ u >>> 3;
                this.temp[i] = (t1_1 + this.temp[i - 7] | 0) + (t2_1 + this.temp[i - 16] | 0);
            }
            var t1 = (((state4 >>> 6 | state4 << 26) ^ (state4 >>> 11 | state4 << 21) ^ (state4 >>> 25 | state4 << 7)) + (state4 & state5 ^ ~state4 & state6) | 0) + (state7 + (constants_1.KEY[i] + this.temp[i] | 0) | 0) | 0;
            var t2 = ((state0 >>> 2 | state0 << 30) ^ (state0 >>> 13 | state0 << 19) ^ (state0 >>> 22 | state0 << 10)) + (state0 & state1 ^ state0 & state2 ^ state1 & state2) | 0;
            state7 = state6;
            state6 = state5;
            state5 = state4;
            state4 = state3 + t1 | 0;
            state3 = state2;
            state2 = state1;
            state1 = state0;
            state0 = t1 + t2 | 0;
        }
        state[0] += state0;
        state[1] += state1;
        state[2] += state2;
        state[3] += state3;
        state[4] += state4;
        state[5] += state5;
        state[6] += state6;
        state[7] += state7;
    };
    return RawSha256;
}();
exports.RawSha256 = RawSha256;

},{"./constants":"hkOxZ"}],"hF3NL":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var tslib_1 = require("tslib");
tslib_1.__exportStar(require("./supportsWebCrypto"), exports);

},{"tslib":"eEys3","./supportsWebCrypto":"4T8k1"}],"eEys3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
parcelHelpers.export(exports, "__spread", ()=>__spread);
parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}
function __exportStar(m, exports) {
    for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    }
    result.default = mod;
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
    privateMap.set(receiver, value);
    return value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4T8k1":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.supportsZeroByteGCM = exports.supportsSubtleCrypto = exports.supportsSecureRandom = exports.supportsWebCrypto = void 0;
var tslib_1 = require("tslib");
var subtleCryptoMethods = [
    "decrypt",
    "digest",
    "encrypt",
    "exportKey",
    "generateKey",
    "importKey",
    "sign",
    "verify"
];
function supportsWebCrypto(window) {
    if (supportsSecureRandom(window) && typeof window.crypto.subtle === "object") {
        var subtle = window.crypto.subtle;
        return supportsSubtleCrypto(subtle);
    }
    return false;
}
exports.supportsWebCrypto = supportsWebCrypto;
function supportsSecureRandom(window) {
    if (typeof window === "object" && typeof window.crypto === "object") {
        var getRandomValues = window.crypto.getRandomValues;
        return typeof getRandomValues === "function";
    }
    return false;
}
exports.supportsSecureRandom = supportsSecureRandom;
function supportsSubtleCrypto(subtle) {
    return subtle && subtleCryptoMethods.every(function(methodName) {
        return typeof subtle[methodName] === "function";
    });
}
exports.supportsSubtleCrypto = supportsSubtleCrypto;
function supportsZeroByteGCM(subtle) {
    return tslib_1.__awaiter(this, void 0, void 0, function() {
        var key, zeroByteAuthTag, _a;
        return tslib_1.__generator(this, function(_b) {
            switch(_b.label){
                case 0:
                    if (!supportsSubtleCrypto(subtle)) return [
                        2 /*return*/ ,
                        false
                    ];
                    _b.label = 1;
                case 1:
                    _b.trys.push([
                        1,
                        4,
                        ,
                        5
                    ]);
                    return [
                        4 /*yield*/ ,
                        subtle.generateKey({
                            name: "AES-GCM",
                            length: 128
                        }, false, [
                            "encrypt"
                        ])
                    ];
                case 2:
                    key = _b.sent();
                    return [
                        4 /*yield*/ ,
                        subtle.encrypt({
                            name: "AES-GCM",
                            iv: new Uint8Array(Array(12)),
                            additionalData: new Uint8Array(Array(16)),
                            tagLength: 128
                        }, key, new Uint8Array(0))
                    ];
                case 3:
                    zeroByteAuthTag = _b.sent();
                    return [
                        2 /*return*/ ,
                        zeroByteAuthTag.byteLength === 16
                    ];
                case 4:
                    _a = _b.sent();
                    return [
                        2 /*return*/ ,
                        false
                    ];
                case 5:
                    return [
                        2 /*return*/ 
                    ];
            }
        });
    });
}
exports.supportsZeroByteGCM = supportsZeroByteGCM;

},{"tslib":"eEys3"}],"l9y1G":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
var tslib_1 = require("tslib");
tslib_1.__exportStar(require("./CryptoOperation"), exports);
tslib_1.__exportStar(require("./Key"), exports);
tslib_1.__exportStar(require("./KeyOperation"), exports);
tslib_1.__exportStar(require("./MsSubtleCrypto"), exports);
tslib_1.__exportStar(require("./MsWindow"), exports);

},{"tslib":"8UVaX","./CryptoOperation":"7MrWv","./Key":"grtd6","./KeyOperation":"lUZoT","./MsSubtleCrypto":"690sd","./MsWindow":"jSZab"}],"8UVaX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "__extends", ()=>__extends);
parcelHelpers.export(exports, "__assign", ()=>__assign);
parcelHelpers.export(exports, "__rest", ()=>__rest);
parcelHelpers.export(exports, "__decorate", ()=>__decorate);
parcelHelpers.export(exports, "__param", ()=>__param);
parcelHelpers.export(exports, "__metadata", ()=>__metadata);
parcelHelpers.export(exports, "__awaiter", ()=>__awaiter);
parcelHelpers.export(exports, "__generator", ()=>__generator);
parcelHelpers.export(exports, "__createBinding", ()=>__createBinding);
parcelHelpers.export(exports, "__exportStar", ()=>__exportStar);
parcelHelpers.export(exports, "__values", ()=>__values);
parcelHelpers.export(exports, "__read", ()=>__read);
parcelHelpers.export(exports, "__spread", ()=>__spread);
parcelHelpers.export(exports, "__spreadArrays", ()=>__spreadArrays);
parcelHelpers.export(exports, "__await", ()=>__await);
parcelHelpers.export(exports, "__asyncGenerator", ()=>__asyncGenerator);
parcelHelpers.export(exports, "__asyncDelegator", ()=>__asyncDelegator);
parcelHelpers.export(exports, "__asyncValues", ()=>__asyncValues);
parcelHelpers.export(exports, "__makeTemplateObject", ()=>__makeTemplateObject);
parcelHelpers.export(exports, "__importStar", ()=>__importStar);
parcelHelpers.export(exports, "__importDefault", ()=>__importDefault);
parcelHelpers.export(exports, "__classPrivateFieldGet", ()=>__classPrivateFieldGet);
parcelHelpers.export(exports, "__classPrivateFieldSet", ()=>__classPrivateFieldSet);
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */ /* global Reflect, Promise */ var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf || ({
        __proto__: []
    }) instanceof Array && function(d, b) {
        d.__proto__ = b;
    } || function(d, b) {
        for(var p in b)if (b.hasOwnProperty(p)) d[p] = b[p];
    };
    return extendStatics(d, b);
};
function __extends(d, b) {
    extendStatics(d, b);
    function __() {
        this.constructor = d;
    }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for(var s, i = 1, n = arguments.length; i < n; i++){
            s = arguments[i];
            for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
function __rest(s, e) {
    var t = {};
    for(var p in s)if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function") {
        for(var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++)if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
    }
    return t;
}
function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
    return function(target, key) {
        decorator(target, key, paramIndex);
    };
}
function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
            resolve(value);
        });
    }
    return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator["throw"](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}
function __generator(thisArg, body) {
    var _ = {
        label: 0,
        sent: function() {
            if (t[0] & 1) throw t[1];
            return t[1];
        },
        trys: [],
        ops: []
    }, f, y, t, g;
    return g = {
        next: verb(0),
        "throw": verb(1),
        "return": verb(2)
    }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
    }), g;
    function verb(n) {
        return function(v) {
            return step([
                n,
                v
            ]);
        };
    }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while(_)try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [
                op[0] & 2,
                t.value
            ];
            switch(op[0]){
                case 0:
                case 1:
                    t = op;
                    break;
                case 4:
                    _.label++;
                    return {
                        value: op[1],
                        done: false
                    };
                case 5:
                    _.label++;
                    y = op[1];
                    op = [
                        0
                    ];
                    continue;
                case 7:
                    op = _.ops.pop();
                    _.trys.pop();
                    continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                        _ = 0;
                        continue;
                    }
                    if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                        _.label = op[1];
                        break;
                    }
                    if (op[0] === 6 && _.label < t[1]) {
                        _.label = t[1];
                        t = op;
                        break;
                    }
                    if (t && _.label < t[2]) {
                        _.label = t[2];
                        _.ops.push(op);
                        break;
                    }
                    if (t[2]) _.ops.pop();
                    _.trys.pop();
                    continue;
            }
            op = body.call(thisArg, _);
        } catch (e) {
            op = [
                6,
                e
            ];
            y = 0;
        } finally{
            f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return {
            value: op[0] ? op[1] : void 0,
            done: true
        };
    }
}
function __createBinding(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}
function __exportStar(m, exports) {
    for(var p in m)if (p !== "default" && !exports.hasOwnProperty(p)) exports[p] = m[p];
}
function __values(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function() {
            if (o && i >= o.length) o = void 0;
            return {
                value: o && o[i++],
                done: !o
            };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while((n === void 0 || n-- > 0) && !(r = i.next()).done)ar.push(r.value);
    } catch (error) {
        e = {
            error: error
        };
    } finally{
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        } finally{
            if (e) throw e.error;
        }
    }
    return ar;
}
function __spread() {
    for(var ar = [], i = 0; i < arguments.length; i++)ar = ar.concat(__read(arguments[i]));
    return ar;
}
function __spreadArrays() {
    for(var s = 0, i = 0, il = arguments.length; i < il; i++)s += arguments[i].length;
    for(var r = Array(s), k = 0, i = 0; i < il; i++)for(var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)r[k] = a[j];
    return r;
}
function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i;
    function verb(n) {
        if (g[n]) i[n] = function(v) {
            return new Promise(function(a, b) {
                q.push([
                    n,
                    v,
                    a,
                    b
                ]) > 1 || resume(n, v);
            });
        };
    }
    function resume(n, v) {
        try {
            step(g[n](v));
        } catch (e) {
            settle(q[0][3], e);
        }
    }
    function step(r) {
        r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
    }
    function fulfill(value) {
        resume("next", value);
    }
    function reject(value) {
        resume("throw", value);
    }
    function settle(f, v) {
        if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);
    }
}
function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function(e) {
        throw e;
    }), verb("return"), i[Symbol.iterator] = function() {
        return this;
    }, i;
    function verb(n, f) {
        i[n] = o[n] ? function(v) {
            return (p = !p) ? {
                value: __await(o[n](v)),
                done: n === "return"
            } : f ? f(v) : v;
        } : f;
    }
}
function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
        return this;
    }, i);
    function verb(n) {
        i[n] = o[n] && function(v) {
            return new Promise(function(resolve, reject) {
                v = o[n](v), settle(resolve, reject, v.done, v.value);
            });
        };
    }
    function settle(resolve, reject, d, v) {
        Promise.resolve(v).then(function(v) {
            resolve({
                value: v,
                done: d
            });
        }, reject);
    }
}
function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) Object.defineProperty(cooked, "raw", {
        value: raw
    });
    else cooked.raw = raw;
    return cooked;
}
function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) {
        for(var k in mod)if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    }
    result.default = mod;
    return result;
}
function __importDefault(mod) {
    return mod && mod.__esModule ? mod : {
        default: mod
    };
}
function __classPrivateFieldGet(receiver, privateMap) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to get private field on non-instance");
    return privateMap.get(receiver);
}
function __classPrivateFieldSet(receiver, privateMap, value) {
    if (!privateMap.has(receiver)) throw new TypeError("attempted to set private field on non-instance");
    privateMap.set(receiver, value);
    return value;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7MrWv":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});

},{}],"grtd6":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});

},{}],"lUZoT":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});

},{}],"690sd":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});

},{}],"jSZab":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.isMsWindow = void 0;
var msSubtleCryptoMethods = [
    "decrypt",
    "digest",
    "encrypt",
    "exportKey",
    "generateKey",
    "importKey",
    "sign",
    "verify"
];
function quacksLikeAnMsWindow(window) {
    return "MSInputMethodContext" in window && "msCrypto" in window;
}
/**
 * Determines if the provided window is (or is like) the window object one would
 * expect to encounter in Internet Explorer 11.
 */ function isMsWindow(window) {
    if (quacksLikeAnMsWindow(window) && window.msCrypto.subtle !== undefined) {
        var _a = window.msCrypto, getRandomValues = _a.getRandomValues, subtle_1 = _a.subtle;
        return msSubtleCryptoMethods.map(function(methodName) {
            return subtle_1[methodName];
        }).concat(getRandomValues).every(function(method) {
            return typeof method === "function";
        });
    }
    return false;
}
exports.isMsWindow = isMsWindow;

},{}],"etWgp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _fetchHttpHandler = require("./fetch-http-handler");
parcelHelpers.exportAll(_fetchHttpHandler, exports);
var _streamCollector = require("./stream-collector");
parcelHelpers.exportAll(_streamCollector, exports);

},{"./fetch-http-handler":"3VXwU","./stream-collector":"gak9T","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3VXwU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "FetchHttpHandler", ()=>FetchHttpHandler);
var _protocolHttp = require("@aws-sdk/protocol-http");
var _querystringBuilder = require("@aws-sdk/querystring-builder");
var _requestTimeout = require("./request-timeout");
class FetchHttpHandler {
    constructor(options){
        if (typeof options === "function") this.configProvider = options().then((opts)=>opts || {});
        else {
            this.config = options ?? {};
            this.configProvider = Promise.resolve(this.config);
        }
    }
    destroy() {}
    async handle(request, { abortSignal  } = {}) {
        if (!this.config) this.config = await this.configProvider;
        const requestTimeoutInMs = this.config.requestTimeout;
        if (abortSignal?.aborted) {
            const abortError = new Error("Request aborted");
            abortError.name = "AbortError";
            return Promise.reject(abortError);
        }
        let path = request.path;
        if (request.query) {
            const queryString = (0, _querystringBuilder.buildQueryString)(request.query);
            if (queryString) path += `?${queryString}`;
        }
        const { port , method  } = request;
        const url = `${request.protocol}//${request.hostname}${port ? `:${port}` : ""}${path}`;
        const body = method === "GET" || method === "HEAD" ? undefined : request.body;
        const requestOptions = {
            body,
            headers: new Headers(request.headers),
            method: method
        };
        if (typeof AbortController !== "undefined") requestOptions["signal"] = abortSignal;
        const fetchRequest = new Request(url, requestOptions);
        const raceOfPromises = [
            fetch(fetchRequest).then((response)=>{
                const fetchHeaders = response.headers;
                const transformedHeaders = {};
                for (const pair of fetchHeaders.entries())transformedHeaders[pair[0]] = pair[1];
                const hasReadableStream = response.body !== undefined;
                if (!hasReadableStream) return response.blob().then((body)=>({
                        response: new (0, _protocolHttp.HttpResponse)({
                            headers: transformedHeaders,
                            statusCode: response.status,
                            body
                        })
                    }));
                return {
                    response: new (0, _protocolHttp.HttpResponse)({
                        headers: transformedHeaders,
                        statusCode: response.status,
                        body: response.body
                    })
                };
            }),
            (0, _requestTimeout.requestTimeout)(requestTimeoutInMs), 
        ];
        if (abortSignal) raceOfPromises.push(new Promise((resolve, reject)=>{
            abortSignal.onabort = ()=>{
                const abortError = new Error("Request aborted");
                abortError.name = "AbortError";
                reject(abortError);
            };
        }));
        return Promise.race(raceOfPromises);
    }
}

},{"@aws-sdk/protocol-http":"lkWtc","@aws-sdk/querystring-builder":"7hUzg","./request-timeout":"cQtCo","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7hUzg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "buildQueryString", ()=>buildQueryString);
var _utilUriEscape = require("@aws-sdk/util-uri-escape");
function buildQueryString(query) {
    const parts = [];
    for (let key of Object.keys(query).sort()){
        const value = query[key];
        key = (0, _utilUriEscape.escapeUri)(key);
        if (Array.isArray(value)) for(let i = 0, iLen = value.length; i < iLen; i++)parts.push(`${key}=${(0, _utilUriEscape.escapeUri)(value[i])}`);
        else {
            let qsEntry = key;
            if (value || typeof value === "string") qsEntry += `=${(0, _utilUriEscape.escapeUri)(value)}`;
            parts.push(qsEntry);
        }
    }
    return parts.join("&");
}

},{"@aws-sdk/util-uri-escape":"ihZwy","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cQtCo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "requestTimeout", ()=>requestTimeout);
function requestTimeout(timeoutInMs = 0) {
    return new Promise((resolve, reject)=>{
        if (timeoutInMs) setTimeout(()=>{
            const timeoutError = new Error(`Request did not complete within ${timeoutInMs} ms`);
            timeoutError.name = "TimeoutError";
            reject(timeoutError);
        }, timeoutInMs);
    });
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gak9T":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "streamCollector", ()=>streamCollector);
var _utilBase64Browser = require("@aws-sdk/util-base64-browser");
const streamCollector = (stream)=>{
    if (typeof Blob === "function" && stream instanceof Blob) return collectBlob(stream);
    return collectStream(stream);
};
async function collectBlob(blob) {
    const base64 = await readToBase64(blob);
    const arrayBuffer = (0, _utilBase64Browser.fromBase64)(base64);
    return new Uint8Array(arrayBuffer);
}
async function collectStream(stream) {
    let res = new Uint8Array(0);
    const reader = stream.getReader();
    let isDone = false;
    while(!isDone){
        const { done , value  } = await reader.read();
        if (value) {
            const prior = res;
            res = new Uint8Array(prior.length + value.length);
            res.set(prior);
            res.set(value, prior.length);
        }
        isDone = done;
    }
    return res;
}
function readToBase64(blob) {
    return new Promise((resolve, reject)=>{
        const reader = new FileReader();
        reader.onloadend = ()=>{
            if (reader.readyState !== 2) return reject(new Error("Reader aborted too early"));
            const result = reader.result ?? "";
            const commaIndex = result.indexOf(",");
            const dataOffset = commaIndex > -1 ? commaIndex + 1 : result.length;
            resolve(result.substring(dataOffset));
        };
        reader.onabort = ()=>reject(new Error("Read aborted"));
        reader.onerror = ()=>reject(reader.error);
        reader.readAsDataURL(blob);
    });
}

},{"@aws-sdk/util-base64-browser":"9aHTk","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9aHTk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fromBase64", ()=>fromBase64);
parcelHelpers.export(exports, "toBase64", ()=>toBase64);
const alphabetByEncoding = {};
const alphabetByValue = new Array(64);
for(let i = 0, start = "A".charCodeAt(0), limit = "Z".charCodeAt(0); i + start <= limit; i++){
    const char = String.fromCharCode(i + start);
    alphabetByEncoding[char] = i;
    alphabetByValue[i] = char;
}
for(let i1 = 0, start1 = "a".charCodeAt(0), limit1 = "z".charCodeAt(0); i1 + start1 <= limit1; i1++){
    const char1 = String.fromCharCode(i1 + start1);
    const index = i1 + 26;
    alphabetByEncoding[char1] = index;
    alphabetByValue[index] = char1;
}
for(let i2 = 0; i2 < 10; i2++){
    alphabetByEncoding[i2.toString(10)] = i2 + 52;
    const char2 = i2.toString(10);
    const index1 = i2 + 52;
    alphabetByEncoding[char2] = index1;
    alphabetByValue[index1] = char2;
}
alphabetByEncoding["+"] = 62;
alphabetByValue[62] = "+";
alphabetByEncoding["/"] = 63;
alphabetByValue[63] = "/";
const bitsPerLetter = 6;
const bitsPerByte = 8;
const maxLetterValue = 63;
function fromBase64(input) {
    let totalByteLength = input.length / 4 * 3;
    if (input.slice(-2) === "==") totalByteLength -= 2;
    else if (input.slice(-1) === "=") totalByteLength--;
    const out = new ArrayBuffer(totalByteLength);
    const dataView = new DataView(out);
    for(let i = 0; i < input.length; i += 4){
        let bits = 0;
        let bitLength = 0;
        for(let j = i, limit = i + 3; j <= limit; j++)if (input[j] !== "=") {
            if (!(input[j] in alphabetByEncoding)) throw new TypeError(`Invalid character ${input[j]} in base64 string.`);
            bits |= alphabetByEncoding[input[j]] << (limit - j) * bitsPerLetter;
            bitLength += bitsPerLetter;
        } else bits >>= bitsPerLetter;
        const chunkOffset = i / 4 * 3;
        bits >>= bitLength % bitsPerByte;
        const byteLength = Math.floor(bitLength / bitsPerByte);
        for(let k = 0; k < byteLength; k++){
            const offset = (byteLength - k - 1) * bitsPerByte;
            dataView.setUint8(chunkOffset + k, (bits & 255 << offset) >> offset);
        }
    }
    return new Uint8Array(out);
}
function toBase64(input) {
    let str = "";
    for(let i = 0; i < input.length; i += 3){
        let bits = 0;
        let bitLength = 0;
        for(let j = i, limit = Math.min(i + 3, input.length); j < limit; j++){
            bits |= input[j] << (limit - j - 1) * bitsPerByte;
            bitLength += bitsPerByte;
        }
        const bitClusterCount = Math.ceil(bitLength / bitsPerLetter);
        bits <<= bitClusterCount * bitsPerLetter - bitLength;
        for(let k = 1; k <= bitClusterCount; k++){
            const offset = (bitClusterCount - k) * bitsPerLetter;
            str += alphabetByValue[(bits & maxLetterValue << offset) >> offset];
        }
        str += "==".slice(0, 4 - bitClusterCount);
    }
    return str;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1kvFV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _invalidFunction = require("./invalidFunction");
parcelHelpers.exportAll(_invalidFunction, exports);
var _invalidProvider = require("./invalidProvider");
parcelHelpers.exportAll(_invalidProvider, exports);

},{"./invalidFunction":"9hwU4","./invalidProvider":"6lZAH","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9hwU4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "invalidFunction", ()=>invalidFunction);
const invalidFunction = (message)=>()=>{
        throw new Error(message);
    };

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6lZAH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "invalidProvider", ()=>invalidProvider);
const invalidProvider = (message)=>()=>Promise.reject(message);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6ddt5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _calculateBodyLength = require("./calculateBodyLength");
parcelHelpers.exportAll(_calculateBodyLength, exports);

},{"./calculateBodyLength":"j6Ih6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"j6Ih6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "calculateBodyLength", ()=>calculateBodyLength);
const calculateBodyLength = (body)=>{
    if (typeof body === "string") {
        let len = body.length;
        for(let i = len - 1; i >= 0; i--){
            const code = body.charCodeAt(i);
            if (code > 0x7f && code <= 0x7ff) len++;
            else if (code > 0x7ff && code <= 0xffff) len += 2;
            if (code >= 0xdc00 && code <= 0xdfff) i--;
        }
        return len;
    } else if (typeof body.byteLength === "number") return body.byteLength;
    else if (typeof body.size === "number") return body.size;
    throw new Error(`Body Length computation failed for ${body}`);
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"duqKe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "defaultUserAgent", ()=>defaultUserAgent);
var _bowser = require("bowser");
var _bowserDefault = parcelHelpers.interopDefault(_bowser);
const defaultUserAgent = ({ serviceId , clientVersion  })=>async ()=>{
        const parsedUA = typeof window !== "undefined" && window?.navigator?.userAgent ? (0, _bowserDefault.default).parse(window.navigator.userAgent) : undefined;
        const sections = [
            [
                "aws-sdk-js",
                clientVersion
            ],
            [
                `os/${parsedUA?.os?.name || "other"}`,
                parsedUA?.os?.version
            ],
            [
                "lang/js"
            ],
            [
                "md/browser",
                `${parsedUA?.browser?.name ?? "unknown"}_${parsedUA?.browser?.version ?? "unknown"}`
            ], 
        ];
        if (serviceId) sections.push([
            `api/${serviceId}`,
            clientVersion
        ]);
        return sections;
    };

},{"bowser":"5jYCf","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5jYCf":[function(require,module,exports) {
!function(e, t) {
    module.exports = t();
}(this, function() {
    return function(e) {
        var t = {};
        function r(n) {
            if (t[n]) return t[n].exports;
            var i = t[n] = {
                i: n,
                l: !1,
                exports: {}
            };
            return e[n].call(i.exports, i, i.exports, r), i.l = !0, i.exports;
        }
        return r.m = e, r.c = t, r.d = function(e, t, n) {
            r.o(e, t) || Object.defineProperty(e, t, {
                enumerable: !0,
                get: n
            });
        }, r.r = function(e) {
            "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {
                value: "Module"
            }), Object.defineProperty(e, "__esModule", {
                value: !0
            });
        }, r.t = function(e, t) {
            if (1 & t && (e = r(e)), 8 & t) return e;
            if (4 & t && "object" == typeof e && e && e.__esModule) return e;
            var n = Object.create(null);
            if (r.r(n), Object.defineProperty(n, "default", {
                enumerable: !0,
                value: e
            }), 2 & t && "string" != typeof e) for(var i in e)r.d(n, i, (function(t) {
                return e[t];
            }).bind(null, i));
            return n;
        }, r.n = function(e) {
            var t = e && e.__esModule ? function() {
                return e.default;
            } : function() {
                return e;
            };
            return r.d(t, "a", t), t;
        }, r.o = function(e, t) {
            return Object.prototype.hasOwnProperty.call(e, t);
        }, r.p = "", r(r.s = 90);
    }({
        17: function(e, t, r) {
            "use strict";
            t.__esModule = !0, t.default = void 0;
            var n = r(18), i = function() {
                function e() {}
                return e.getFirstMatch = function(e, t) {
                    var r = t.match(e);
                    return r && r.length > 0 && r[1] || "";
                }, e.getSecondMatch = function(e, t) {
                    var r = t.match(e);
                    return r && r.length > 1 && r[2] || "";
                }, e.matchAndReturnConst = function(e, t, r) {
                    if (e.test(t)) return r;
                }, e.getWindowsVersionName = function(e) {
                    switch(e){
                        case "NT":
                            return "NT";
                        case "XP":
                            return "XP";
                        case "NT 5.0":
                            return "2000";
                        case "NT 5.1":
                            return "XP";
                        case "NT 5.2":
                            return "2003";
                        case "NT 6.0":
                            return "Vista";
                        case "NT 6.1":
                            return "7";
                        case "NT 6.2":
                            return "8";
                        case "NT 6.3":
                            return "8.1";
                        case "NT 10.0":
                            return "10";
                        default:
                            return;
                    }
                }, e.getMacOSVersionName = function(e) {
                    var t = e.split(".").splice(0, 2).map(function(e) {
                        return parseInt(e, 10) || 0;
                    });
                    if (t.push(0), 10 === t[0]) switch(t[1]){
                        case 5:
                            return "Leopard";
                        case 6:
                            return "Snow Leopard";
                        case 7:
                            return "Lion";
                        case 8:
                            return "Mountain Lion";
                        case 9:
                            return "Mavericks";
                        case 10:
                            return "Yosemite";
                        case 11:
                            return "El Capitan";
                        case 12:
                            return "Sierra";
                        case 13:
                            return "High Sierra";
                        case 14:
                            return "Mojave";
                        case 15:
                            return "Catalina";
                        default:
                            return;
                    }
                }, e.getAndroidVersionName = function(e) {
                    var t = e.split(".").splice(0, 2).map(function(e) {
                        return parseInt(e, 10) || 0;
                    });
                    if (t.push(0), !(1 === t[0] && t[1] < 5)) return 1 === t[0] && t[1] < 6 ? "Cupcake" : 1 === t[0] && t[1] >= 6 ? "Donut" : 2 === t[0] && t[1] < 2 ? "Eclair" : 2 === t[0] && 2 === t[1] ? "Froyo" : 2 === t[0] && t[1] > 2 ? "Gingerbread" : 3 === t[0] ? "Honeycomb" : 4 === t[0] && t[1] < 1 ? "Ice Cream Sandwich" : 4 === t[0] && t[1] < 4 ? "Jelly Bean" : 4 === t[0] && t[1] >= 4 ? "KitKat" : 5 === t[0] ? "Lollipop" : 6 === t[0] ? "Marshmallow" : 7 === t[0] ? "Nougat" : 8 === t[0] ? "Oreo" : 9 === t[0] ? "Pie" : void 0;
                }, e.getVersionPrecision = function(e) {
                    return e.split(".").length;
                }, e.compareVersions = function(t, r, n) {
                    void 0 === n && (n = !1);
                    var i = e.getVersionPrecision(t), s = e.getVersionPrecision(r), a = Math.max(i, s), o = 0, u = e.map([
                        t,
                        r
                    ], function(t) {
                        var r = a - e.getVersionPrecision(t), n = t + new Array(r + 1).join(".0");
                        return e.map(n.split("."), function(e) {
                            return new Array(20 - e.length).join("0") + e;
                        }).reverse();
                    });
                    for(n && (o = a - Math.min(i, s)), a -= 1; a >= o;){
                        if (u[0][a] > u[1][a]) return 1;
                        if (u[0][a] === u[1][a]) {
                            if (a === o) return 0;
                            a -= 1;
                        } else if (u[0][a] < u[1][a]) return -1;
                    }
                }, e.map = function(e, t) {
                    var r, n = [];
                    if (Array.prototype.map) return Array.prototype.map.call(e, t);
                    for(r = 0; r < e.length; r += 1)n.push(t(e[r]));
                    return n;
                }, e.find = function(e, t) {
                    var r, n;
                    if (Array.prototype.find) return Array.prototype.find.call(e, t);
                    for(r = 0, n = e.length; r < n; r += 1){
                        var i = e[r];
                        if (t(i, r)) return i;
                    }
                }, e.assign = function(e) {
                    for(var t, r, n = e, i = arguments.length, s = new Array(i > 1 ? i - 1 : 0), a = 1; a < i; a++)s[a - 1] = arguments[a];
                    if (Object.assign) return Object.assign.apply(Object, [
                        e
                    ].concat(s));
                    var o = function() {
                        var e = s[t];
                        "object" == typeof e && null !== e && Object.keys(e).forEach(function(t) {
                            n[t] = e[t];
                        });
                    };
                    for(t = 0, r = s.length; t < r; t += 1)o();
                    return e;
                }, e.getBrowserAlias = function(e) {
                    return n.BROWSER_ALIASES_MAP[e];
                }, e.getBrowserTypeByAlias = function(e) {
                    return n.BROWSER_MAP[e] || "";
                }, e;
            }();
            t.default = i, e.exports = t.default;
        },
        18: function(e, t, r) {
            "use strict";
            t.__esModule = !0, t.ENGINE_MAP = t.OS_MAP = t.PLATFORMS_MAP = t.BROWSER_MAP = t.BROWSER_ALIASES_MAP = void 0;
            t.BROWSER_ALIASES_MAP = {
                "Amazon Silk": "amazon_silk",
                "Android Browser": "android",
                Bada: "bada",
                BlackBerry: "blackberry",
                Chrome: "chrome",
                Chromium: "chromium",
                Electron: "electron",
                Epiphany: "epiphany",
                Firefox: "firefox",
                Focus: "focus",
                Generic: "generic",
                "Google Search": "google_search",
                Googlebot: "googlebot",
                "Internet Explorer": "ie",
                "K-Meleon": "k_meleon",
                Maxthon: "maxthon",
                "Microsoft Edge": "edge",
                "MZ Browser": "mz",
                "NAVER Whale Browser": "naver",
                Opera: "opera",
                "Opera Coast": "opera_coast",
                PhantomJS: "phantomjs",
                Puffin: "puffin",
                QupZilla: "qupzilla",
                QQ: "qq",
                QQLite: "qqlite",
                Safari: "safari",
                Sailfish: "sailfish",
                "Samsung Internet for Android": "samsung_internet",
                SeaMonkey: "seamonkey",
                Sleipnir: "sleipnir",
                Swing: "swing",
                Tizen: "tizen",
                "UC Browser": "uc",
                Vivaldi: "vivaldi",
                "WebOS Browser": "webos",
                WeChat: "wechat",
                "Yandex Browser": "yandex",
                Roku: "roku"
            };
            t.BROWSER_MAP = {
                amazon_silk: "Amazon Silk",
                android: "Android Browser",
                bada: "Bada",
                blackberry: "BlackBerry",
                chrome: "Chrome",
                chromium: "Chromium",
                electron: "Electron",
                epiphany: "Epiphany",
                firefox: "Firefox",
                focus: "Focus",
                generic: "Generic",
                googlebot: "Googlebot",
                google_search: "Google Search",
                ie: "Internet Explorer",
                k_meleon: "K-Meleon",
                maxthon: "Maxthon",
                edge: "Microsoft Edge",
                mz: "MZ Browser",
                naver: "NAVER Whale Browser",
                opera: "Opera",
                opera_coast: "Opera Coast",
                phantomjs: "PhantomJS",
                puffin: "Puffin",
                qupzilla: "QupZilla",
                qq: "QQ Browser",
                qqlite: "QQ Browser Lite",
                safari: "Safari",
                sailfish: "Sailfish",
                samsung_internet: "Samsung Internet for Android",
                seamonkey: "SeaMonkey",
                sleipnir: "Sleipnir",
                swing: "Swing",
                tizen: "Tizen",
                uc: "UC Browser",
                vivaldi: "Vivaldi",
                webos: "WebOS Browser",
                wechat: "WeChat",
                yandex: "Yandex Browser"
            };
            t.PLATFORMS_MAP = {
                tablet: "tablet",
                mobile: "mobile",
                desktop: "desktop",
                tv: "tv"
            };
            t.OS_MAP = {
                WindowsPhone: "Windows Phone",
                Windows: "Windows",
                MacOS: "macOS",
                iOS: "iOS",
                Android: "Android",
                WebOS: "WebOS",
                BlackBerry: "BlackBerry",
                Bada: "Bada",
                Tizen: "Tizen",
                Linux: "Linux",
                ChromeOS: "Chrome OS",
                PlayStation4: "PlayStation 4",
                Roku: "Roku"
            };
            t.ENGINE_MAP = {
                EdgeHTML: "EdgeHTML",
                Blink: "Blink",
                Trident: "Trident",
                Presto: "Presto",
                Gecko: "Gecko",
                WebKit: "WebKit"
            };
        },
        90: function(e, t, r) {
            "use strict";
            t.__esModule = !0, t.default = void 0;
            var n, i = (n = r(91)) && n.__esModule ? n : {
                default: n
            }, s = r(18);
            function a(e, t) {
                for(var r = 0; r < t.length; r++){
                    var n = t[r];
                    n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(e, n.key, n);
                }
            }
            var o = function() {
                function e() {}
                var t, r, n;
                return e.getParser = function(e, t) {
                    if (void 0 === t && (t = !1), "string" != typeof e) throw new Error("UserAgent should be a string");
                    return new i.default(e, t);
                }, e.parse = function(e) {
                    return new i.default(e).getResult();
                }, t = e, n = [
                    {
                        key: "BROWSER_MAP",
                        get: function() {
                            return s.BROWSER_MAP;
                        }
                    },
                    {
                        key: "ENGINE_MAP",
                        get: function() {
                            return s.ENGINE_MAP;
                        }
                    },
                    {
                        key: "OS_MAP",
                        get: function() {
                            return s.OS_MAP;
                        }
                    },
                    {
                        key: "PLATFORMS_MAP",
                        get: function() {
                            return s.PLATFORMS_MAP;
                        }
                    }
                ], r = null, n && a(t, n), e;
            }();
            t.default = o, e.exports = t.default;
        },
        91: function(e, t, r) {
            "use strict";
            t.__esModule = !0, t.default = void 0;
            var n = u(r(92)), i = u(r(93)), s = u(r(94)), a = u(r(95)), o = u(r(17));
            function u(e) {
                return e && e.__esModule ? e : {
                    default: e
                };
            }
            var d = function() {
                function e(e, t) {
                    if (void 0 === t && (t = !1), null == e || "" === e) throw new Error("UserAgent parameter can't be empty");
                    this._ua = e, this.parsedResult = {}, !0 !== t && this.parse();
                }
                var t = e.prototype;
                return t.getUA = function() {
                    return this._ua;
                }, t.test = function(e) {
                    return e.test(this._ua);
                }, t.parseBrowser = function() {
                    var e = this;
                    this.parsedResult.browser = {};
                    var t = o.default.find(n.default, function(t) {
                        if ("function" == typeof t.test) return t.test(e);
                        if (t.test instanceof Array) return t.test.some(function(t) {
                            return e.test(t);
                        });
                        throw new Error("Browser's test function is not valid");
                    });
                    return t && (this.parsedResult.browser = t.describe(this.getUA())), this.parsedResult.browser;
                }, t.getBrowser = function() {
                    return this.parsedResult.browser ? this.parsedResult.browser : this.parseBrowser();
                }, t.getBrowserName = function(e) {
                    return e ? String(this.getBrowser().name).toLowerCase() || "" : this.getBrowser().name || "";
                }, t.getBrowserVersion = function() {
                    return this.getBrowser().version;
                }, t.getOS = function() {
                    return this.parsedResult.os ? this.parsedResult.os : this.parseOS();
                }, t.parseOS = function() {
                    var e = this;
                    this.parsedResult.os = {};
                    var t = o.default.find(i.default, function(t) {
                        if ("function" == typeof t.test) return t.test(e);
                        if (t.test instanceof Array) return t.test.some(function(t) {
                            return e.test(t);
                        });
                        throw new Error("Browser's test function is not valid");
                    });
                    return t && (this.parsedResult.os = t.describe(this.getUA())), this.parsedResult.os;
                }, t.getOSName = function(e) {
                    var t = this.getOS().name;
                    return e ? String(t).toLowerCase() || "" : t || "";
                }, t.getOSVersion = function() {
                    return this.getOS().version;
                }, t.getPlatform = function() {
                    return this.parsedResult.platform ? this.parsedResult.platform : this.parsePlatform();
                }, t.getPlatformType = function(e) {
                    void 0 === e && (e = !1);
                    var t = this.getPlatform().type;
                    return e ? String(t).toLowerCase() || "" : t || "";
                }, t.parsePlatform = function() {
                    var e = this;
                    this.parsedResult.platform = {};
                    var t = o.default.find(s.default, function(t) {
                        if ("function" == typeof t.test) return t.test(e);
                        if (t.test instanceof Array) return t.test.some(function(t) {
                            return e.test(t);
                        });
                        throw new Error("Browser's test function is not valid");
                    });
                    return t && (this.parsedResult.platform = t.describe(this.getUA())), this.parsedResult.platform;
                }, t.getEngine = function() {
                    return this.parsedResult.engine ? this.parsedResult.engine : this.parseEngine();
                }, t.getEngineName = function(e) {
                    return e ? String(this.getEngine().name).toLowerCase() || "" : this.getEngine().name || "";
                }, t.parseEngine = function() {
                    var e = this;
                    this.parsedResult.engine = {};
                    var t = o.default.find(a.default, function(t) {
                        if ("function" == typeof t.test) return t.test(e);
                        if (t.test instanceof Array) return t.test.some(function(t) {
                            return e.test(t);
                        });
                        throw new Error("Browser's test function is not valid");
                    });
                    return t && (this.parsedResult.engine = t.describe(this.getUA())), this.parsedResult.engine;
                }, t.parse = function() {
                    return this.parseBrowser(), this.parseOS(), this.parsePlatform(), this.parseEngine(), this;
                }, t.getResult = function() {
                    return o.default.assign({}, this.parsedResult);
                }, t.satisfies = function(e) {
                    var t = this, r = {}, n = 0, i = {}, s = 0;
                    if (Object.keys(e).forEach(function(t) {
                        var a = e[t];
                        "string" == typeof a ? (i[t] = a, s += 1) : "object" == typeof a && (r[t] = a, n += 1);
                    }), n > 0) {
                        var a = Object.keys(r), u = o.default.find(a, function(e) {
                            return t.isOS(e);
                        });
                        if (u) {
                            var d = this.satisfies(r[u]);
                            if (void 0 !== d) return d;
                        }
                        var c = o.default.find(a, function(e) {
                            return t.isPlatform(e);
                        });
                        if (c) {
                            var f = this.satisfies(r[c]);
                            if (void 0 !== f) return f;
                        }
                    }
                    if (s > 0) {
                        var l = Object.keys(i), h = o.default.find(l, function(e) {
                            return t.isBrowser(e, !0);
                        });
                        if (void 0 !== h) return this.compareVersion(i[h]);
                    }
                }, t.isBrowser = function(e, t) {
                    void 0 === t && (t = !1);
                    var r = this.getBrowserName().toLowerCase(), n = e.toLowerCase(), i = o.default.getBrowserTypeByAlias(n);
                    return t && i && (n = i.toLowerCase()), n === r;
                }, t.compareVersion = function(e) {
                    var t = [
                        0
                    ], r = e, n = !1, i = this.getBrowserVersion();
                    if ("string" == typeof i) return ">" === e[0] || "<" === e[0] ? (r = e.substr(1), "=" === e[1] ? (n = !0, r = e.substr(2)) : t = [], ">" === e[0] ? t.push(1) : t.push(-1)) : "=" === e[0] ? r = e.substr(1) : "~" === e[0] && (n = !0, r = e.substr(1)), t.indexOf(o.default.compareVersions(i, r, n)) > -1;
                }, t.isOS = function(e) {
                    return this.getOSName(!0) === String(e).toLowerCase();
                }, t.isPlatform = function(e) {
                    return this.getPlatformType(!0) === String(e).toLowerCase();
                }, t.isEngine = function(e) {
                    return this.getEngineName(!0) === String(e).toLowerCase();
                }, t.is = function(e, t) {
                    return void 0 === t && (t = !1), this.isBrowser(e, t) || this.isOS(e) || this.isPlatform(e);
                }, t.some = function(e) {
                    var t = this;
                    return void 0 === e && (e = []), e.some(function(e) {
                        return t.is(e);
                    });
                }, e;
            }();
            t.default = d, e.exports = t.default;
        },
        92: function(e, t, r) {
            "use strict";
            t.__esModule = !0, t.default = void 0;
            var n, i = (n = r(17)) && n.__esModule ? n : {
                default: n
            };
            var s = /version\/(\d+(\.?_?\d+)+)/i, a = [
                {
                    test: [
                        /googlebot/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Googlebot"
                        }, r = i.default.getFirstMatch(/googlebot\/(\d+(\.\d+))/i, e) || i.default.getFirstMatch(s, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /opera/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Opera"
                        }, r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/(?:opera)[\s/](\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /opr\/|opios/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Opera"
                        }, r = i.default.getFirstMatch(/(?:opr|opios)[\s/](\S+)/i, e) || i.default.getFirstMatch(s, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /SamsungBrowser/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Samsung Internet for Android"
                        }, r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/(?:SamsungBrowser)[\s/](\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /Whale/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "NAVER Whale Browser"
                        }, r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/(?:whale)[\s/](\d+(?:\.\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /MZBrowser/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "MZ Browser"
                        }, r = i.default.getFirstMatch(/(?:MZBrowser)[\s/](\d+(?:\.\d+)+)/i, e) || i.default.getFirstMatch(s, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /focus/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Focus"
                        }, r = i.default.getFirstMatch(/(?:focus)[\s/](\d+(?:\.\d+)+)/i, e) || i.default.getFirstMatch(s, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /swing/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Swing"
                        }, r = i.default.getFirstMatch(/(?:swing)[\s/](\d+(?:\.\d+)+)/i, e) || i.default.getFirstMatch(s, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /coast/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Opera Coast"
                        }, r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/(?:coast)[\s/](\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /opt\/\d+(?:.?_?\d+)+/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Opera Touch"
                        }, r = i.default.getFirstMatch(/(?:opt)[\s/](\d+(\.?_?\d+)+)/i, e) || i.default.getFirstMatch(s, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /yabrowser/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Yandex Browser"
                        }, r = i.default.getFirstMatch(/(?:yabrowser)[\s/](\d+(\.?_?\d+)+)/i, e) || i.default.getFirstMatch(s, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /ucbrowser/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "UC Browser"
                        }, r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/(?:ucbrowser)[\s/](\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /Maxthon|mxios/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Maxthon"
                        }, r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/(?:Maxthon|mxios)[\s/](\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /epiphany/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Epiphany"
                        }, r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/(?:epiphany)[\s/](\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /puffin/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Puffin"
                        }, r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/(?:puffin)[\s/](\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /sleipnir/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Sleipnir"
                        }, r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/(?:sleipnir)[\s/](\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /k-meleon/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "K-Meleon"
                        }, r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/(?:k-meleon)[\s/](\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /micromessenger/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "WeChat"
                        }, r = i.default.getFirstMatch(/(?:micromessenger)[\s/](\d+(\.?_?\d+)+)/i, e) || i.default.getFirstMatch(s, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /qqbrowser/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: /qqbrowserlite/i.test(e) ? "QQ Browser Lite" : "QQ Browser"
                        }, r = i.default.getFirstMatch(/(?:qqbrowserlite|qqbrowser)[/](\d+(\.?_?\d+)+)/i, e) || i.default.getFirstMatch(s, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /msie|trident/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Internet Explorer"
                        }, r = i.default.getFirstMatch(/(?:msie |rv:)(\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /\sedg\//i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Microsoft Edge"
                        }, r = i.default.getFirstMatch(/\sedg\/(\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /edg([ea]|ios)/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Microsoft Edge"
                        }, r = i.default.getSecondMatch(/edg([ea]|ios)\/(\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /vivaldi/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Vivaldi"
                        }, r = i.default.getFirstMatch(/vivaldi\/(\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /seamonkey/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "SeaMonkey"
                        }, r = i.default.getFirstMatch(/seamonkey\/(\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /sailfish/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Sailfish"
                        }, r = i.default.getFirstMatch(/sailfish\s?browser\/(\d+(\.\d+)?)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /silk/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Amazon Silk"
                        }, r = i.default.getFirstMatch(/silk\/(\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /phantom/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "PhantomJS"
                        }, r = i.default.getFirstMatch(/phantomjs\/(\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /slimerjs/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "SlimerJS"
                        }, r = i.default.getFirstMatch(/slimerjs\/(\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /blackberry|\bbb\d+/i,
                        /rim\stablet/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "BlackBerry"
                        }, r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/blackberry[\d]+\/(\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /(web|hpw)[o0]s/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "WebOS Browser"
                        }, r = i.default.getFirstMatch(s, e) || i.default.getFirstMatch(/w(?:eb)?[o0]sbrowser\/(\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /bada/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Bada"
                        }, r = i.default.getFirstMatch(/dolfin\/(\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /tizen/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Tizen"
                        }, r = i.default.getFirstMatch(/(?:tizen\s?)?browser\/(\d+(\.?_?\d+)+)/i, e) || i.default.getFirstMatch(s, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /qupzilla/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "QupZilla"
                        }, r = i.default.getFirstMatch(/(?:qupzilla)[\s/](\d+(\.?_?\d+)+)/i, e) || i.default.getFirstMatch(s, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /firefox|iceweasel|fxios/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Firefox"
                        }, r = i.default.getFirstMatch(/(?:firefox|iceweasel|fxios)[\s/](\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /electron/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Electron"
                        }, r = i.default.getFirstMatch(/(?:electron)\/(\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /MiuiBrowser/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Miui"
                        }, r = i.default.getFirstMatch(/(?:MiuiBrowser)[\s/](\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /chromium/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Chromium"
                        }, r = i.default.getFirstMatch(/(?:chromium)[\s/](\d+(\.?_?\d+)+)/i, e) || i.default.getFirstMatch(s, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /chrome|crios|crmo/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Chrome"
                        }, r = i.default.getFirstMatch(/(?:chrome|crios|crmo)\/(\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /GSA/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Google Search"
                        }, r = i.default.getFirstMatch(/(?:GSA)\/(\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: function(e) {
                        var t = !e.test(/like android/i), r = e.test(/android/i);
                        return t && r;
                    },
                    describe: function(e) {
                        var t = {
                            name: "Android Browser"
                        }, r = i.default.getFirstMatch(s, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /playstation 4/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "PlayStation 4"
                        }, r = i.default.getFirstMatch(s, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /safari|applewebkit/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: "Safari"
                        }, r = i.default.getFirstMatch(s, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /.*/i
                    ],
                    describe: function(e) {
                        var t = -1 !== e.search("\\(") ? /^(.*)\/(.*)[ \t]\((.*)/ : /^(.*)\/(.*) /;
                        return {
                            name: i.default.getFirstMatch(t, e),
                            version: i.default.getSecondMatch(t, e)
                        };
                    }
                }
            ];
            t.default = a, e.exports = t.default;
        },
        93: function(e, t, r) {
            "use strict";
            t.__esModule = !0, t.default = void 0;
            var n, i = (n = r(17)) && n.__esModule ? n : {
                default: n
            }, s = r(18);
            var a = [
                {
                    test: [
                        /Roku\/DVP/
                    ],
                    describe: function(e) {
                        var t = i.default.getFirstMatch(/Roku\/DVP-(\d+\.\d+)/i, e);
                        return {
                            name: s.OS_MAP.Roku,
                            version: t
                        };
                    }
                },
                {
                    test: [
                        /windows phone/i
                    ],
                    describe: function(e) {
                        var t = i.default.getFirstMatch(/windows phone (?:os)?\s?(\d+(\.\d+)*)/i, e);
                        return {
                            name: s.OS_MAP.WindowsPhone,
                            version: t
                        };
                    }
                },
                {
                    test: [
                        /windows /i
                    ],
                    describe: function(e) {
                        var t = i.default.getFirstMatch(/Windows ((NT|XP)( \d\d?.\d)?)/i, e), r = i.default.getWindowsVersionName(t);
                        return {
                            name: s.OS_MAP.Windows,
                            version: t,
                            versionName: r
                        };
                    }
                },
                {
                    test: [
                        /Macintosh(.*?) FxiOS(.*?)\//
                    ],
                    describe: function(e) {
                        var t = {
                            name: s.OS_MAP.iOS
                        }, r = i.default.getSecondMatch(/(Version\/)(\d[\d.]+)/, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /macintosh/i
                    ],
                    describe: function(e) {
                        var t = i.default.getFirstMatch(/mac os x (\d+(\.?_?\d+)+)/i, e).replace(/[_\s]/g, "."), r = i.default.getMacOSVersionName(t), n = {
                            name: s.OS_MAP.MacOS,
                            version: t
                        };
                        return r && (n.versionName = r), n;
                    }
                },
                {
                    test: [
                        /(ipod|iphone|ipad)/i
                    ],
                    describe: function(e) {
                        var t = i.default.getFirstMatch(/os (\d+([_\s]\d+)*) like mac os x/i, e).replace(/[_\s]/g, ".");
                        return {
                            name: s.OS_MAP.iOS,
                            version: t
                        };
                    }
                },
                {
                    test: function(e) {
                        var t = !e.test(/like android/i), r = e.test(/android/i);
                        return t && r;
                    },
                    describe: function(e) {
                        var t = i.default.getFirstMatch(/android[\s/-](\d+(\.\d+)*)/i, e), r = i.default.getAndroidVersionName(t), n = {
                            name: s.OS_MAP.Android,
                            version: t
                        };
                        return r && (n.versionName = r), n;
                    }
                },
                {
                    test: [
                        /(web|hpw)[o0]s/i
                    ],
                    describe: function(e) {
                        var t = i.default.getFirstMatch(/(?:web|hpw)[o0]s\/(\d+(\.\d+)*)/i, e), r = {
                            name: s.OS_MAP.WebOS
                        };
                        return t && t.length && (r.version = t), r;
                    }
                },
                {
                    test: [
                        /blackberry|\bbb\d+/i,
                        /rim\stablet/i
                    ],
                    describe: function(e) {
                        var t = i.default.getFirstMatch(/rim\stablet\sos\s(\d+(\.\d+)*)/i, e) || i.default.getFirstMatch(/blackberry\d+\/(\d+([_\s]\d+)*)/i, e) || i.default.getFirstMatch(/\bbb(\d+)/i, e);
                        return {
                            name: s.OS_MAP.BlackBerry,
                            version: t
                        };
                    }
                },
                {
                    test: [
                        /bada/i
                    ],
                    describe: function(e) {
                        var t = i.default.getFirstMatch(/bada\/(\d+(\.\d+)*)/i, e);
                        return {
                            name: s.OS_MAP.Bada,
                            version: t
                        };
                    }
                },
                {
                    test: [
                        /tizen/i
                    ],
                    describe: function(e) {
                        var t = i.default.getFirstMatch(/tizen[/\s](\d+(\.\d+)*)/i, e);
                        return {
                            name: s.OS_MAP.Tizen,
                            version: t
                        };
                    }
                },
                {
                    test: [
                        /linux/i
                    ],
                    describe: function() {
                        return {
                            name: s.OS_MAP.Linux
                        };
                    }
                },
                {
                    test: [
                        /CrOS/
                    ],
                    describe: function() {
                        return {
                            name: s.OS_MAP.ChromeOS
                        };
                    }
                },
                {
                    test: [
                        /PlayStation 4/
                    ],
                    describe: function(e) {
                        var t = i.default.getFirstMatch(/PlayStation 4[/\s](\d+(\.\d+)*)/i, e);
                        return {
                            name: s.OS_MAP.PlayStation4,
                            version: t
                        };
                    }
                }
            ];
            t.default = a, e.exports = t.default;
        },
        94: function(e, t, r) {
            "use strict";
            t.__esModule = !0, t.default = void 0;
            var n, i = (n = r(17)) && n.__esModule ? n : {
                default: n
            }, s = r(18);
            var a = [
                {
                    test: [
                        /googlebot/i
                    ],
                    describe: function() {
                        return {
                            type: "bot",
                            vendor: "Google"
                        };
                    }
                },
                {
                    test: [
                        /huawei/i
                    ],
                    describe: function(e) {
                        var t = i.default.getFirstMatch(/(can-l01)/i, e) && "Nova", r = {
                            type: s.PLATFORMS_MAP.mobile,
                            vendor: "Huawei"
                        };
                        return t && (r.model = t), r;
                    }
                },
                {
                    test: [
                        /nexus\s*(?:7|8|9|10).*/i
                    ],
                    describe: function() {
                        return {
                            type: s.PLATFORMS_MAP.tablet,
                            vendor: "Nexus"
                        };
                    }
                },
                {
                    test: [
                        /ipad/i
                    ],
                    describe: function() {
                        return {
                            type: s.PLATFORMS_MAP.tablet,
                            vendor: "Apple",
                            model: "iPad"
                        };
                    }
                },
                {
                    test: [
                        /Macintosh(.*?) FxiOS(.*?)\//
                    ],
                    describe: function() {
                        return {
                            type: s.PLATFORMS_MAP.tablet,
                            vendor: "Apple",
                            model: "iPad"
                        };
                    }
                },
                {
                    test: [
                        /kftt build/i
                    ],
                    describe: function() {
                        return {
                            type: s.PLATFORMS_MAP.tablet,
                            vendor: "Amazon",
                            model: "Kindle Fire HD 7"
                        };
                    }
                },
                {
                    test: [
                        /silk/i
                    ],
                    describe: function() {
                        return {
                            type: s.PLATFORMS_MAP.tablet,
                            vendor: "Amazon"
                        };
                    }
                },
                {
                    test: [
                        /tablet(?! pc)/i
                    ],
                    describe: function() {
                        return {
                            type: s.PLATFORMS_MAP.tablet
                        };
                    }
                },
                {
                    test: function(e) {
                        var t = e.test(/ipod|iphone/i), r = e.test(/like (ipod|iphone)/i);
                        return t && !r;
                    },
                    describe: function(e) {
                        var t = i.default.getFirstMatch(/(ipod|iphone)/i, e);
                        return {
                            type: s.PLATFORMS_MAP.mobile,
                            vendor: "Apple",
                            model: t
                        };
                    }
                },
                {
                    test: [
                        /nexus\s*[0-6].*/i,
                        /galaxy nexus/i
                    ],
                    describe: function() {
                        return {
                            type: s.PLATFORMS_MAP.mobile,
                            vendor: "Nexus"
                        };
                    }
                },
                {
                    test: [
                        /[^-]mobi/i
                    ],
                    describe: function() {
                        return {
                            type: s.PLATFORMS_MAP.mobile
                        };
                    }
                },
                {
                    test: function(e) {
                        return "blackberry" === e.getBrowserName(!0);
                    },
                    describe: function() {
                        return {
                            type: s.PLATFORMS_MAP.mobile,
                            vendor: "BlackBerry"
                        };
                    }
                },
                {
                    test: function(e) {
                        return "bada" === e.getBrowserName(!0);
                    },
                    describe: function() {
                        return {
                            type: s.PLATFORMS_MAP.mobile
                        };
                    }
                },
                {
                    test: function(e) {
                        return "windows phone" === e.getBrowserName();
                    },
                    describe: function() {
                        return {
                            type: s.PLATFORMS_MAP.mobile,
                            vendor: "Microsoft"
                        };
                    }
                },
                {
                    test: function(e) {
                        var t = Number(String(e.getOSVersion()).split(".")[0]);
                        return "android" === e.getOSName(!0) && t >= 3;
                    },
                    describe: function() {
                        return {
                            type: s.PLATFORMS_MAP.tablet
                        };
                    }
                },
                {
                    test: function(e) {
                        return "android" === e.getOSName(!0);
                    },
                    describe: function() {
                        return {
                            type: s.PLATFORMS_MAP.mobile
                        };
                    }
                },
                {
                    test: function(e) {
                        return "macos" === e.getOSName(!0);
                    },
                    describe: function() {
                        return {
                            type: s.PLATFORMS_MAP.desktop,
                            vendor: "Apple"
                        };
                    }
                },
                {
                    test: function(e) {
                        return "windows" === e.getOSName(!0);
                    },
                    describe: function() {
                        return {
                            type: s.PLATFORMS_MAP.desktop
                        };
                    }
                },
                {
                    test: function(e) {
                        return "linux" === e.getOSName(!0);
                    },
                    describe: function() {
                        return {
                            type: s.PLATFORMS_MAP.desktop
                        };
                    }
                },
                {
                    test: function(e) {
                        return "playstation 4" === e.getOSName(!0);
                    },
                    describe: function() {
                        return {
                            type: s.PLATFORMS_MAP.tv
                        };
                    }
                },
                {
                    test: function(e) {
                        return "roku" === e.getOSName(!0);
                    },
                    describe: function() {
                        return {
                            type: s.PLATFORMS_MAP.tv
                        };
                    }
                }
            ];
            t.default = a, e.exports = t.default;
        },
        95: function(e, t, r) {
            "use strict";
            t.__esModule = !0, t.default = void 0;
            var n, i = (n = r(17)) && n.__esModule ? n : {
                default: n
            }, s = r(18);
            var a = [
                {
                    test: function(e) {
                        return "microsoft edge" === e.getBrowserName(!0);
                    },
                    describe: function(e) {
                        if (/\sedg\//i.test(e)) return {
                            name: s.ENGINE_MAP.Blink
                        };
                        var t = i.default.getFirstMatch(/edge\/(\d+(\.?_?\d+)+)/i, e);
                        return {
                            name: s.ENGINE_MAP.EdgeHTML,
                            version: t
                        };
                    }
                },
                {
                    test: [
                        /trident/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: s.ENGINE_MAP.Trident
                        }, r = i.default.getFirstMatch(/trident\/(\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: function(e) {
                        return e.test(/presto/i);
                    },
                    describe: function(e) {
                        var t = {
                            name: s.ENGINE_MAP.Presto
                        }, r = i.default.getFirstMatch(/presto\/(\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: function(e) {
                        var t = e.test(/gecko/i), r = e.test(/like gecko/i);
                        return t && !r;
                    },
                    describe: function(e) {
                        var t = {
                            name: s.ENGINE_MAP.Gecko
                        }, r = i.default.getFirstMatch(/gecko\/(\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                },
                {
                    test: [
                        /(apple)?webkit\/537\.36/i
                    ],
                    describe: function() {
                        return {
                            name: s.ENGINE_MAP.Blink
                        };
                    }
                },
                {
                    test: [
                        /(apple)?webkit/i
                    ],
                    describe: function(e) {
                        var t = {
                            name: s.ENGINE_MAP.WebKit
                        }, r = i.default.getFirstMatch(/webkit\/(\d+(\.?_?\d+)+)/i, e);
                        return r && (t.version = r), t;
                    }
                }
            ];
            t.default = a, e.exports = t.default;
        }
    });
});

},{}],"e35dg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getRuntimeConfig", ()=>getRuntimeConfig);
var _urlParser = require("@aws-sdk/url-parser");
var _endpointResolver = require("./endpoint/endpointResolver");
const getRuntimeConfig = (config)=>({
        apiVersion: "2014-06-30",
        disableHostPrefix: config?.disableHostPrefix ?? false,
        endpointProvider: config?.endpointProvider ?? (0, _endpointResolver.defaultEndpointResolver),
        logger: config?.logger ?? {},
        serviceId: config?.serviceId ?? "Cognito Identity",
        urlParser: config?.urlParser ?? (0, _urlParser.parseUrl)
    });

},{"@aws-sdk/url-parser":"7tZsl","./endpoint/endpointResolver":"45ODd","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"45ODd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "defaultEndpointResolver", ()=>defaultEndpointResolver);
var _utilEndpoints = require("@aws-sdk/util-endpoints");
var _ruleset = require("./ruleset");
const defaultEndpointResolver = (endpointParams, context = {})=>{
    return (0, _utilEndpoints.resolveEndpoint)((0, _ruleset.ruleSet), {
        endpointParams: endpointParams,
        logger: context.logger
    });
};

},{"@aws-sdk/util-endpoints":"hUX6q","./ruleset":"5VbZ1","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hUX6q":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _partition = require("./lib/aws/partition");
parcelHelpers.exportAll(_partition, exports);
var _resolveEndpoint = require("./resolveEndpoint");
parcelHelpers.exportAll(_resolveEndpoint, exports);
var _types = require("./types");
parcelHelpers.exportAll(_types, exports);

},{"./lib/aws/partition":"joAYb","./resolveEndpoint":"4j6dy","./types":"2EtEg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"joAYb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "partition", ()=>partition);
var _partitionsJson = require("./partitions.json");
var _partitionsJsonDefault = parcelHelpers.interopDefault(_partitionsJson);
const { partitions  } = (0, _partitionsJsonDefault.default);
const DEFAULT_PARTITION = partitions.find((partition)=>partition.id === "aws");
const partition = (value)=>{
    for (const partition of partitions){
        const { regions , outputs  } = partition;
        for (const [region, regionData] of Object.entries(regions)){
            if (region === value) return {
                ...outputs,
                ...regionData
            };
        }
    }
    for (const partition1 of partitions){
        const { regionRegex , outputs: outputs1  } = partition1;
        if (new RegExp(regionRegex).test(value)) return {
            ...outputs1
        };
    }
    if (!DEFAULT_PARTITION) throw new Error("Provided region was not found in the partition array or regex, and default partition with id 'aws' doesn't exist.");
    return {
        ...DEFAULT_PARTITION.outputs
    };
};

},{"./partitions.json":"jjUFy","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jjUFy":[function(require,module,exports) {
module.exports = JSON.parse('{"version":"1.1","partitions":[{"id":"aws","regionRegex":"^(us|eu|ap|sa|ca|me|af)-\\\\w+-\\\\d+$","regions":{"af-south-1":{},"af-east-1":{},"ap-northeast-1":{},"ap-northeast-2":{},"ap-northeast-3":{},"ap-south-1":{},"ap-southeast-1":{},"ap-southeast-2":{},"ap-southeast-3":{},"ca-central-1":{},"eu-central-1":{},"eu-north-1":{},"eu-south-1":{},"eu-west-1":{},"eu-west-2":{},"eu-west-3":{},"me-south-1":{},"sa-east-1":{},"us-east-1":{},"us-east-2":{},"us-west-1":{},"us-west-2":{},"aws-global":{}},"outputs":{"name":"aws","dnsSuffix":"amazonaws.com","dualStackDnsSuffix":"api.aws","supportsFIPS":true,"supportsDualStack":true}},{"id":"aws-us-gov","regionRegex":"^us\\\\-gov\\\\-\\\\w+\\\\-\\\\d+$","regions":{"us-gov-west-1":{},"us-gov-east-1":{},"aws-us-gov-global":{}},"outputs":{"name":"aws-us-gov","dnsSuffix":"amazonaws.com","dualStackDnsSuffix":"api.aws","supportsFIPS":true,"supportsDualStack":true}},{"id":"aws-cn","regionRegex":"^cn\\\\-\\\\w+\\\\-\\\\d+$","regions":{"cn-north-1":{},"cn-northwest-1":{},"aws-cn-global":{}},"outputs":{"name":"aws-cn","dnsSuffix":"amazonaws.com.cn","dualStackDnsSuffix":"api.amazonwebservices.com.cn","supportsFIPS":true,"supportsDualStack":true}},{"id":"aws-iso","regionRegex":"^us\\\\-iso\\\\-\\\\w+\\\\-\\\\d+$","outputs":{"name":"aws-iso","dnsSuffix":"c2s.ic.gov","supportsFIPS":true,"supportsDualStack":false,"dualStackDnsSuffix":"c2s.ic.gov"},"regions":{"aws-iso-global":{}}},{"id":"aws-iso-b","regionRegex":"^us\\\\-isob\\\\-\\\\w+\\\\-\\\\d+$","outputs":{"name":"aws-iso-b","dnsSuffix":"sc2s.sgov.gov","supportsFIPS":true,"supportsDualStack":false,"dualStackDnsSuffix":"sc2s.sgov.gov"},"regions":{"aws-iso-b-global":{}}}]}');

},{}],"4j6dy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "resolveEndpoint", ()=>resolveEndpoint);
var _debug = require("./debug");
var _types = require("./types");
var _utils = require("./utils");
const resolveEndpoint = (ruleSetObject, options)=>{
    const { endpointParams , logger  } = options;
    const { parameters , rules  } = ruleSetObject;
    options.logger?.debug?.((0, _debug.debugId), `Initial EndpointParams: ${(0, _debug.toDebugString)(endpointParams)}`);
    const paramsWithDefault = Object.entries(parameters).filter(([, v])=>v.default != null).map(([k, v])=>[
            k,
            v.default
        ]);
    if (paramsWithDefault.length > 0) for (const [paramKey, paramDefaultValue] of paramsWithDefault)endpointParams[paramKey] = endpointParams[paramKey] ?? paramDefaultValue;
    const requiredParams = Object.entries(parameters).filter(([, v])=>v.required).map(([k])=>k);
    for (const requiredParam of requiredParams){
        if (endpointParams[requiredParam] == null) throw new (0, _types.EndpointError)(`Missing required parameter: '${requiredParam}'`);
    }
    const endpoint = (0, _utils.evaluateRules)(rules, {
        endpointParams,
        logger,
        referenceRecord: {}
    });
    if (options.endpointParams?.Endpoint) try {
        const givenEndpoint = new URL(options.endpointParams.Endpoint);
        const { protocol , port  } = givenEndpoint;
        endpoint.url.protocol = protocol;
        endpoint.url.port = port;
    } catch (e) {}
    options.logger?.debug?.((0, _debug.debugId), `Resolved endpoint: ${(0, _debug.toDebugString)(endpoint)}`);
    return endpoint;
};

},{"./debug":"gypCz","./types":"2EtEg","./utils":"6fl7s","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gypCz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _debugId = require("./debugId");
parcelHelpers.exportAll(_debugId, exports);
var _toDebugString = require("./toDebugString");
parcelHelpers.exportAll(_toDebugString, exports);

},{"./debugId":"eByQ1","./toDebugString":"6QhdU","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eByQ1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "debugId", ()=>debugId);
const debugId = "endpoints";

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6QhdU":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "toDebugString", ()=>toDebugString);
function toDebugString(input) {
    if (typeof input !== "object" || input == null) return input;
    if ("ref" in input) return `$${toDebugString(input.ref)}`;
    if ("fn" in input) return `${input.fn}(${(input.argv || []).map(toDebugString).join(", ")})`;
    return JSON.stringify(input, null, 2);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2EtEg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _endpointError = require("./EndpointError");
parcelHelpers.exportAll(_endpointError, exports);
var _endpointRuleObject = require("./EndpointRuleObject");
parcelHelpers.exportAll(_endpointRuleObject, exports);
var _errorRuleObject = require("./ErrorRuleObject");
parcelHelpers.exportAll(_errorRuleObject, exports);
var _ruleSetObject = require("./RuleSetObject");
parcelHelpers.exportAll(_ruleSetObject, exports);
var _treeRuleObject = require("./TreeRuleObject");
parcelHelpers.exportAll(_treeRuleObject, exports);
var _shared = require("./shared");
parcelHelpers.exportAll(_shared, exports);

},{"./EndpointError":"jZ1Fw","./EndpointRuleObject":"92Auw","./ErrorRuleObject":"cdIzb","./RuleSetObject":"fLB6X","./TreeRuleObject":"8IDTR","./shared":"1ebXp","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jZ1Fw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "EndpointError", ()=>EndpointError);
class EndpointError extends Error {
    constructor(message){
        super(message);
        this.name = "EndpointError";
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"92Auw":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cdIzb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fLB6X":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8IDTR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1ebXp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6fl7s":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _evaluateRules = require("./evaluateRules");
parcelHelpers.exportAll(_evaluateRules, exports);

},{"./evaluateRules":"bXRh8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bXRh8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "evaluateRules", ()=>evaluateRules);
var _types = require("../types");
var _evaluateEndpointRule = require("./evaluateEndpointRule");
var _evaluateErrorRule = require("./evaluateErrorRule");
var _evaluateTreeRule = require("./evaluateTreeRule");
const evaluateRules = (rules, options)=>{
    for (const rule of rules){
        if (rule.type === "endpoint") {
            const endpointOrUndefined = (0, _evaluateEndpointRule.evaluateEndpointRule)(rule, options);
            if (endpointOrUndefined) return endpointOrUndefined;
        } else if (rule.type === "error") (0, _evaluateErrorRule.evaluateErrorRule)(rule, options);
        else if (rule.type === "tree") {
            const endpointOrUndefined1 = (0, _evaluateTreeRule.evaluateTreeRule)(rule, options);
            if (endpointOrUndefined1) return endpointOrUndefined1;
        } else throw new (0, _types.EndpointError)(`Unknown endpoint rule: ${rule}`);
    }
    throw new (0, _types.EndpointError)(`Rules evaluation failed`);
};

},{"../types":"2EtEg","./evaluateEndpointRule":"8juGL","./evaluateErrorRule":"fetFp","./evaluateTreeRule":"dSBwZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8juGL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "evaluateEndpointRule", ()=>evaluateEndpointRule);
var _debug = require("../debug");
var _evaluateConditions = require("./evaluateConditions");
var _getEndpointHeaders = require("./getEndpointHeaders");
var _getEndpointProperties = require("./getEndpointProperties");
var _getEndpointUrl = require("./getEndpointUrl");
const evaluateEndpointRule = (endpointRule, options)=>{
    const { conditions , endpoint  } = endpointRule;
    const { result , referenceRecord  } = (0, _evaluateConditions.evaluateConditions)(conditions, options);
    if (!result) return;
    const endpointRuleOptions = {
        ...options,
        referenceRecord: {
            ...options.referenceRecord,
            ...referenceRecord
        }
    };
    const { url , properties , headers  } = endpoint;
    options.logger?.debug?.((0, _debug.debugId), `Resolving endpoint from template: ${(0, _debug.toDebugString)(endpoint)}`);
    return {
        ...headers != undefined && {
            headers: (0, _getEndpointHeaders.getEndpointHeaders)(headers, endpointRuleOptions)
        },
        ...properties != undefined && {
            properties: (0, _getEndpointProperties.getEndpointProperties)(properties, endpointRuleOptions)
        },
        url: (0, _getEndpointUrl.getEndpointUrl)(url, endpointRuleOptions)
    };
};

},{"../debug":"gypCz","./evaluateConditions":"8Te8z","./getEndpointHeaders":"fWWAe","./getEndpointProperties":"jhk8H","./getEndpointUrl":"dZm4G","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8Te8z":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "evaluateConditions", ()=>evaluateConditions);
var _debug = require("../debug");
var _evaluateCondition = require("./evaluateCondition");
const evaluateConditions = (conditions = [], options)=>{
    const conditionsReferenceRecord = {};
    for (const condition of conditions){
        const { result , toAssign  } = (0, _evaluateCondition.evaluateCondition)(condition, {
            ...options,
            referenceRecord: {
                ...options.referenceRecord,
                ...conditionsReferenceRecord
            }
        });
        if (!result) return {
            result
        };
        if (toAssign) {
            conditionsReferenceRecord[toAssign.name] = toAssign.value;
            options.logger?.debug?.((0, _debug.debugId), `assign: ${toAssign.name} := ${(0, _debug.toDebugString)(toAssign.value)}`);
        }
    }
    return {
        result: true,
        referenceRecord: conditionsReferenceRecord
    };
};

},{"../debug":"gypCz","./evaluateCondition":"8rLxv","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8rLxv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "evaluateCondition", ()=>evaluateCondition);
var _debug = require("../debug");
var _types = require("../types");
var _callFunction = require("./callFunction");
const evaluateCondition = ({ assign , ...fnArgs }, options)=>{
    if (assign && assign in options.referenceRecord) throw new (0, _types.EndpointError)(`'${assign}' is already defined in Reference Record.`);
    const value = (0, _callFunction.callFunction)(fnArgs, options);
    options.logger?.debug?.((0, _debug.debugId), `evaluateCondition: ${(0, _debug.toDebugString)(fnArgs)} = ${(0, _debug.toDebugString)(value)}`);
    return {
        result: value === "" ? true : !!value,
        ...assign != null && {
            toAssign: {
                name: assign,
                value
            }
        }
    };
};

},{"../debug":"gypCz","../types":"2EtEg","./callFunction":"hTa2n","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hTa2n":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "callFunction", ()=>callFunction);
var _lib = require("../lib");
var _evaluateExpression = require("./evaluateExpression");
const callFunction = ({ fn , argv  }, options)=>{
    const evaluatedArgs = argv.map((arg)=>[
            "boolean",
            "number"
        ].includes(typeof arg) ? arg : (0, _evaluateExpression.evaluateExpression)(arg, "arg", options));
    return fn.split(".").reduce((acc, key)=>acc[key], _lib)(...evaluatedArgs);
};

},{"../lib":"22vcG","./evaluateExpression":"8ExF3","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"22vcG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "aws", ()=>_aws);
var _aws = require("./aws");
var _booleanEquals = require("./booleanEquals");
parcelHelpers.exportAll(_booleanEquals, exports);
var _getAttr = require("./getAttr");
parcelHelpers.exportAll(_getAttr, exports);
var _isSet = require("./isSet");
parcelHelpers.exportAll(_isSet, exports);
var _isValidHostLabel = require("./isValidHostLabel");
parcelHelpers.exportAll(_isValidHostLabel, exports);
var _not = require("./not");
parcelHelpers.exportAll(_not, exports);
var _parseURL = require("./parseURL");
parcelHelpers.exportAll(_parseURL, exports);
var _stringEquals = require("./stringEquals");
parcelHelpers.exportAll(_stringEquals, exports);
var _substring = require("./substring");
parcelHelpers.exportAll(_substring, exports);
var _uriEncode = require("./uriEncode");
parcelHelpers.exportAll(_uriEncode, exports);

},{"./aws":"hyKz1","./booleanEquals":"96Q1z","./getAttr":"kQfja","./isSet":"bV0SW","./isValidHostLabel":"88jHA","./not":"9eiC2","./parseURL":"171yJ","./stringEquals":"63ifn","./substring":"3Ogpc","./uriEncode":"7mT74","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hyKz1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _isVirtualHostableS3Bucket = require("./isVirtualHostableS3Bucket");
parcelHelpers.exportAll(_isVirtualHostableS3Bucket, exports);
var _parseArn = require("./parseArn");
parcelHelpers.exportAll(_parseArn, exports);
var _partition = require("./partition");
parcelHelpers.exportAll(_partition, exports);

},{"./isVirtualHostableS3Bucket":"gwXwd","./parseArn":"59aQj","./partition":"joAYb","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gwXwd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isVirtualHostableS3Bucket", ()=>isVirtualHostableS3Bucket);
var _isIpAddress = require("../isIpAddress");
var _isValidHostLabel = require("../isValidHostLabel");
const isVirtualHostableS3Bucket = (value, allowSubDomains = false)=>{
    if (allowSubDomains) {
        for (const label of value.split(".")){
            if (!isVirtualHostableS3Bucket(label)) return false;
        }
        return true;
    }
    if (!(0, _isValidHostLabel.isValidHostLabel)(value)) return false;
    if (value.length < 3 || value.length > 63) return false;
    if (value !== value.toLowerCase()) return false;
    if ((0, _isIpAddress.isIpAddress)(value)) return false;
    return true;
};

},{"../isIpAddress":"fYjRq","../isValidHostLabel":"88jHA","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fYjRq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isIpAddress", ()=>isIpAddress);
const IP_V4_REGEX = new RegExp(`^(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}$`);
const isIpAddress = (value)=>IP_V4_REGEX.test(value) || value.startsWith("[") && value.endsWith("]");

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"88jHA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isValidHostLabel", ()=>isValidHostLabel);
const VALID_HOST_LABEL_REGEX = new RegExp(`^(?!.*-$)(?!-)[a-zA-Z0-9-]{1,63}$`);
const isValidHostLabel = (value, allowSubDomains = false)=>{
    if (!allowSubDomains) return VALID_HOST_LABEL_REGEX.test(value);
    const labels = value.split(".");
    for (const label of labels){
        if (!isValidHostLabel(label)) return false;
    }
    return true;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"59aQj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "parseArn", ()=>parseArn);
const parseArn = (value)=>{
    const segments = value.split(":");
    if (segments.length < 6) return null;
    const [arn, partition, service, region, accountId, ...resourceId] = segments;
    if (arn !== "arn" || partition === "" || service === "" || resourceId[0] === "") return null;
    return {
        partition,
        service,
        region,
        accountId,
        resourceId: resourceId[0].includes("/") ? resourceId[0].split("/") : resourceId
    };
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"96Q1z":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "booleanEquals", ()=>booleanEquals);
const booleanEquals = (value1, value2)=>value1 === value2;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kQfja":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getAttr", ()=>getAttr);
var _types = require("../types");
var _getAttrPathList = require("./getAttrPathList");
const getAttr = (value, path)=>(0, _getAttrPathList.getAttrPathList)(path).reduce((acc, index)=>{
        if (typeof acc !== "object") throw new (0, _types.EndpointError)(`Index '${index}' in '${path}' not found in '${JSON.stringify(value)}'`);
        else if (Array.isArray(acc)) return acc[parseInt(index)];
        return acc[index];
    }, value);

},{"../types":"2EtEg","./getAttrPathList":"f9S7K","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"f9S7K":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getAttrPathList", ()=>getAttrPathList);
var _types = require("../types");
const getAttrPathList = (path)=>{
    const parts = path.split(".");
    const pathList = [];
    for (const part of parts){
        const squareBracketIndex = part.indexOf("[");
        if (squareBracketIndex !== -1) {
            if (part.indexOf("]") !== part.length - 1) throw new (0, _types.EndpointError)(`Path: '${path}' does not end with ']'`);
            const arrayIndex = part.slice(squareBracketIndex + 1, -1);
            if (Number.isNaN(parseInt(arrayIndex))) throw new (0, _types.EndpointError)(`Invalid array index: '${arrayIndex}' in path: '${path}'`);
            if (squareBracketIndex !== 0) pathList.push(part.slice(0, squareBracketIndex));
            pathList.push(arrayIndex);
        } else pathList.push(part);
    }
    return pathList;
};

},{"../types":"2EtEg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bV0SW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "isSet", ()=>isSet);
const isSet = (value)=>value != null;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9eiC2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "not", ()=>not);
const not = (value)=>!value;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"171yJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "parseURL", ()=>parseURL);
var _types = require("@aws-sdk/types");
var _isIpAddress = require("./isIpAddress");
const DEFAULT_PORTS = {
    [(0, _types.EndpointURLScheme).HTTP]: 80,
    [(0, _types.EndpointURLScheme).HTTPS]: 443
};
const parseURL = (value)=>{
    const whatwgURL = (()=>{
        try {
            if (value instanceof URL) return value;
            if (typeof value === "object" && "hostname" in value) {
                const { hostname , port , protocol ="" , path ="" , query ={}  } = value;
                const url = new URL(`${protocol}//${hostname}${port ? `:${port}` : ""}${path}`);
                url.search = Object.entries(query).map(([k, v])=>`${k}=${v}`).join("&");
                return url;
            }
            return new URL(value);
        } catch (error) {
            return null;
        }
    })();
    if (!whatwgURL) {
        console.error(`Unable to parse ${JSON.stringify(value)} as a whatwg URL.`);
        return null;
    }
    const urlString = whatwgURL.href;
    const { host , hostname , pathname , protocol , search  } = whatwgURL;
    if (search) return null;
    const scheme = protocol.slice(0, -1);
    if (!Object.values((0, _types.EndpointURLScheme)).includes(scheme)) return null;
    const isIp = (0, _isIpAddress.isIpAddress)(hostname);
    const inputContainsDefaultPort = urlString.includes(`${host}:${DEFAULT_PORTS[scheme]}`) || typeof value === "string" && value.includes(`${host}:${DEFAULT_PORTS[scheme]}`);
    const authority = `${host}${inputContainsDefaultPort ? `:${DEFAULT_PORTS[scheme]}` : ``}`;
    return {
        scheme,
        authority,
        path: pathname,
        normalizedPath: pathname.endsWith("/") ? pathname : `${pathname}/`,
        isIp
    };
};

},{"@aws-sdk/types":"aYmGv","./isIpAddress":"fYjRq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aYmGv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _abort = require("./abort");
parcelHelpers.exportAll(_abort, exports);
var _auth = require("./auth");
parcelHelpers.exportAll(_auth, exports);
var _client = require("./client");
parcelHelpers.exportAll(_client, exports);
var _command = require("./command");
parcelHelpers.exportAll(_command, exports);
var _credentials = require("./credentials");
parcelHelpers.exportAll(_credentials, exports);
var _crypto = require("./crypto");
parcelHelpers.exportAll(_crypto, exports);
var _endpoint = require("./endpoint");
parcelHelpers.exportAll(_endpoint, exports);
var _eventStream = require("./eventStream");
parcelHelpers.exportAll(_eventStream, exports);
var _http = require("./http");
parcelHelpers.exportAll(_http, exports);
var _logger = require("./logger");
parcelHelpers.exportAll(_logger, exports);
var _middleware = require("./middleware");
parcelHelpers.exportAll(_middleware, exports);
var _pagination = require("./pagination");
parcelHelpers.exportAll(_pagination, exports);
var _profile = require("./profile");
parcelHelpers.exportAll(_profile, exports);
var _response = require("./response");
parcelHelpers.exportAll(_response, exports);
var _serde = require("./serde");
parcelHelpers.exportAll(_serde, exports);
var _shapes = require("./shapes");
parcelHelpers.exportAll(_shapes, exports);
var _signature = require("./signature");
parcelHelpers.exportAll(_signature, exports);
var _stream = require("./stream");
parcelHelpers.exportAll(_stream, exports);
var _token = require("./token");
parcelHelpers.exportAll(_token, exports);
var _transfer = require("./transfer");
parcelHelpers.exportAll(_transfer, exports);
var _util = require("./util");
parcelHelpers.exportAll(_util, exports);
var _waiter = require("./waiter");
parcelHelpers.exportAll(_waiter, exports);

},{"./abort":"5IooA","./auth":"61Rtv","./client":"7Xp0l","./command":"1jDWV","./credentials":"22IN2","./crypto":"b863q","./endpoint":"4F9zb","./eventStream":"jMz0R","./http":"7ytx4","./logger":"9cbpR","./middleware":"b89w9","./pagination":"iUCdd","./profile":"4dzij","./response":"cxAwT","./serde":"3sOst","./shapes":"a2lQQ","./signature":"dr5RD","./stream":"7B9MZ","./token":"g0A29","./transfer":"dnReS","./util":"4HD4I","./waiter":"e1OiM","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5IooA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"61Rtv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7Xp0l":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1jDWV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"22IN2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"b863q":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4F9zb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "EndpointURLScheme", ()=>EndpointURLScheme);
var EndpointURLScheme;
(function(EndpointURLScheme) {
    EndpointURLScheme["HTTP"] = "http";
    EndpointURLScheme["HTTPS"] = "https";
})(EndpointURLScheme || (EndpointURLScheme = {}));

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jMz0R":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7ytx4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9cbpR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"b89w9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iUCdd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4dzij":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cxAwT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3sOst":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a2lQQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dr5RD":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7B9MZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"g0A29":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dnReS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4HD4I":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"e1OiM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"63ifn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "stringEquals", ()=>stringEquals);
const stringEquals = (value1, value2)=>value1 === value2;

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3Ogpc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "substring", ()=>substring);
const substring = (input, start, stop, reverse)=>{
    if (start >= stop || input.length < stop) return null;
    if (!reverse) return input.substring(start, stop);
    return input.substring(input.length - stop, input.length - start);
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7mT74":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "uriEncode", ()=>uriEncode);
const uriEncode = (value)=>encodeURIComponent(value).replace(/[!*'()]/g, (c)=>`%${c.charCodeAt(0).toString(16).toUpperCase()}`);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8ExF3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "evaluateExpression", ()=>evaluateExpression);
var _types = require("../types");
var _callFunction = require("./callFunction");
var _evaluateTemplate = require("./evaluateTemplate");
var _getReferenceValue = require("./getReferenceValue");
const evaluateExpression = (obj, keyName, options)=>{
    if (typeof obj === "string") return (0, _evaluateTemplate.evaluateTemplate)(obj, options);
    else if (obj["fn"]) return (0, _callFunction.callFunction)(obj, options);
    else if (obj["ref"]) return (0, _getReferenceValue.getReferenceValue)(obj, options);
    throw new (0, _types.EndpointError)(`'${keyName}': ${String(obj)} is not a string, function or reference.`);
};

},{"../types":"2EtEg","./callFunction":"hTa2n","./evaluateTemplate":"5Fffk","./getReferenceValue":"eQiLr","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5Fffk":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "evaluateTemplate", ()=>evaluateTemplate);
var _lib = require("../lib");
const ATTR_SHORTHAND_REGEX = new RegExp("\\${([\\w]+)#([\\w]+)}", "g");
const evaluateTemplate = (template, options)=>{
    const templateToEvaluate = template.replace(new RegExp(`\{([^{}]+)\}`, "g"), "${$1}").replace(new RegExp(`\{\\$\{([^{}]+)\}\}`, "g"), "{$1}");
    const templateContext = {
        ...options.endpointParams,
        ...options.referenceRecord
    };
    const attrShortHandList = templateToEvaluate.match(ATTR_SHORTHAND_REGEX) || [];
    const attrShortHandMap = attrShortHandList.reduce((acc, attrShortHand)=>{
        const indexOfHash = attrShortHand.indexOf("#");
        const refName = attrShortHand.substring(2, indexOfHash);
        const attrName = attrShortHand.substring(indexOfHash + 1, attrShortHand.length - 1);
        acc[attrShortHand] = (0, _lib.getAttr)(templateContext[refName], attrName);
        return acc;
    }, {});
    const templateWithAttr = Object.entries(attrShortHandMap).reduce((acc, [shortHand, value])=>acc.replace(shortHand, value), templateToEvaluate);
    const templateContextNames = Object.keys(templateContext);
    const templateContextValues = Object.values(templateContext);
    const templateWithTildeEscaped = templateWithAttr.replace(/\`/g, "\\`");
    return new Function(...templateContextNames, `return \`${templateWithTildeEscaped}\``)(...templateContextValues);
};

},{"../lib":"22vcG","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eQiLr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getReferenceValue", ()=>getReferenceValue);
const getReferenceValue = ({ ref  }, options)=>{
    const referenceRecord = {
        ...options.endpointParams,
        ...options.referenceRecord
    };
    return referenceRecord[ref];
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fWWAe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getEndpointHeaders", ()=>getEndpointHeaders);
var _types = require("../types");
var _evaluateExpression = require("./evaluateExpression");
const getEndpointHeaders = (headers, options)=>Object.entries(headers).reduce((acc, [headerKey, headerVal])=>({
            ...acc,
            [headerKey]: headerVal.map((headerValEntry)=>{
                const processedExpr = (0, _evaluateExpression.evaluateExpression)(headerValEntry, "Header value entry", options);
                if (typeof processedExpr !== "string") throw new (0, _types.EndpointError)(`Header '${headerKey}' value '${processedExpr}' is not a string`);
                return processedExpr;
            })
        }), {});

},{"../types":"2EtEg","./evaluateExpression":"8ExF3","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jhk8H":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getEndpointProperties", ()=>getEndpointProperties);
var _getEndpointProperty = require("./getEndpointProperty");
const getEndpointProperties = (properties, options)=>Object.entries(properties).reduce((acc, [propertyKey, propertyVal])=>({
            ...acc,
            [propertyKey]: (0, _getEndpointProperty.getEndpointProperty)(propertyVal, options)
        }), {});

},{"./getEndpointProperty":"iUo7V","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iUo7V":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getEndpointProperty", ()=>getEndpointProperty);
var _types = require("../types");
var _evaluateTemplate = require("./evaluateTemplate");
var _getEndpointProperties = require("./getEndpointProperties");
const getEndpointProperty = (property, options)=>{
    if (Array.isArray(property)) return property.map((propertyEntry)=>getEndpointProperty(propertyEntry, options));
    switch(typeof property){
        case "string":
            return (0, _evaluateTemplate.evaluateTemplate)(property, options);
        case "object":
            if (property === null) throw new (0, _types.EndpointError)(`Unexpected endpoint property: ${property}`);
            return (0, _getEndpointProperties.getEndpointProperties)(property, options);
        case "boolean":
            return property;
        default:
            throw new (0, _types.EndpointError)(`Unexpected endpoint property type: ${typeof property}`);
    }
};

},{"../types":"2EtEg","./evaluateTemplate":"5Fffk","./getEndpointProperties":"jhk8H","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dZm4G":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getEndpointUrl", ()=>getEndpointUrl);
var _types = require("../types");
var _evaluateExpression = require("./evaluateExpression");
const getEndpointUrl = (endpointUrl, options)=>{
    const expression = (0, _evaluateExpression.evaluateExpression)(endpointUrl, "Endpoint URL", options);
    if (typeof expression === "string") try {
        return new URL(expression);
    } catch (error) {
        console.error(`Failed to construct URL with ${expression}`, error);
        throw error;
    }
    throw new (0, _types.EndpointError)(`Endpoint URL must be a string, got ${typeof expression}`);
};

},{"../types":"2EtEg","./evaluateExpression":"8ExF3","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fetFp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "evaluateErrorRule", ()=>evaluateErrorRule);
var _types = require("../types");
var _evaluateConditions = require("./evaluateConditions");
var _evaluateExpression = require("./evaluateExpression");
const evaluateErrorRule = (errorRule, options)=>{
    const { conditions , error  } = errorRule;
    const { result , referenceRecord  } = (0, _evaluateConditions.evaluateConditions)(conditions, options);
    if (!result) return;
    throw new (0, _types.EndpointError)((0, _evaluateExpression.evaluateExpression)(error, "Error", {
        ...options,
        referenceRecord: {
            ...options.referenceRecord,
            ...referenceRecord
        }
    }));
};

},{"../types":"2EtEg","./evaluateConditions":"8Te8z","./evaluateExpression":"8ExF3","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dSBwZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "evaluateTreeRule", ()=>evaluateTreeRule);
var _evaluateConditions = require("./evaluateConditions");
var _evaluateRules = require("./evaluateRules");
const evaluateTreeRule = (treeRule, options)=>{
    const { conditions , rules  } = treeRule;
    const { result , referenceRecord  } = (0, _evaluateConditions.evaluateConditions)(conditions, options);
    if (!result) return;
    return (0, _evaluateRules.evaluateRules)(rules, {
        ...options,
        referenceRecord: {
            ...options.referenceRecord,
            ...referenceRecord
        }
    });
};

},{"./evaluateConditions":"8Te8z","./evaluateRules":"bXRh8","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5VbZ1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ruleSet", ()=>ruleSet);
const ruleSet = {
    version: "1.0",
    parameters: {
        Region: {
            builtIn: "AWS::Region",
            required: false,
            documentation: "The AWS region used to dispatch the request.",
            type: "String"
        },
        UseDualStack: {
            builtIn: "AWS::UseDualStack",
            required: true,
            default: false,
            documentation: "When true, use the dual-stack endpoint. If the configured endpoint does not support dual-stack, dispatching the request MAY return an error.",
            type: "Boolean"
        },
        UseFIPS: {
            builtIn: "AWS::UseFIPS",
            required: true,
            default: false,
            documentation: "When true, send this request to the FIPS-compliant regional endpoint. If the configured endpoint does not have a FIPS compliant endpoint, dispatching the request will return an error.",
            type: "Boolean"
        },
        Endpoint: {
            builtIn: "SDK::Endpoint",
            required: false,
            documentation: "Override the endpoint used to send this request",
            type: "String"
        }
    },
    rules: [
        {
            conditions: [
                {
                    fn: "aws.partition",
                    argv: [
                        {
                            ref: "Region"
                        }, 
                    ],
                    assign: "PartitionResult"
                }, 
            ],
            type: "tree",
            rules: [
                {
                    conditions: [
                        {
                            fn: "isSet",
                            argv: [
                                {
                                    ref: "Endpoint"
                                }, 
                            ]
                        },
                        {
                            fn: "parseURL",
                            argv: [
                                {
                                    ref: "Endpoint"
                                }, 
                            ],
                            assign: "url"
                        }, 
                    ],
                    type: "tree",
                    rules: [
                        {
                            conditions: [
                                {
                                    fn: "booleanEquals",
                                    argv: [
                                        {
                                            ref: "UseFIPS"
                                        },
                                        true, 
                                    ]
                                }, 
                            ],
                            error: "Invalid Configuration: FIPS and custom endpoint are not supported",
                            type: "error"
                        },
                        {
                            conditions: [],
                            type: "tree",
                            rules: [
                                {
                                    conditions: [
                                        {
                                            fn: "booleanEquals",
                                            argv: [
                                                {
                                                    ref: "UseDualStack"
                                                },
                                                true, 
                                            ]
                                        }, 
                                    ],
                                    error: "Invalid Configuration: Dualstack and custom endpoint are not supported",
                                    type: "error"
                                },
                                {
                                    conditions: [],
                                    endpoint: {
                                        url: {
                                            ref: "Endpoint"
                                        },
                                        properties: {},
                                        headers: {}
                                    },
                                    type: "endpoint"
                                }, 
                            ]
                        }, 
                    ]
                },
                {
                    conditions: [
                        {
                            fn: "booleanEquals",
                            argv: [
                                {
                                    ref: "UseFIPS"
                                },
                                true, 
                            ]
                        },
                        {
                            fn: "booleanEquals",
                            argv: [
                                {
                                    ref: "UseDualStack"
                                },
                                true, 
                            ]
                        }, 
                    ],
                    type: "tree",
                    rules: [
                        {
                            conditions: [
                                {
                                    fn: "booleanEquals",
                                    argv: [
                                        true,
                                        {
                                            fn: "getAttr",
                                            argv: [
                                                {
                                                    ref: "PartitionResult"
                                                },
                                                "supportsFIPS", 
                                            ]
                                        }, 
                                    ]
                                },
                                {
                                    fn: "booleanEquals",
                                    argv: [
                                        true,
                                        {
                                            fn: "getAttr",
                                            argv: [
                                                {
                                                    ref: "PartitionResult"
                                                },
                                                "supportsDualStack", 
                                            ]
                                        }, 
                                    ]
                                }, 
                            ],
                            type: "tree",
                            rules: [
                                {
                                    conditions: [],
                                    endpoint: {
                                        url: "https://cognito-identity-fips.{Region}.{PartitionResult#dualStackDnsSuffix}",
                                        properties: {},
                                        headers: {}
                                    },
                                    type: "endpoint"
                                }, 
                            ]
                        },
                        {
                            conditions: [],
                            error: "FIPS and DualStack are enabled, but this partition does not support one or both",
                            type: "error"
                        }, 
                    ]
                },
                {
                    conditions: [
                        {
                            fn: "booleanEquals",
                            argv: [
                                {
                                    ref: "UseFIPS"
                                },
                                true, 
                            ]
                        }, 
                    ],
                    type: "tree",
                    rules: [
                        {
                            conditions: [
                                {
                                    fn: "booleanEquals",
                                    argv: [
                                        true,
                                        {
                                            fn: "getAttr",
                                            argv: [
                                                {
                                                    ref: "PartitionResult"
                                                },
                                                "supportsFIPS", 
                                            ]
                                        }, 
                                    ]
                                }, 
                            ],
                            type: "tree",
                            rules: [
                                {
                                    conditions: [],
                                    type: "tree",
                                    rules: [
                                        {
                                            conditions: [],
                                            endpoint: {
                                                url: "https://cognito-identity-fips.{Region}.{PartitionResult#dnsSuffix}",
                                                properties: {},
                                                headers: {}
                                            },
                                            type: "endpoint"
                                        }, 
                                    ]
                                }, 
                            ]
                        },
                        {
                            conditions: [],
                            error: "FIPS is enabled but this partition does not support FIPS",
                            type: "error"
                        }, 
                    ]
                },
                {
                    conditions: [
                        {
                            fn: "booleanEquals",
                            argv: [
                                {
                                    ref: "UseDualStack"
                                },
                                true, 
                            ]
                        }, 
                    ],
                    type: "tree",
                    rules: [
                        {
                            conditions: [
                                {
                                    fn: "booleanEquals",
                                    argv: [
                                        true,
                                        {
                                            fn: "getAttr",
                                            argv: [
                                                {
                                                    ref: "PartitionResult"
                                                },
                                                "supportsDualStack", 
                                            ]
                                        }, 
                                    ]
                                }, 
                            ],
                            type: "tree",
                            rules: [
                                {
                                    conditions: [],
                                    endpoint: {
                                        url: "https://cognito-identity.{Region}.{PartitionResult#dualStackDnsSuffix}",
                                        properties: {},
                                        headers: {}
                                    },
                                    type: "endpoint"
                                }, 
                            ]
                        },
                        {
                            conditions: [],
                            error: "DualStack is enabled but this partition does not support DualStack",
                            type: "error"
                        }, 
                    ]
                },
                {
                    conditions: [],
                    endpoint: {
                        url: "https://cognito-identity.{Region}.{PartitionResult#dnsSuffix}",
                        properties: {},
                        headers: {}
                    },
                    type: "endpoint"
                }, 
            ]
        }, 
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lFq8A":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _resolveDefaultsModeConfig = require("./resolveDefaultsModeConfig");
parcelHelpers.exportAll(_resolveDefaultsModeConfig, exports);

},{"./resolveDefaultsModeConfig":"4Z3Kq","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4Z3Kq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "resolveDefaultsModeConfig", ()=>resolveDefaultsModeConfig);
var _propertyProvider = require("@aws-sdk/property-provider");
var _bowser = require("bowser");
var _bowserDefault = parcelHelpers.interopDefault(_bowser);
var _constants = require("./constants");
const resolveDefaultsModeConfig = ({ defaultsMode ,  } = {})=>(0, _propertyProvider.memoize)(async ()=>{
        const mode = typeof defaultsMode === "function" ? await defaultsMode() : defaultsMode;
        switch(mode?.toLowerCase()){
            case "auto":
                return Promise.resolve(isMobileBrowser() ? "mobile" : "standard");
            case "mobile":
            case "in-region":
            case "cross-region":
            case "standard":
            case "legacy":
                return Promise.resolve(mode?.toLocaleLowerCase());
            case undefined:
                return Promise.resolve("legacy");
            default:
                throw new Error(`Invalid parameter for "defaultsMode", expect ${(0, _constants.DEFAULTS_MODE_OPTIONS).join(", ")}, got ${mode}`);
        }
    });
const isMobileBrowser = ()=>{
    const parsedUA = typeof window !== "undefined" && window?.navigator?.userAgent ? (0, _bowserDefault.default).parse(window.navigator.userAgent) : undefined;
    const platform = parsedUA?.platform?.type;
    return platform === "tablet" || platform === "mobile";
};

},{"@aws-sdk/property-provider":"eAar8","bowser":"5jYCf","./constants":"dgYQg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dgYQg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DEFAULTS_MODE_OPTIONS", ()=>DEFAULTS_MODE_OPTIONS);
const DEFAULTS_MODE_OPTIONS = [
    "in-region",
    "cross-region",
    "mobile",
    "standard",
    "legacy"
];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"g3rb4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CreateIdentityPoolCommand", ()=>CreateIdentityPoolCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _middlewareSigning = require("@aws-sdk/middleware-signing");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
class CreateIdentityPoolCommand extends (0, _smithyClient.Command) {
    constructor(input){
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, CreateIdentityPoolCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, _middlewareSigning.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "CognitoIdentityClient";
        const commandName = "CreateIdentityPoolCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.CreateIdentityPoolInputFilterSensitiveLog),
            outputFilterSensitiveLog: (0, _models0.IdentityPoolFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsJson11.serializeAws_json1_1CreateIdentityPoolCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1CreateIdentityPoolCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/middleware-signing":"apx8g","@aws-sdk/smithy-client":"ats0l","../models/models_0":"6yMxE","../protocols/Aws_json1_1":"duUQ4","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6yMxE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "AmbiguousRoleResolutionType", ()=>AmbiguousRoleResolutionType);
parcelHelpers.export(exports, "InternalErrorException", ()=>InternalErrorException);
parcelHelpers.export(exports, "InvalidParameterException", ()=>InvalidParameterException);
parcelHelpers.export(exports, "LimitExceededException", ()=>LimitExceededException);
parcelHelpers.export(exports, "NotAuthorizedException", ()=>NotAuthorizedException);
parcelHelpers.export(exports, "ResourceConflictException", ()=>ResourceConflictException);
parcelHelpers.export(exports, "TooManyRequestsException", ()=>TooManyRequestsException);
parcelHelpers.export(exports, "ErrorCode", ()=>ErrorCode);
parcelHelpers.export(exports, "ResourceNotFoundException", ()=>ResourceNotFoundException);
parcelHelpers.export(exports, "ExternalServiceException", ()=>ExternalServiceException);
parcelHelpers.export(exports, "InvalidIdentityPoolConfigurationException", ()=>InvalidIdentityPoolConfigurationException);
parcelHelpers.export(exports, "MappingRuleMatchType", ()=>MappingRuleMatchType);
parcelHelpers.export(exports, "RoleMappingType", ()=>RoleMappingType);
parcelHelpers.export(exports, "DeveloperUserAlreadyRegisteredException", ()=>DeveloperUserAlreadyRegisteredException);
parcelHelpers.export(exports, "ConcurrentModificationException", ()=>ConcurrentModificationException);
parcelHelpers.export(exports, "CognitoIdentityProviderFilterSensitiveLog", ()=>CognitoIdentityProviderFilterSensitiveLog);
parcelHelpers.export(exports, "CreateIdentityPoolInputFilterSensitiveLog", ()=>CreateIdentityPoolInputFilterSensitiveLog);
parcelHelpers.export(exports, "IdentityPoolFilterSensitiveLog", ()=>IdentityPoolFilterSensitiveLog);
parcelHelpers.export(exports, "DeleteIdentitiesInputFilterSensitiveLog", ()=>DeleteIdentitiesInputFilterSensitiveLog);
parcelHelpers.export(exports, "UnprocessedIdentityIdFilterSensitiveLog", ()=>UnprocessedIdentityIdFilterSensitiveLog);
parcelHelpers.export(exports, "DeleteIdentitiesResponseFilterSensitiveLog", ()=>DeleteIdentitiesResponseFilterSensitiveLog);
parcelHelpers.export(exports, "DeleteIdentityPoolInputFilterSensitiveLog", ()=>DeleteIdentityPoolInputFilterSensitiveLog);
parcelHelpers.export(exports, "DescribeIdentityInputFilterSensitiveLog", ()=>DescribeIdentityInputFilterSensitiveLog);
parcelHelpers.export(exports, "IdentityDescriptionFilterSensitiveLog", ()=>IdentityDescriptionFilterSensitiveLog);
parcelHelpers.export(exports, "DescribeIdentityPoolInputFilterSensitiveLog", ()=>DescribeIdentityPoolInputFilterSensitiveLog);
parcelHelpers.export(exports, "GetCredentialsForIdentityInputFilterSensitiveLog", ()=>GetCredentialsForIdentityInputFilterSensitiveLog);
parcelHelpers.export(exports, "CredentialsFilterSensitiveLog", ()=>CredentialsFilterSensitiveLog);
parcelHelpers.export(exports, "GetCredentialsForIdentityResponseFilterSensitiveLog", ()=>GetCredentialsForIdentityResponseFilterSensitiveLog);
parcelHelpers.export(exports, "GetIdInputFilterSensitiveLog", ()=>GetIdInputFilterSensitiveLog);
parcelHelpers.export(exports, "GetIdResponseFilterSensitiveLog", ()=>GetIdResponseFilterSensitiveLog);
parcelHelpers.export(exports, "GetIdentityPoolRolesInputFilterSensitiveLog", ()=>GetIdentityPoolRolesInputFilterSensitiveLog);
parcelHelpers.export(exports, "MappingRuleFilterSensitiveLog", ()=>MappingRuleFilterSensitiveLog);
parcelHelpers.export(exports, "RulesConfigurationTypeFilterSensitiveLog", ()=>RulesConfigurationTypeFilterSensitiveLog);
parcelHelpers.export(exports, "RoleMappingFilterSensitiveLog", ()=>RoleMappingFilterSensitiveLog);
parcelHelpers.export(exports, "GetIdentityPoolRolesResponseFilterSensitiveLog", ()=>GetIdentityPoolRolesResponseFilterSensitiveLog);
parcelHelpers.export(exports, "GetOpenIdTokenInputFilterSensitiveLog", ()=>GetOpenIdTokenInputFilterSensitiveLog);
parcelHelpers.export(exports, "GetOpenIdTokenResponseFilterSensitiveLog", ()=>GetOpenIdTokenResponseFilterSensitiveLog);
parcelHelpers.export(exports, "GetOpenIdTokenForDeveloperIdentityInputFilterSensitiveLog", ()=>GetOpenIdTokenForDeveloperIdentityInputFilterSensitiveLog);
parcelHelpers.export(exports, "GetOpenIdTokenForDeveloperIdentityResponseFilterSensitiveLog", ()=>GetOpenIdTokenForDeveloperIdentityResponseFilterSensitiveLog);
parcelHelpers.export(exports, "GetPrincipalTagAttributeMapInputFilterSensitiveLog", ()=>GetPrincipalTagAttributeMapInputFilterSensitiveLog);
parcelHelpers.export(exports, "GetPrincipalTagAttributeMapResponseFilterSensitiveLog", ()=>GetPrincipalTagAttributeMapResponseFilterSensitiveLog);
parcelHelpers.export(exports, "ListIdentitiesInputFilterSensitiveLog", ()=>ListIdentitiesInputFilterSensitiveLog);
parcelHelpers.export(exports, "ListIdentitiesResponseFilterSensitiveLog", ()=>ListIdentitiesResponseFilterSensitiveLog);
parcelHelpers.export(exports, "ListIdentityPoolsInputFilterSensitiveLog", ()=>ListIdentityPoolsInputFilterSensitiveLog);
parcelHelpers.export(exports, "IdentityPoolShortDescriptionFilterSensitiveLog", ()=>IdentityPoolShortDescriptionFilterSensitiveLog);
parcelHelpers.export(exports, "ListIdentityPoolsResponseFilterSensitiveLog", ()=>ListIdentityPoolsResponseFilterSensitiveLog);
parcelHelpers.export(exports, "ListTagsForResourceInputFilterSensitiveLog", ()=>ListTagsForResourceInputFilterSensitiveLog);
parcelHelpers.export(exports, "ListTagsForResourceResponseFilterSensitiveLog", ()=>ListTagsForResourceResponseFilterSensitiveLog);
parcelHelpers.export(exports, "LookupDeveloperIdentityInputFilterSensitiveLog", ()=>LookupDeveloperIdentityInputFilterSensitiveLog);
parcelHelpers.export(exports, "LookupDeveloperIdentityResponseFilterSensitiveLog", ()=>LookupDeveloperIdentityResponseFilterSensitiveLog);
parcelHelpers.export(exports, "MergeDeveloperIdentitiesInputFilterSensitiveLog", ()=>MergeDeveloperIdentitiesInputFilterSensitiveLog);
parcelHelpers.export(exports, "MergeDeveloperIdentitiesResponseFilterSensitiveLog", ()=>MergeDeveloperIdentitiesResponseFilterSensitiveLog);
parcelHelpers.export(exports, "SetIdentityPoolRolesInputFilterSensitiveLog", ()=>SetIdentityPoolRolesInputFilterSensitiveLog);
parcelHelpers.export(exports, "SetPrincipalTagAttributeMapInputFilterSensitiveLog", ()=>SetPrincipalTagAttributeMapInputFilterSensitiveLog);
parcelHelpers.export(exports, "SetPrincipalTagAttributeMapResponseFilterSensitiveLog", ()=>SetPrincipalTagAttributeMapResponseFilterSensitiveLog);
parcelHelpers.export(exports, "TagResourceInputFilterSensitiveLog", ()=>TagResourceInputFilterSensitiveLog);
parcelHelpers.export(exports, "TagResourceResponseFilterSensitiveLog", ()=>TagResourceResponseFilterSensitiveLog);
parcelHelpers.export(exports, "UnlinkDeveloperIdentityInputFilterSensitiveLog", ()=>UnlinkDeveloperIdentityInputFilterSensitiveLog);
parcelHelpers.export(exports, "UnlinkIdentityInputFilterSensitiveLog", ()=>UnlinkIdentityInputFilterSensitiveLog);
parcelHelpers.export(exports, "UntagResourceInputFilterSensitiveLog", ()=>UntagResourceInputFilterSensitiveLog);
parcelHelpers.export(exports, "UntagResourceResponseFilterSensitiveLog", ()=>UntagResourceResponseFilterSensitiveLog);
var _cognitoIdentityServiceException = require("./CognitoIdentityServiceException");
var AmbiguousRoleResolutionType;
(function(AmbiguousRoleResolutionType) {
    AmbiguousRoleResolutionType["AUTHENTICATED_ROLE"] = "AuthenticatedRole";
    AmbiguousRoleResolutionType["DENY"] = "Deny";
})(AmbiguousRoleResolutionType || (AmbiguousRoleResolutionType = {}));
class InternalErrorException extends (0, _cognitoIdentityServiceException.CognitoIdentityServiceException) {
    constructor(opts){
        super({
            name: "InternalErrorException",
            $fault: "server",
            ...opts
        });
        this.name = "InternalErrorException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalErrorException.prototype);
    }
}
class InvalidParameterException extends (0, _cognitoIdentityServiceException.CognitoIdentityServiceException) {
    constructor(opts){
        super({
            name: "InvalidParameterException",
            $fault: "client",
            ...opts
        });
        this.name = "InvalidParameterException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidParameterException.prototype);
    }
}
class LimitExceededException extends (0, _cognitoIdentityServiceException.CognitoIdentityServiceException) {
    constructor(opts){
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts
        });
        this.name = "LimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LimitExceededException.prototype);
    }
}
class NotAuthorizedException extends (0, _cognitoIdentityServiceException.CognitoIdentityServiceException) {
    constructor(opts){
        super({
            name: "NotAuthorizedException",
            $fault: "client",
            ...opts
        });
        this.name = "NotAuthorizedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, NotAuthorizedException.prototype);
    }
}
class ResourceConflictException extends (0, _cognitoIdentityServiceException.CognitoIdentityServiceException) {
    constructor(opts){
        super({
            name: "ResourceConflictException",
            $fault: "client",
            ...opts
        });
        this.name = "ResourceConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceConflictException.prototype);
    }
}
class TooManyRequestsException extends (0, _cognitoIdentityServiceException.CognitoIdentityServiceException) {
    constructor(opts){
        super({
            name: "TooManyRequestsException",
            $fault: "client",
            ...opts
        });
        this.name = "TooManyRequestsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyRequestsException.prototype);
    }
}
var ErrorCode;
(function(ErrorCode) {
    ErrorCode["ACCESS_DENIED"] = "AccessDenied";
    ErrorCode["INTERNAL_SERVER_ERROR"] = "InternalServerError";
})(ErrorCode || (ErrorCode = {}));
class ResourceNotFoundException extends (0, _cognitoIdentityServiceException.CognitoIdentityServiceException) {
    constructor(opts){
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
    }
}
class ExternalServiceException extends (0, _cognitoIdentityServiceException.CognitoIdentityServiceException) {
    constructor(opts){
        super({
            name: "ExternalServiceException",
            $fault: "client",
            ...opts
        });
        this.name = "ExternalServiceException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ExternalServiceException.prototype);
    }
}
class InvalidIdentityPoolConfigurationException extends (0, _cognitoIdentityServiceException.CognitoIdentityServiceException) {
    constructor(opts){
        super({
            name: "InvalidIdentityPoolConfigurationException",
            $fault: "client",
            ...opts
        });
        this.name = "InvalidIdentityPoolConfigurationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidIdentityPoolConfigurationException.prototype);
    }
}
var MappingRuleMatchType;
(function(MappingRuleMatchType) {
    MappingRuleMatchType["CONTAINS"] = "Contains";
    MappingRuleMatchType["EQUALS"] = "Equals";
    MappingRuleMatchType["NOT_EQUAL"] = "NotEqual";
    MappingRuleMatchType["STARTS_WITH"] = "StartsWith";
})(MappingRuleMatchType || (MappingRuleMatchType = {}));
var RoleMappingType;
(function(RoleMappingType) {
    RoleMappingType["RULES"] = "Rules";
    RoleMappingType["TOKEN"] = "Token";
})(RoleMappingType || (RoleMappingType = {}));
class DeveloperUserAlreadyRegisteredException extends (0, _cognitoIdentityServiceException.CognitoIdentityServiceException) {
    constructor(opts){
        super({
            name: "DeveloperUserAlreadyRegisteredException",
            $fault: "client",
            ...opts
        });
        this.name = "DeveloperUserAlreadyRegisteredException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DeveloperUserAlreadyRegisteredException.prototype);
    }
}
class ConcurrentModificationException extends (0, _cognitoIdentityServiceException.CognitoIdentityServiceException) {
    constructor(opts){
        super({
            name: "ConcurrentModificationException",
            $fault: "client",
            ...opts
        });
        this.name = "ConcurrentModificationException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConcurrentModificationException.prototype);
    }
}
const CognitoIdentityProviderFilterSensitiveLog = (obj)=>({
        ...obj
    });
const CreateIdentityPoolInputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const IdentityPoolFilterSensitiveLog = (obj)=>({
        ...obj
    });
const DeleteIdentitiesInputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const UnprocessedIdentityIdFilterSensitiveLog = (obj)=>({
        ...obj
    });
const DeleteIdentitiesResponseFilterSensitiveLog = (obj)=>({
        ...obj
    });
const DeleteIdentityPoolInputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const DescribeIdentityInputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const IdentityDescriptionFilterSensitiveLog = (obj)=>({
        ...obj
    });
const DescribeIdentityPoolInputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const GetCredentialsForIdentityInputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const CredentialsFilterSensitiveLog = (obj)=>({
        ...obj
    });
const GetCredentialsForIdentityResponseFilterSensitiveLog = (obj)=>({
        ...obj
    });
const GetIdInputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const GetIdResponseFilterSensitiveLog = (obj)=>({
        ...obj
    });
const GetIdentityPoolRolesInputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const MappingRuleFilterSensitiveLog = (obj)=>({
        ...obj
    });
const RulesConfigurationTypeFilterSensitiveLog = (obj)=>({
        ...obj
    });
const RoleMappingFilterSensitiveLog = (obj)=>({
        ...obj
    });
const GetIdentityPoolRolesResponseFilterSensitiveLog = (obj)=>({
        ...obj
    });
const GetOpenIdTokenInputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const GetOpenIdTokenResponseFilterSensitiveLog = (obj)=>({
        ...obj
    });
const GetOpenIdTokenForDeveloperIdentityInputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const GetOpenIdTokenForDeveloperIdentityResponseFilterSensitiveLog = (obj)=>({
        ...obj
    });
const GetPrincipalTagAttributeMapInputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const GetPrincipalTagAttributeMapResponseFilterSensitiveLog = (obj)=>({
        ...obj
    });
const ListIdentitiesInputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const ListIdentitiesResponseFilterSensitiveLog = (obj)=>({
        ...obj
    });
const ListIdentityPoolsInputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const IdentityPoolShortDescriptionFilterSensitiveLog = (obj)=>({
        ...obj
    });
const ListIdentityPoolsResponseFilterSensitiveLog = (obj)=>({
        ...obj
    });
const ListTagsForResourceInputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const ListTagsForResourceResponseFilterSensitiveLog = (obj)=>({
        ...obj
    });
const LookupDeveloperIdentityInputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const LookupDeveloperIdentityResponseFilterSensitiveLog = (obj)=>({
        ...obj
    });
const MergeDeveloperIdentitiesInputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const MergeDeveloperIdentitiesResponseFilterSensitiveLog = (obj)=>({
        ...obj
    });
const SetIdentityPoolRolesInputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const SetPrincipalTagAttributeMapInputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const SetPrincipalTagAttributeMapResponseFilterSensitiveLog = (obj)=>({
        ...obj
    });
const TagResourceInputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const TagResourceResponseFilterSensitiveLog = (obj)=>({
        ...obj
    });
const UnlinkDeveloperIdentityInputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const UnlinkIdentityInputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const UntagResourceInputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const UntagResourceResponseFilterSensitiveLog = (obj)=>({
        ...obj
    });

},{"./CognitoIdentityServiceException":"l45dy","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"l45dy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CognitoIdentityServiceException", ()=>CognitoIdentityServiceException);
var _smithyClient = require("@aws-sdk/smithy-client");
class CognitoIdentityServiceException extends (0, _smithyClient.ServiceException) {
    constructor(options){
        super(options);
        Object.setPrototypeOf(this, CognitoIdentityServiceException.prototype);
    }
}

},{"@aws-sdk/smithy-client":"ats0l","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"duUQ4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "serializeAws_json1_1CreateIdentityPoolCommand", ()=>serializeAws_json1_1CreateIdentityPoolCommand);
parcelHelpers.export(exports, "serializeAws_json1_1DeleteIdentitiesCommand", ()=>serializeAws_json1_1DeleteIdentitiesCommand);
parcelHelpers.export(exports, "serializeAws_json1_1DeleteIdentityPoolCommand", ()=>serializeAws_json1_1DeleteIdentityPoolCommand);
parcelHelpers.export(exports, "serializeAws_json1_1DescribeIdentityCommand", ()=>serializeAws_json1_1DescribeIdentityCommand);
parcelHelpers.export(exports, "serializeAws_json1_1DescribeIdentityPoolCommand", ()=>serializeAws_json1_1DescribeIdentityPoolCommand);
parcelHelpers.export(exports, "serializeAws_json1_1GetCredentialsForIdentityCommand", ()=>serializeAws_json1_1GetCredentialsForIdentityCommand);
parcelHelpers.export(exports, "serializeAws_json1_1GetIdCommand", ()=>serializeAws_json1_1GetIdCommand);
parcelHelpers.export(exports, "serializeAws_json1_1GetIdentityPoolRolesCommand", ()=>serializeAws_json1_1GetIdentityPoolRolesCommand);
parcelHelpers.export(exports, "serializeAws_json1_1GetOpenIdTokenCommand", ()=>serializeAws_json1_1GetOpenIdTokenCommand);
parcelHelpers.export(exports, "serializeAws_json1_1GetOpenIdTokenForDeveloperIdentityCommand", ()=>serializeAws_json1_1GetOpenIdTokenForDeveloperIdentityCommand);
parcelHelpers.export(exports, "serializeAws_json1_1GetPrincipalTagAttributeMapCommand", ()=>serializeAws_json1_1GetPrincipalTagAttributeMapCommand);
parcelHelpers.export(exports, "serializeAws_json1_1ListIdentitiesCommand", ()=>serializeAws_json1_1ListIdentitiesCommand);
parcelHelpers.export(exports, "serializeAws_json1_1ListIdentityPoolsCommand", ()=>serializeAws_json1_1ListIdentityPoolsCommand);
parcelHelpers.export(exports, "serializeAws_json1_1ListTagsForResourceCommand", ()=>serializeAws_json1_1ListTagsForResourceCommand);
parcelHelpers.export(exports, "serializeAws_json1_1LookupDeveloperIdentityCommand", ()=>serializeAws_json1_1LookupDeveloperIdentityCommand);
parcelHelpers.export(exports, "serializeAws_json1_1MergeDeveloperIdentitiesCommand", ()=>serializeAws_json1_1MergeDeveloperIdentitiesCommand);
parcelHelpers.export(exports, "serializeAws_json1_1SetIdentityPoolRolesCommand", ()=>serializeAws_json1_1SetIdentityPoolRolesCommand);
parcelHelpers.export(exports, "serializeAws_json1_1SetPrincipalTagAttributeMapCommand", ()=>serializeAws_json1_1SetPrincipalTagAttributeMapCommand);
parcelHelpers.export(exports, "serializeAws_json1_1TagResourceCommand", ()=>serializeAws_json1_1TagResourceCommand);
parcelHelpers.export(exports, "serializeAws_json1_1UnlinkDeveloperIdentityCommand", ()=>serializeAws_json1_1UnlinkDeveloperIdentityCommand);
parcelHelpers.export(exports, "serializeAws_json1_1UnlinkIdentityCommand", ()=>serializeAws_json1_1UnlinkIdentityCommand);
parcelHelpers.export(exports, "serializeAws_json1_1UntagResourceCommand", ()=>serializeAws_json1_1UntagResourceCommand);
parcelHelpers.export(exports, "serializeAws_json1_1UpdateIdentityPoolCommand", ()=>serializeAws_json1_1UpdateIdentityPoolCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1CreateIdentityPoolCommand", ()=>deserializeAws_json1_1CreateIdentityPoolCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1DeleteIdentitiesCommand", ()=>deserializeAws_json1_1DeleteIdentitiesCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1DeleteIdentityPoolCommand", ()=>deserializeAws_json1_1DeleteIdentityPoolCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1DescribeIdentityCommand", ()=>deserializeAws_json1_1DescribeIdentityCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1DescribeIdentityPoolCommand", ()=>deserializeAws_json1_1DescribeIdentityPoolCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1GetCredentialsForIdentityCommand", ()=>deserializeAws_json1_1GetCredentialsForIdentityCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1GetIdCommand", ()=>deserializeAws_json1_1GetIdCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1GetIdentityPoolRolesCommand", ()=>deserializeAws_json1_1GetIdentityPoolRolesCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1GetOpenIdTokenCommand", ()=>deserializeAws_json1_1GetOpenIdTokenCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1GetOpenIdTokenForDeveloperIdentityCommand", ()=>deserializeAws_json1_1GetOpenIdTokenForDeveloperIdentityCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1GetPrincipalTagAttributeMapCommand", ()=>deserializeAws_json1_1GetPrincipalTagAttributeMapCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1ListIdentitiesCommand", ()=>deserializeAws_json1_1ListIdentitiesCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1ListIdentityPoolsCommand", ()=>deserializeAws_json1_1ListIdentityPoolsCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1ListTagsForResourceCommand", ()=>deserializeAws_json1_1ListTagsForResourceCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1LookupDeveloperIdentityCommand", ()=>deserializeAws_json1_1LookupDeveloperIdentityCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1MergeDeveloperIdentitiesCommand", ()=>deserializeAws_json1_1MergeDeveloperIdentitiesCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1SetIdentityPoolRolesCommand", ()=>deserializeAws_json1_1SetIdentityPoolRolesCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1SetPrincipalTagAttributeMapCommand", ()=>deserializeAws_json1_1SetPrincipalTagAttributeMapCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1TagResourceCommand", ()=>deserializeAws_json1_1TagResourceCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1UnlinkDeveloperIdentityCommand", ()=>deserializeAws_json1_1UnlinkDeveloperIdentityCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1UnlinkIdentityCommand", ()=>deserializeAws_json1_1UnlinkIdentityCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1UntagResourceCommand", ()=>deserializeAws_json1_1UntagResourceCommand);
parcelHelpers.export(exports, "deserializeAws_json1_1UpdateIdentityPoolCommand", ()=>deserializeAws_json1_1UpdateIdentityPoolCommand);
var _protocolHttp = require("@aws-sdk/protocol-http");
var _smithyClient = require("@aws-sdk/smithy-client");
var _cognitoIdentityServiceException = require("../models/CognitoIdentityServiceException");
var _models0 = require("../models/models_0");
const serializeAws_json1_1CreateIdentityPoolCommand = async (input, context)=>{
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.CreateIdentityPool"
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1CreateIdentityPoolInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_1DeleteIdentitiesCommand = async (input, context)=>{
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.DeleteIdentities"
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteIdentitiesInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_1DeleteIdentityPoolCommand = async (input, context)=>{
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.DeleteIdentityPool"
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DeleteIdentityPoolInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_1DescribeIdentityCommand = async (input, context)=>{
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.DescribeIdentity"
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeIdentityInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_1DescribeIdentityPoolCommand = async (input, context)=>{
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.DescribeIdentityPool"
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1DescribeIdentityPoolInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_1GetCredentialsForIdentityCommand = async (input, context)=>{
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.GetCredentialsForIdentity"
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetCredentialsForIdentityInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_1GetIdCommand = async (input, context)=>{
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.GetId"
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetIdInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_1GetIdentityPoolRolesCommand = async (input, context)=>{
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.GetIdentityPoolRoles"
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetIdentityPoolRolesInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_1GetOpenIdTokenCommand = async (input, context)=>{
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.GetOpenIdToken"
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetOpenIdTokenInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_1GetOpenIdTokenForDeveloperIdentityCommand = async (input, context)=>{
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.GetOpenIdTokenForDeveloperIdentity"
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetOpenIdTokenForDeveloperIdentityInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_1GetPrincipalTagAttributeMapCommand = async (input, context)=>{
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.GetPrincipalTagAttributeMap"
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1GetPrincipalTagAttributeMapInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_1ListIdentitiesCommand = async (input, context)=>{
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.ListIdentities"
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListIdentitiesInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_1ListIdentityPoolsCommand = async (input, context)=>{
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.ListIdentityPools"
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListIdentityPoolsInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_1ListTagsForResourceCommand = async (input, context)=>{
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.ListTagsForResource"
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1ListTagsForResourceInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_1LookupDeveloperIdentityCommand = async (input, context)=>{
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.LookupDeveloperIdentity"
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1LookupDeveloperIdentityInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_1MergeDeveloperIdentitiesCommand = async (input, context)=>{
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.MergeDeveloperIdentities"
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1MergeDeveloperIdentitiesInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_1SetIdentityPoolRolesCommand = async (input, context)=>{
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.SetIdentityPoolRoles"
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1SetIdentityPoolRolesInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_1SetPrincipalTagAttributeMapCommand = async (input, context)=>{
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.SetPrincipalTagAttributeMap"
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1SetPrincipalTagAttributeMapInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_1TagResourceCommand = async (input, context)=>{
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.TagResource"
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1TagResourceInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_1UnlinkDeveloperIdentityCommand = async (input, context)=>{
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.UnlinkDeveloperIdentity"
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UnlinkDeveloperIdentityInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_1UnlinkIdentityCommand = async (input, context)=>{
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.UnlinkIdentity"
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UnlinkIdentityInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_1UntagResourceCommand = async (input, context)=>{
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.UntagResource"
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1UntagResourceInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_1UpdateIdentityPoolCommand = async (input, context)=>{
    const headers = {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": "AWSCognitoIdentityService.UpdateIdentityPool"
    };
    let body;
    body = JSON.stringify(serializeAws_json1_1IdentityPool(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const deserializeAws_json1_1CreateIdentityPoolCommand = async (output, context)=>{
    if (output.statusCode >= 300) return deserializeAws_json1_1CreateIdentityPoolCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1IdentityPool(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1CreateIdentityPoolCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalErrorException":
        case "com.amazonaws.cognitoidentity#InternalErrorException":
            throw await deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.cognitoidentity#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.cognitoidentity#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotAuthorizedException":
        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
            throw await deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.cognitoidentity#ResourceConflictException":
            throw await deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
            throw await deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, _smithyClient.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: (0, _cognitoIdentityServiceException.CognitoIdentityServiceException),
                errorCode
            });
    }
};
const deserializeAws_json1_1DeleteIdentitiesCommand = async (output, context)=>{
    if (output.statusCode >= 300) return deserializeAws_json1_1DeleteIdentitiesCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1DeleteIdentitiesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DeleteIdentitiesCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalErrorException":
        case "com.amazonaws.cognitoidentity#InternalErrorException":
            throw await deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.cognitoidentity#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
            throw await deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, _smithyClient.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: (0, _cognitoIdentityServiceException.CognitoIdentityServiceException),
                errorCode
            });
    }
};
const deserializeAws_json1_1DeleteIdentityPoolCommand = async (output, context)=>{
    if (output.statusCode >= 300) return deserializeAws_json1_1DeleteIdentityPoolCommandError(output, context);
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output)
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DeleteIdentityPoolCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalErrorException":
        case "com.amazonaws.cognitoidentity#InternalErrorException":
            throw await deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.cognitoidentity#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "NotAuthorizedException":
        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
            throw await deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
            throw await deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, _smithyClient.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: (0, _cognitoIdentityServiceException.CognitoIdentityServiceException),
                errorCode
            });
    }
};
const deserializeAws_json1_1DescribeIdentityCommand = async (output, context)=>{
    if (output.statusCode >= 300) return deserializeAws_json1_1DescribeIdentityCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1IdentityDescription(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DescribeIdentityCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalErrorException":
        case "com.amazonaws.cognitoidentity#InternalErrorException":
            throw await deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.cognitoidentity#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "NotAuthorizedException":
        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
            throw await deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
            throw await deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, _smithyClient.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: (0, _cognitoIdentityServiceException.CognitoIdentityServiceException),
                errorCode
            });
    }
};
const deserializeAws_json1_1DescribeIdentityPoolCommand = async (output, context)=>{
    if (output.statusCode >= 300) return deserializeAws_json1_1DescribeIdentityPoolCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1IdentityPool(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1DescribeIdentityPoolCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalErrorException":
        case "com.amazonaws.cognitoidentity#InternalErrorException":
            throw await deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.cognitoidentity#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "NotAuthorizedException":
        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
            throw await deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
            throw await deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, _smithyClient.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: (0, _cognitoIdentityServiceException.CognitoIdentityServiceException),
                errorCode
            });
    }
};
const deserializeAws_json1_1GetCredentialsForIdentityCommand = async (output, context)=>{
    if (output.statusCode >= 300) return deserializeAws_json1_1GetCredentialsForIdentityCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetCredentialsForIdentityResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1GetCredentialsForIdentityCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "ExternalServiceException":
        case "com.amazonaws.cognitoidentity#ExternalServiceException":
            throw await deserializeAws_json1_1ExternalServiceExceptionResponse(parsedOutput, context);
        case "InternalErrorException":
        case "com.amazonaws.cognitoidentity#InternalErrorException":
            throw await deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context);
        case "InvalidIdentityPoolConfigurationException":
        case "com.amazonaws.cognitoidentity#InvalidIdentityPoolConfigurationException":
            throw await deserializeAws_json1_1InvalidIdentityPoolConfigurationExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.cognitoidentity#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "NotAuthorizedException":
        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
            throw await deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.cognitoidentity#ResourceConflictException":
            throw await deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
            throw await deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, _smithyClient.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: (0, _cognitoIdentityServiceException.CognitoIdentityServiceException),
                errorCode
            });
    }
};
const deserializeAws_json1_1GetIdCommand = async (output, context)=>{
    if (output.statusCode >= 300) return deserializeAws_json1_1GetIdCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetIdResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1GetIdCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "ExternalServiceException":
        case "com.amazonaws.cognitoidentity#ExternalServiceException":
            throw await deserializeAws_json1_1ExternalServiceExceptionResponse(parsedOutput, context);
        case "InternalErrorException":
        case "com.amazonaws.cognitoidentity#InternalErrorException":
            throw await deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.cognitoidentity#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.cognitoidentity#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotAuthorizedException":
        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
            throw await deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.cognitoidentity#ResourceConflictException":
            throw await deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
            throw await deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, _smithyClient.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: (0, _cognitoIdentityServiceException.CognitoIdentityServiceException),
                errorCode
            });
    }
};
const deserializeAws_json1_1GetIdentityPoolRolesCommand = async (output, context)=>{
    if (output.statusCode >= 300) return deserializeAws_json1_1GetIdentityPoolRolesCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetIdentityPoolRolesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1GetIdentityPoolRolesCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalErrorException":
        case "com.amazonaws.cognitoidentity#InternalErrorException":
            throw await deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.cognitoidentity#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "NotAuthorizedException":
        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
            throw await deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.cognitoidentity#ResourceConflictException":
            throw await deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
            throw await deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, _smithyClient.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: (0, _cognitoIdentityServiceException.CognitoIdentityServiceException),
                errorCode
            });
    }
};
const deserializeAws_json1_1GetOpenIdTokenCommand = async (output, context)=>{
    if (output.statusCode >= 300) return deserializeAws_json1_1GetOpenIdTokenCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetOpenIdTokenResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1GetOpenIdTokenCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "ExternalServiceException":
        case "com.amazonaws.cognitoidentity#ExternalServiceException":
            throw await deserializeAws_json1_1ExternalServiceExceptionResponse(parsedOutput, context);
        case "InternalErrorException":
        case "com.amazonaws.cognitoidentity#InternalErrorException":
            throw await deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.cognitoidentity#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "NotAuthorizedException":
        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
            throw await deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.cognitoidentity#ResourceConflictException":
            throw await deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
            throw await deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, _smithyClient.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: (0, _cognitoIdentityServiceException.CognitoIdentityServiceException),
                errorCode
            });
    }
};
const deserializeAws_json1_1GetOpenIdTokenForDeveloperIdentityCommand = async (output, context)=>{
    if (output.statusCode >= 300) return deserializeAws_json1_1GetOpenIdTokenForDeveloperIdentityCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetOpenIdTokenForDeveloperIdentityResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1GetOpenIdTokenForDeveloperIdentityCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "DeveloperUserAlreadyRegisteredException":
        case "com.amazonaws.cognitoidentity#DeveloperUserAlreadyRegisteredException":
            throw await deserializeAws_json1_1DeveloperUserAlreadyRegisteredExceptionResponse(parsedOutput, context);
        case "InternalErrorException":
        case "com.amazonaws.cognitoidentity#InternalErrorException":
            throw await deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.cognitoidentity#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "NotAuthorizedException":
        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
            throw await deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.cognitoidentity#ResourceConflictException":
            throw await deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
            throw await deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, _smithyClient.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: (0, _cognitoIdentityServiceException.CognitoIdentityServiceException),
                errorCode
            });
    }
};
const deserializeAws_json1_1GetPrincipalTagAttributeMapCommand = async (output, context)=>{
    if (output.statusCode >= 300) return deserializeAws_json1_1GetPrincipalTagAttributeMapCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1GetPrincipalTagAttributeMapResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1GetPrincipalTagAttributeMapCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalErrorException":
        case "com.amazonaws.cognitoidentity#InternalErrorException":
            throw await deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.cognitoidentity#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "NotAuthorizedException":
        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
            throw await deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
            throw await deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, _smithyClient.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: (0, _cognitoIdentityServiceException.CognitoIdentityServiceException),
                errorCode
            });
    }
};
const deserializeAws_json1_1ListIdentitiesCommand = async (output, context)=>{
    if (output.statusCode >= 300) return deserializeAws_json1_1ListIdentitiesCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListIdentitiesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1ListIdentitiesCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalErrorException":
        case "com.amazonaws.cognitoidentity#InternalErrorException":
            throw await deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.cognitoidentity#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "NotAuthorizedException":
        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
            throw await deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
            throw await deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, _smithyClient.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: (0, _cognitoIdentityServiceException.CognitoIdentityServiceException),
                errorCode
            });
    }
};
const deserializeAws_json1_1ListIdentityPoolsCommand = async (output, context)=>{
    if (output.statusCode >= 300) return deserializeAws_json1_1ListIdentityPoolsCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListIdentityPoolsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1ListIdentityPoolsCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalErrorException":
        case "com.amazonaws.cognitoidentity#InternalErrorException":
            throw await deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.cognitoidentity#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "NotAuthorizedException":
        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
            throw await deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
            throw await deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, _smithyClient.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: (0, _cognitoIdentityServiceException.CognitoIdentityServiceException),
                errorCode
            });
    }
};
const deserializeAws_json1_1ListTagsForResourceCommand = async (output, context)=>{
    if (output.statusCode >= 300) return deserializeAws_json1_1ListTagsForResourceCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1ListTagsForResourceResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1ListTagsForResourceCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalErrorException":
        case "com.amazonaws.cognitoidentity#InternalErrorException":
            throw await deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.cognitoidentity#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "NotAuthorizedException":
        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
            throw await deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
            throw await deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, _smithyClient.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: (0, _cognitoIdentityServiceException.CognitoIdentityServiceException),
                errorCode
            });
    }
};
const deserializeAws_json1_1LookupDeveloperIdentityCommand = async (output, context)=>{
    if (output.statusCode >= 300) return deserializeAws_json1_1LookupDeveloperIdentityCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1LookupDeveloperIdentityResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1LookupDeveloperIdentityCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalErrorException":
        case "com.amazonaws.cognitoidentity#InternalErrorException":
            throw await deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.cognitoidentity#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "NotAuthorizedException":
        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
            throw await deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.cognitoidentity#ResourceConflictException":
            throw await deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
            throw await deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, _smithyClient.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: (0, _cognitoIdentityServiceException.CognitoIdentityServiceException),
                errorCode
            });
    }
};
const deserializeAws_json1_1MergeDeveloperIdentitiesCommand = async (output, context)=>{
    if (output.statusCode >= 300) return deserializeAws_json1_1MergeDeveloperIdentitiesCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1MergeDeveloperIdentitiesResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1MergeDeveloperIdentitiesCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalErrorException":
        case "com.amazonaws.cognitoidentity#InternalErrorException":
            throw await deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.cognitoidentity#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "NotAuthorizedException":
        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
            throw await deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.cognitoidentity#ResourceConflictException":
            throw await deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
            throw await deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, _smithyClient.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: (0, _cognitoIdentityServiceException.CognitoIdentityServiceException),
                errorCode
            });
    }
};
const deserializeAws_json1_1SetIdentityPoolRolesCommand = async (output, context)=>{
    if (output.statusCode >= 300) return deserializeAws_json1_1SetIdentityPoolRolesCommandError(output, context);
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output)
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1SetIdentityPoolRolesCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "ConcurrentModificationException":
        case "com.amazonaws.cognitoidentity#ConcurrentModificationException":
            throw await deserializeAws_json1_1ConcurrentModificationExceptionResponse(parsedOutput, context);
        case "InternalErrorException":
        case "com.amazonaws.cognitoidentity#InternalErrorException":
            throw await deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.cognitoidentity#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "NotAuthorizedException":
        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
            throw await deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.cognitoidentity#ResourceConflictException":
            throw await deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
            throw await deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, _smithyClient.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: (0, _cognitoIdentityServiceException.CognitoIdentityServiceException),
                errorCode
            });
    }
};
const deserializeAws_json1_1SetPrincipalTagAttributeMapCommand = async (output, context)=>{
    if (output.statusCode >= 300) return deserializeAws_json1_1SetPrincipalTagAttributeMapCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1SetPrincipalTagAttributeMapResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1SetPrincipalTagAttributeMapCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalErrorException":
        case "com.amazonaws.cognitoidentity#InternalErrorException":
            throw await deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.cognitoidentity#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "NotAuthorizedException":
        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
            throw await deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
            throw await deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, _smithyClient.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: (0, _cognitoIdentityServiceException.CognitoIdentityServiceException),
                errorCode
            });
    }
};
const deserializeAws_json1_1TagResourceCommand = async (output, context)=>{
    if (output.statusCode >= 300) return deserializeAws_json1_1TagResourceCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1TagResourceResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1TagResourceCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalErrorException":
        case "com.amazonaws.cognitoidentity#InternalErrorException":
            throw await deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.cognitoidentity#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "NotAuthorizedException":
        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
            throw await deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
            throw await deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, _smithyClient.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: (0, _cognitoIdentityServiceException.CognitoIdentityServiceException),
                errorCode
            });
    }
};
const deserializeAws_json1_1UnlinkDeveloperIdentityCommand = async (output, context)=>{
    if (output.statusCode >= 300) return deserializeAws_json1_1UnlinkDeveloperIdentityCommandError(output, context);
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output)
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1UnlinkDeveloperIdentityCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalErrorException":
        case "com.amazonaws.cognitoidentity#InternalErrorException":
            throw await deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.cognitoidentity#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "NotAuthorizedException":
        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
            throw await deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.cognitoidentity#ResourceConflictException":
            throw await deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
            throw await deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, _smithyClient.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: (0, _cognitoIdentityServiceException.CognitoIdentityServiceException),
                errorCode
            });
    }
};
const deserializeAws_json1_1UnlinkIdentityCommand = async (output, context)=>{
    if (output.statusCode >= 300) return deserializeAws_json1_1UnlinkIdentityCommandError(output, context);
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output)
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1UnlinkIdentityCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "ExternalServiceException":
        case "com.amazonaws.cognitoidentity#ExternalServiceException":
            throw await deserializeAws_json1_1ExternalServiceExceptionResponse(parsedOutput, context);
        case "InternalErrorException":
        case "com.amazonaws.cognitoidentity#InternalErrorException":
            throw await deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.cognitoidentity#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "NotAuthorizedException":
        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
            throw await deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.cognitoidentity#ResourceConflictException":
            throw await deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
            throw await deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, _smithyClient.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: (0, _cognitoIdentityServiceException.CognitoIdentityServiceException),
                errorCode
            });
    }
};
const deserializeAws_json1_1UntagResourceCommand = async (output, context)=>{
    if (output.statusCode >= 300) return deserializeAws_json1_1UntagResourceCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1UntagResourceResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1UntagResourceCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalErrorException":
        case "com.amazonaws.cognitoidentity#InternalErrorException":
            throw await deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.cognitoidentity#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "NotAuthorizedException":
        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
            throw await deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
            throw await deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, _smithyClient.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: (0, _cognitoIdentityServiceException.CognitoIdentityServiceException),
                errorCode
            });
    }
};
const deserializeAws_json1_1UpdateIdentityPoolCommand = async (output, context)=>{
    if (output.statusCode >= 300) return deserializeAws_json1_1UpdateIdentityPoolCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_1IdentityPool(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_1UpdateIdentityPoolCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "ConcurrentModificationException":
        case "com.amazonaws.cognitoidentity#ConcurrentModificationException":
            throw await deserializeAws_json1_1ConcurrentModificationExceptionResponse(parsedOutput, context);
        case "InternalErrorException":
        case "com.amazonaws.cognitoidentity#InternalErrorException":
            throw await deserializeAws_json1_1InternalErrorExceptionResponse(parsedOutput, context);
        case "InvalidParameterException":
        case "com.amazonaws.cognitoidentity#InvalidParameterException":
            throw await deserializeAws_json1_1InvalidParameterExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.cognitoidentity#LimitExceededException":
            throw await deserializeAws_json1_1LimitExceededExceptionResponse(parsedOutput, context);
        case "NotAuthorizedException":
        case "com.amazonaws.cognitoidentity#NotAuthorizedException":
            throw await deserializeAws_json1_1NotAuthorizedExceptionResponse(parsedOutput, context);
        case "ResourceConflictException":
        case "com.amazonaws.cognitoidentity#ResourceConflictException":
            throw await deserializeAws_json1_1ResourceConflictExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.cognitoidentity#ResourceNotFoundException":
            throw await deserializeAws_json1_1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.cognitoidentity#TooManyRequestsException":
            throw await deserializeAws_json1_1TooManyRequestsExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, _smithyClient.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: (0, _cognitoIdentityServiceException.CognitoIdentityServiceException),
                errorCode
            });
    }
};
const deserializeAws_json1_1ConcurrentModificationExceptionResponse = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1ConcurrentModificationException(body, context);
    const exception = new (0, _models0.ConcurrentModificationException)({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, _smithyClient.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1DeveloperUserAlreadyRegisteredExceptionResponse = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1DeveloperUserAlreadyRegisteredException(body, context);
    const exception = new (0, _models0.DeveloperUserAlreadyRegisteredException)({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, _smithyClient.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1ExternalServiceExceptionResponse = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1ExternalServiceException(body, context);
    const exception = new (0, _models0.ExternalServiceException)({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, _smithyClient.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1InternalErrorExceptionResponse = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1InternalErrorException(body, context);
    const exception = new (0, _models0.InternalErrorException)({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, _smithyClient.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1InvalidIdentityPoolConfigurationExceptionResponse = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1InvalidIdentityPoolConfigurationException(body, context);
    const exception = new (0, _models0.InvalidIdentityPoolConfigurationException)({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, _smithyClient.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1InvalidParameterExceptionResponse = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1InvalidParameterException(body, context);
    const exception = new (0, _models0.InvalidParameterException)({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, _smithyClient.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1LimitExceededExceptionResponse = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1LimitExceededException(body, context);
    const exception = new (0, _models0.LimitExceededException)({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, _smithyClient.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1NotAuthorizedExceptionResponse = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1NotAuthorizedException(body, context);
    const exception = new (0, _models0.NotAuthorizedException)({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, _smithyClient.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1ResourceConflictExceptionResponse = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1ResourceConflictException(body, context);
    const exception = new (0, _models0.ResourceConflictException)({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, _smithyClient.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1ResourceNotFoundExceptionResponse = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1ResourceNotFoundException(body, context);
    const exception = new (0, _models0.ResourceNotFoundException)({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, _smithyClient.decorateServiceException)(exception, body);
};
const deserializeAws_json1_1TooManyRequestsExceptionResponse = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_1TooManyRequestsException(body, context);
    const exception = new (0, _models0.TooManyRequestsException)({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, _smithyClient.decorateServiceException)(exception, body);
};
const serializeAws_json1_1CognitoIdentityProvider = (input, context)=>{
    return {
        ...input.ClientId != null && {
            ClientId: input.ClientId
        },
        ...input.ProviderName != null && {
            ProviderName: input.ProviderName
        },
        ...input.ServerSideTokenCheck != null && {
            ServerSideTokenCheck: input.ServerSideTokenCheck
        }
    };
};
const serializeAws_json1_1CognitoIdentityProviderList = (input, context)=>{
    return input.filter((e)=>e != null).map((entry)=>{
        return serializeAws_json1_1CognitoIdentityProvider(entry, context);
    });
};
const serializeAws_json1_1CreateIdentityPoolInput = (input, context)=>{
    return {
        ...input.AllowClassicFlow != null && {
            AllowClassicFlow: input.AllowClassicFlow
        },
        ...input.AllowUnauthenticatedIdentities != null && {
            AllowUnauthenticatedIdentities: input.AllowUnauthenticatedIdentities
        },
        ...input.CognitoIdentityProviders != null && {
            CognitoIdentityProviders: serializeAws_json1_1CognitoIdentityProviderList(input.CognitoIdentityProviders, context)
        },
        ...input.DeveloperProviderName != null && {
            DeveloperProviderName: input.DeveloperProviderName
        },
        ...input.IdentityPoolName != null && {
            IdentityPoolName: input.IdentityPoolName
        },
        ...input.IdentityPoolTags != null && {
            IdentityPoolTags: serializeAws_json1_1IdentityPoolTagsType(input.IdentityPoolTags, context)
        },
        ...input.OpenIdConnectProviderARNs != null && {
            OpenIdConnectProviderARNs: serializeAws_json1_1OIDCProviderList(input.OpenIdConnectProviderARNs, context)
        },
        ...input.SamlProviderARNs != null && {
            SamlProviderARNs: serializeAws_json1_1SAMLProviderList(input.SamlProviderARNs, context)
        },
        ...input.SupportedLoginProviders != null && {
            SupportedLoginProviders: serializeAws_json1_1IdentityProviders(input.SupportedLoginProviders, context)
        }
    };
};
const serializeAws_json1_1DeleteIdentitiesInput = (input, context)=>{
    return {
        ...input.IdentityIdsToDelete != null && {
            IdentityIdsToDelete: serializeAws_json1_1IdentityIdList(input.IdentityIdsToDelete, context)
        }
    };
};
const serializeAws_json1_1DeleteIdentityPoolInput = (input, context)=>{
    return {
        ...input.IdentityPoolId != null && {
            IdentityPoolId: input.IdentityPoolId
        }
    };
};
const serializeAws_json1_1DescribeIdentityInput = (input, context)=>{
    return {
        ...input.IdentityId != null && {
            IdentityId: input.IdentityId
        }
    };
};
const serializeAws_json1_1DescribeIdentityPoolInput = (input, context)=>{
    return {
        ...input.IdentityPoolId != null && {
            IdentityPoolId: input.IdentityPoolId
        }
    };
};
const serializeAws_json1_1GetCredentialsForIdentityInput = (input, context)=>{
    return {
        ...input.CustomRoleArn != null && {
            CustomRoleArn: input.CustomRoleArn
        },
        ...input.IdentityId != null && {
            IdentityId: input.IdentityId
        },
        ...input.Logins != null && {
            Logins: serializeAws_json1_1LoginsMap(input.Logins, context)
        }
    };
};
const serializeAws_json1_1GetIdentityPoolRolesInput = (input, context)=>{
    return {
        ...input.IdentityPoolId != null && {
            IdentityPoolId: input.IdentityPoolId
        }
    };
};
const serializeAws_json1_1GetIdInput = (input, context)=>{
    return {
        ...input.AccountId != null && {
            AccountId: input.AccountId
        },
        ...input.IdentityPoolId != null && {
            IdentityPoolId: input.IdentityPoolId
        },
        ...input.Logins != null && {
            Logins: serializeAws_json1_1LoginsMap(input.Logins, context)
        }
    };
};
const serializeAws_json1_1GetOpenIdTokenForDeveloperIdentityInput = (input, context)=>{
    return {
        ...input.IdentityId != null && {
            IdentityId: input.IdentityId
        },
        ...input.IdentityPoolId != null && {
            IdentityPoolId: input.IdentityPoolId
        },
        ...input.Logins != null && {
            Logins: serializeAws_json1_1LoginsMap(input.Logins, context)
        },
        ...input.PrincipalTags != null && {
            PrincipalTags: serializeAws_json1_1PrincipalTags(input.PrincipalTags, context)
        },
        ...input.TokenDuration != null && {
            TokenDuration: input.TokenDuration
        }
    };
};
const serializeAws_json1_1GetOpenIdTokenInput = (input, context)=>{
    return {
        ...input.IdentityId != null && {
            IdentityId: input.IdentityId
        },
        ...input.Logins != null && {
            Logins: serializeAws_json1_1LoginsMap(input.Logins, context)
        }
    };
};
const serializeAws_json1_1GetPrincipalTagAttributeMapInput = (input, context)=>{
    return {
        ...input.IdentityPoolId != null && {
            IdentityPoolId: input.IdentityPoolId
        },
        ...input.IdentityProviderName != null && {
            IdentityProviderName: input.IdentityProviderName
        }
    };
};
const serializeAws_json1_1IdentityIdList = (input, context)=>{
    return input.filter((e)=>e != null).map((entry)=>{
        return entry;
    });
};
const serializeAws_json1_1IdentityPool = (input, context)=>{
    return {
        ...input.AllowClassicFlow != null && {
            AllowClassicFlow: input.AllowClassicFlow
        },
        ...input.AllowUnauthenticatedIdentities != null && {
            AllowUnauthenticatedIdentities: input.AllowUnauthenticatedIdentities
        },
        ...input.CognitoIdentityProviders != null && {
            CognitoIdentityProviders: serializeAws_json1_1CognitoIdentityProviderList(input.CognitoIdentityProviders, context)
        },
        ...input.DeveloperProviderName != null && {
            DeveloperProviderName: input.DeveloperProviderName
        },
        ...input.IdentityPoolId != null && {
            IdentityPoolId: input.IdentityPoolId
        },
        ...input.IdentityPoolName != null && {
            IdentityPoolName: input.IdentityPoolName
        },
        ...input.IdentityPoolTags != null && {
            IdentityPoolTags: serializeAws_json1_1IdentityPoolTagsType(input.IdentityPoolTags, context)
        },
        ...input.OpenIdConnectProviderARNs != null && {
            OpenIdConnectProviderARNs: serializeAws_json1_1OIDCProviderList(input.OpenIdConnectProviderARNs, context)
        },
        ...input.SamlProviderARNs != null && {
            SamlProviderARNs: serializeAws_json1_1SAMLProviderList(input.SamlProviderARNs, context)
        },
        ...input.SupportedLoginProviders != null && {
            SupportedLoginProviders: serializeAws_json1_1IdentityProviders(input.SupportedLoginProviders, context)
        }
    };
};
const serializeAws_json1_1IdentityPoolTagsListType = (input, context)=>{
    return input.filter((e)=>e != null).map((entry)=>{
        return entry;
    });
};
const serializeAws_json1_1IdentityPoolTagsType = (input, context)=>{
    return Object.entries(input).reduce((acc, [key, value])=>{
        if (value === null) return acc;
        return {
            ...acc,
            [key]: value
        };
    }, {});
};
const serializeAws_json1_1IdentityProviders = (input, context)=>{
    return Object.entries(input).reduce((acc, [key, value])=>{
        if (value === null) return acc;
        return {
            ...acc,
            [key]: value
        };
    }, {});
};
const serializeAws_json1_1ListIdentitiesInput = (input, context)=>{
    return {
        ...input.HideDisabled != null && {
            HideDisabled: input.HideDisabled
        },
        ...input.IdentityPoolId != null && {
            IdentityPoolId: input.IdentityPoolId
        },
        ...input.MaxResults != null && {
            MaxResults: input.MaxResults
        },
        ...input.NextToken != null && {
            NextToken: input.NextToken
        }
    };
};
const serializeAws_json1_1ListIdentityPoolsInput = (input, context)=>{
    return {
        ...input.MaxResults != null && {
            MaxResults: input.MaxResults
        },
        ...input.NextToken != null && {
            NextToken: input.NextToken
        }
    };
};
const serializeAws_json1_1ListTagsForResourceInput = (input, context)=>{
    return {
        ...input.ResourceArn != null && {
            ResourceArn: input.ResourceArn
        }
    };
};
const serializeAws_json1_1LoginsList = (input, context)=>{
    return input.filter((e)=>e != null).map((entry)=>{
        return entry;
    });
};
const serializeAws_json1_1LoginsMap = (input, context)=>{
    return Object.entries(input).reduce((acc, [key, value])=>{
        if (value === null) return acc;
        return {
            ...acc,
            [key]: value
        };
    }, {});
};
const serializeAws_json1_1LookupDeveloperIdentityInput = (input, context)=>{
    return {
        ...input.DeveloperUserIdentifier != null && {
            DeveloperUserIdentifier: input.DeveloperUserIdentifier
        },
        ...input.IdentityId != null && {
            IdentityId: input.IdentityId
        },
        ...input.IdentityPoolId != null && {
            IdentityPoolId: input.IdentityPoolId
        },
        ...input.MaxResults != null && {
            MaxResults: input.MaxResults
        },
        ...input.NextToken != null && {
            NextToken: input.NextToken
        }
    };
};
const serializeAws_json1_1MappingRule = (input, context)=>{
    return {
        ...input.Claim != null && {
            Claim: input.Claim
        },
        ...input.MatchType != null && {
            MatchType: input.MatchType
        },
        ...input.RoleARN != null && {
            RoleARN: input.RoleARN
        },
        ...input.Value != null && {
            Value: input.Value
        }
    };
};
const serializeAws_json1_1MappingRulesList = (input, context)=>{
    return input.filter((e)=>e != null).map((entry)=>{
        return serializeAws_json1_1MappingRule(entry, context);
    });
};
const serializeAws_json1_1MergeDeveloperIdentitiesInput = (input, context)=>{
    return {
        ...input.DestinationUserIdentifier != null && {
            DestinationUserIdentifier: input.DestinationUserIdentifier
        },
        ...input.DeveloperProviderName != null && {
            DeveloperProviderName: input.DeveloperProviderName
        },
        ...input.IdentityPoolId != null && {
            IdentityPoolId: input.IdentityPoolId
        },
        ...input.SourceUserIdentifier != null && {
            SourceUserIdentifier: input.SourceUserIdentifier
        }
    };
};
const serializeAws_json1_1OIDCProviderList = (input, context)=>{
    return input.filter((e)=>e != null).map((entry)=>{
        return entry;
    });
};
const serializeAws_json1_1PrincipalTags = (input, context)=>{
    return Object.entries(input).reduce((acc, [key, value])=>{
        if (value === null) return acc;
        return {
            ...acc,
            [key]: value
        };
    }, {});
};
const serializeAws_json1_1RoleMapping = (input, context)=>{
    return {
        ...input.AmbiguousRoleResolution != null && {
            AmbiguousRoleResolution: input.AmbiguousRoleResolution
        },
        ...input.RulesConfiguration != null && {
            RulesConfiguration: serializeAws_json1_1RulesConfigurationType(input.RulesConfiguration, context)
        },
        ...input.Type != null && {
            Type: input.Type
        }
    };
};
const serializeAws_json1_1RoleMappingMap = (input, context)=>{
    return Object.entries(input).reduce((acc, [key, value])=>{
        if (value === null) return acc;
        return {
            ...acc,
            [key]: serializeAws_json1_1RoleMapping(value, context)
        };
    }, {});
};
const serializeAws_json1_1RolesMap = (input, context)=>{
    return Object.entries(input).reduce((acc, [key, value])=>{
        if (value === null) return acc;
        return {
            ...acc,
            [key]: value
        };
    }, {});
};
const serializeAws_json1_1RulesConfigurationType = (input, context)=>{
    return {
        ...input.Rules != null && {
            Rules: serializeAws_json1_1MappingRulesList(input.Rules, context)
        }
    };
};
const serializeAws_json1_1SAMLProviderList = (input, context)=>{
    return input.filter((e)=>e != null).map((entry)=>{
        return entry;
    });
};
const serializeAws_json1_1SetIdentityPoolRolesInput = (input, context)=>{
    return {
        ...input.IdentityPoolId != null && {
            IdentityPoolId: input.IdentityPoolId
        },
        ...input.RoleMappings != null && {
            RoleMappings: serializeAws_json1_1RoleMappingMap(input.RoleMappings, context)
        },
        ...input.Roles != null && {
            Roles: serializeAws_json1_1RolesMap(input.Roles, context)
        }
    };
};
const serializeAws_json1_1SetPrincipalTagAttributeMapInput = (input, context)=>{
    return {
        ...input.IdentityPoolId != null && {
            IdentityPoolId: input.IdentityPoolId
        },
        ...input.IdentityProviderName != null && {
            IdentityProviderName: input.IdentityProviderName
        },
        ...input.PrincipalTags != null && {
            PrincipalTags: serializeAws_json1_1PrincipalTags(input.PrincipalTags, context)
        },
        ...input.UseDefaults != null && {
            UseDefaults: input.UseDefaults
        }
    };
};
const serializeAws_json1_1TagResourceInput = (input, context)=>{
    return {
        ...input.ResourceArn != null && {
            ResourceArn: input.ResourceArn
        },
        ...input.Tags != null && {
            Tags: serializeAws_json1_1IdentityPoolTagsType(input.Tags, context)
        }
    };
};
const serializeAws_json1_1UnlinkDeveloperIdentityInput = (input, context)=>{
    return {
        ...input.DeveloperProviderName != null && {
            DeveloperProviderName: input.DeveloperProviderName
        },
        ...input.DeveloperUserIdentifier != null && {
            DeveloperUserIdentifier: input.DeveloperUserIdentifier
        },
        ...input.IdentityId != null && {
            IdentityId: input.IdentityId
        },
        ...input.IdentityPoolId != null && {
            IdentityPoolId: input.IdentityPoolId
        }
    };
};
const serializeAws_json1_1UnlinkIdentityInput = (input, context)=>{
    return {
        ...input.IdentityId != null && {
            IdentityId: input.IdentityId
        },
        ...input.Logins != null && {
            Logins: serializeAws_json1_1LoginsMap(input.Logins, context)
        },
        ...input.LoginsToRemove != null && {
            LoginsToRemove: serializeAws_json1_1LoginsList(input.LoginsToRemove, context)
        }
    };
};
const serializeAws_json1_1UntagResourceInput = (input, context)=>{
    return {
        ...input.ResourceArn != null && {
            ResourceArn: input.ResourceArn
        },
        ...input.TagKeys != null && {
            TagKeys: serializeAws_json1_1IdentityPoolTagsListType(input.TagKeys, context)
        }
    };
};
const deserializeAws_json1_1CognitoIdentityProvider = (output, context)=>{
    return {
        ClientId: (0, _smithyClient.expectString)(output.ClientId),
        ProviderName: (0, _smithyClient.expectString)(output.ProviderName),
        ServerSideTokenCheck: (0, _smithyClient.expectBoolean)(output.ServerSideTokenCheck)
    };
};
const deserializeAws_json1_1CognitoIdentityProviderList = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        if (entry === null) return null;
        return deserializeAws_json1_1CognitoIdentityProvider(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1ConcurrentModificationException = (output, context)=>{
    return {
        message: (0, _smithyClient.expectString)(output.message)
    };
};
const deserializeAws_json1_1Credentials = (output, context)=>{
    return {
        AccessKeyId: (0, _smithyClient.expectString)(output.AccessKeyId),
        Expiration: output.Expiration != null ? (0, _smithyClient.expectNonNull)((0, _smithyClient.parseEpochTimestamp)((0, _smithyClient.expectNumber)(output.Expiration))) : undefined,
        SecretKey: (0, _smithyClient.expectString)(output.SecretKey),
        SessionToken: (0, _smithyClient.expectString)(output.SessionToken)
    };
};
const deserializeAws_json1_1DeleteIdentitiesResponse = (output, context)=>{
    return {
        UnprocessedIdentityIds: output.UnprocessedIdentityIds != null ? deserializeAws_json1_1UnprocessedIdentityIdList(output.UnprocessedIdentityIds, context) : undefined
    };
};
const deserializeAws_json1_1DeveloperUserAlreadyRegisteredException = (output, context)=>{
    return {
        message: (0, _smithyClient.expectString)(output.message)
    };
};
const deserializeAws_json1_1DeveloperUserIdentifierList = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        if (entry === null) return null;
        return (0, _smithyClient.expectString)(entry);
    });
    return retVal;
};
const deserializeAws_json1_1ExternalServiceException = (output, context)=>{
    return {
        message: (0, _smithyClient.expectString)(output.message)
    };
};
const deserializeAws_json1_1GetCredentialsForIdentityResponse = (output, context)=>{
    return {
        Credentials: output.Credentials != null ? deserializeAws_json1_1Credentials(output.Credentials, context) : undefined,
        IdentityId: (0, _smithyClient.expectString)(output.IdentityId)
    };
};
const deserializeAws_json1_1GetIdentityPoolRolesResponse = (output, context)=>{
    return {
        IdentityPoolId: (0, _smithyClient.expectString)(output.IdentityPoolId),
        RoleMappings: output.RoleMappings != null ? deserializeAws_json1_1RoleMappingMap(output.RoleMappings, context) : undefined,
        Roles: output.Roles != null ? deserializeAws_json1_1RolesMap(output.Roles, context) : undefined
    };
};
const deserializeAws_json1_1GetIdResponse = (output, context)=>{
    return {
        IdentityId: (0, _smithyClient.expectString)(output.IdentityId)
    };
};
const deserializeAws_json1_1GetOpenIdTokenForDeveloperIdentityResponse = (output, context)=>{
    return {
        IdentityId: (0, _smithyClient.expectString)(output.IdentityId),
        Token: (0, _smithyClient.expectString)(output.Token)
    };
};
const deserializeAws_json1_1GetOpenIdTokenResponse = (output, context)=>{
    return {
        IdentityId: (0, _smithyClient.expectString)(output.IdentityId),
        Token: (0, _smithyClient.expectString)(output.Token)
    };
};
const deserializeAws_json1_1GetPrincipalTagAttributeMapResponse = (output, context)=>{
    return {
        IdentityPoolId: (0, _smithyClient.expectString)(output.IdentityPoolId),
        IdentityProviderName: (0, _smithyClient.expectString)(output.IdentityProviderName),
        PrincipalTags: output.PrincipalTags != null ? deserializeAws_json1_1PrincipalTags(output.PrincipalTags, context) : undefined,
        UseDefaults: (0, _smithyClient.expectBoolean)(output.UseDefaults)
    };
};
const deserializeAws_json1_1IdentitiesList = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        if (entry === null) return null;
        return deserializeAws_json1_1IdentityDescription(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1IdentityDescription = (output, context)=>{
    return {
        CreationDate: output.CreationDate != null ? (0, _smithyClient.expectNonNull)((0, _smithyClient.parseEpochTimestamp)((0, _smithyClient.expectNumber)(output.CreationDate))) : undefined,
        IdentityId: (0, _smithyClient.expectString)(output.IdentityId),
        LastModifiedDate: output.LastModifiedDate != null ? (0, _smithyClient.expectNonNull)((0, _smithyClient.parseEpochTimestamp)((0, _smithyClient.expectNumber)(output.LastModifiedDate))) : undefined,
        Logins: output.Logins != null ? deserializeAws_json1_1LoginsList(output.Logins, context) : undefined
    };
};
const deserializeAws_json1_1IdentityPool = (output, context)=>{
    return {
        AllowClassicFlow: (0, _smithyClient.expectBoolean)(output.AllowClassicFlow),
        AllowUnauthenticatedIdentities: (0, _smithyClient.expectBoolean)(output.AllowUnauthenticatedIdentities),
        CognitoIdentityProviders: output.CognitoIdentityProviders != null ? deserializeAws_json1_1CognitoIdentityProviderList(output.CognitoIdentityProviders, context) : undefined,
        DeveloperProviderName: (0, _smithyClient.expectString)(output.DeveloperProviderName),
        IdentityPoolId: (0, _smithyClient.expectString)(output.IdentityPoolId),
        IdentityPoolName: (0, _smithyClient.expectString)(output.IdentityPoolName),
        IdentityPoolTags: output.IdentityPoolTags != null ? deserializeAws_json1_1IdentityPoolTagsType(output.IdentityPoolTags, context) : undefined,
        OpenIdConnectProviderARNs: output.OpenIdConnectProviderARNs != null ? deserializeAws_json1_1OIDCProviderList(output.OpenIdConnectProviderARNs, context) : undefined,
        SamlProviderARNs: output.SamlProviderARNs != null ? deserializeAws_json1_1SAMLProviderList(output.SamlProviderARNs, context) : undefined,
        SupportedLoginProviders: output.SupportedLoginProviders != null ? deserializeAws_json1_1IdentityProviders(output.SupportedLoginProviders, context) : undefined
    };
};
const deserializeAws_json1_1IdentityPoolShortDescription = (output, context)=>{
    return {
        IdentityPoolId: (0, _smithyClient.expectString)(output.IdentityPoolId),
        IdentityPoolName: (0, _smithyClient.expectString)(output.IdentityPoolName)
    };
};
const deserializeAws_json1_1IdentityPoolsList = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        if (entry === null) return null;
        return deserializeAws_json1_1IdentityPoolShortDescription(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1IdentityPoolTagsType = (output, context)=>{
    return Object.entries(output).reduce((acc, [key, value])=>{
        if (value === null) return acc;
        return {
            ...acc,
            [key]: (0, _smithyClient.expectString)(value)
        };
    }, {});
};
const deserializeAws_json1_1IdentityProviders = (output, context)=>{
    return Object.entries(output).reduce((acc, [key, value])=>{
        if (value === null) return acc;
        return {
            ...acc,
            [key]: (0, _smithyClient.expectString)(value)
        };
    }, {});
};
const deserializeAws_json1_1InternalErrorException = (output, context)=>{
    return {
        message: (0, _smithyClient.expectString)(output.message)
    };
};
const deserializeAws_json1_1InvalidIdentityPoolConfigurationException = (output, context)=>{
    return {
        message: (0, _smithyClient.expectString)(output.message)
    };
};
const deserializeAws_json1_1InvalidParameterException = (output, context)=>{
    return {
        message: (0, _smithyClient.expectString)(output.message)
    };
};
const deserializeAws_json1_1LimitExceededException = (output, context)=>{
    return {
        message: (0, _smithyClient.expectString)(output.message)
    };
};
const deserializeAws_json1_1ListIdentitiesResponse = (output, context)=>{
    return {
        Identities: output.Identities != null ? deserializeAws_json1_1IdentitiesList(output.Identities, context) : undefined,
        IdentityPoolId: (0, _smithyClient.expectString)(output.IdentityPoolId),
        NextToken: (0, _smithyClient.expectString)(output.NextToken)
    };
};
const deserializeAws_json1_1ListIdentityPoolsResponse = (output, context)=>{
    return {
        IdentityPools: output.IdentityPools != null ? deserializeAws_json1_1IdentityPoolsList(output.IdentityPools, context) : undefined,
        NextToken: (0, _smithyClient.expectString)(output.NextToken)
    };
};
const deserializeAws_json1_1ListTagsForResourceResponse = (output, context)=>{
    return {
        Tags: output.Tags != null ? deserializeAws_json1_1IdentityPoolTagsType(output.Tags, context) : undefined
    };
};
const deserializeAws_json1_1LoginsList = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        if (entry === null) return null;
        return (0, _smithyClient.expectString)(entry);
    });
    return retVal;
};
const deserializeAws_json1_1LookupDeveloperIdentityResponse = (output, context)=>{
    return {
        DeveloperUserIdentifierList: output.DeveloperUserIdentifierList != null ? deserializeAws_json1_1DeveloperUserIdentifierList(output.DeveloperUserIdentifierList, context) : undefined,
        IdentityId: (0, _smithyClient.expectString)(output.IdentityId),
        NextToken: (0, _smithyClient.expectString)(output.NextToken)
    };
};
const deserializeAws_json1_1MappingRule = (output, context)=>{
    return {
        Claim: (0, _smithyClient.expectString)(output.Claim),
        MatchType: (0, _smithyClient.expectString)(output.MatchType),
        RoleARN: (0, _smithyClient.expectString)(output.RoleARN),
        Value: (0, _smithyClient.expectString)(output.Value)
    };
};
const deserializeAws_json1_1MappingRulesList = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        if (entry === null) return null;
        return deserializeAws_json1_1MappingRule(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1MergeDeveloperIdentitiesResponse = (output, context)=>{
    return {
        IdentityId: (0, _smithyClient.expectString)(output.IdentityId)
    };
};
const deserializeAws_json1_1NotAuthorizedException = (output, context)=>{
    return {
        message: (0, _smithyClient.expectString)(output.message)
    };
};
const deserializeAws_json1_1OIDCProviderList = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        if (entry === null) return null;
        return (0, _smithyClient.expectString)(entry);
    });
    return retVal;
};
const deserializeAws_json1_1PrincipalTags = (output, context)=>{
    return Object.entries(output).reduce((acc, [key, value])=>{
        if (value === null) return acc;
        return {
            ...acc,
            [key]: (0, _smithyClient.expectString)(value)
        };
    }, {});
};
const deserializeAws_json1_1ResourceConflictException = (output, context)=>{
    return {
        message: (0, _smithyClient.expectString)(output.message)
    };
};
const deserializeAws_json1_1ResourceNotFoundException = (output, context)=>{
    return {
        message: (0, _smithyClient.expectString)(output.message)
    };
};
const deserializeAws_json1_1RoleMapping = (output, context)=>{
    return {
        AmbiguousRoleResolution: (0, _smithyClient.expectString)(output.AmbiguousRoleResolution),
        RulesConfiguration: output.RulesConfiguration != null ? deserializeAws_json1_1RulesConfigurationType(output.RulesConfiguration, context) : undefined,
        Type: (0, _smithyClient.expectString)(output.Type)
    };
};
const deserializeAws_json1_1RoleMappingMap = (output, context)=>{
    return Object.entries(output).reduce((acc, [key, value])=>{
        if (value === null) return acc;
        return {
            ...acc,
            [key]: deserializeAws_json1_1RoleMapping(value, context)
        };
    }, {});
};
const deserializeAws_json1_1RolesMap = (output, context)=>{
    return Object.entries(output).reduce((acc, [key, value])=>{
        if (value === null) return acc;
        return {
            ...acc,
            [key]: (0, _smithyClient.expectString)(value)
        };
    }, {});
};
const deserializeAws_json1_1RulesConfigurationType = (output, context)=>{
    return {
        Rules: output.Rules != null ? deserializeAws_json1_1MappingRulesList(output.Rules, context) : undefined
    };
};
const deserializeAws_json1_1SAMLProviderList = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        if (entry === null) return null;
        return (0, _smithyClient.expectString)(entry);
    });
    return retVal;
};
const deserializeAws_json1_1SetPrincipalTagAttributeMapResponse = (output, context)=>{
    return {
        IdentityPoolId: (0, _smithyClient.expectString)(output.IdentityPoolId),
        IdentityProviderName: (0, _smithyClient.expectString)(output.IdentityProviderName),
        PrincipalTags: output.PrincipalTags != null ? deserializeAws_json1_1PrincipalTags(output.PrincipalTags, context) : undefined,
        UseDefaults: (0, _smithyClient.expectBoolean)(output.UseDefaults)
    };
};
const deserializeAws_json1_1TagResourceResponse = (output, context)=>{
    return {};
};
const deserializeAws_json1_1TooManyRequestsException = (output, context)=>{
    return {
        message: (0, _smithyClient.expectString)(output.message)
    };
};
const deserializeAws_json1_1UnprocessedIdentityId = (output, context)=>{
    return {
        ErrorCode: (0, _smithyClient.expectString)(output.ErrorCode),
        IdentityId: (0, _smithyClient.expectString)(output.IdentityId)
    };
};
const deserializeAws_json1_1UnprocessedIdentityIdList = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        if (entry === null) return null;
        return deserializeAws_json1_1UnprocessedIdentityId(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_1UntagResourceResponse = (output, context)=>{
    return {};
};
const deserializeMetadata = (output)=>({
        httpStatusCode: output.statusCode,
        requestId: (output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"]) ?? output.headers["x-amz-request-id"],
        extendedRequestId: output.headers["x-amz-id-2"],
        cfId: output.headers["x-amz-cf-id"]
    });
const collectBody = (streamBody = new Uint8Array(), context)=>{
    if (streamBody instanceof Uint8Array) return Promise.resolve(streamBody);
    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
const collectBodyString = (streamBody, context)=>collectBody(streamBody, context).then((body)=>context.utf8Encoder(body));
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers
    };
    if (resolvedHostname !== undefined) contents.hostname = resolvedHostname;
    if (body !== undefined) contents.body = body;
    return new (0, _protocolHttp.HttpRequest)(contents);
};
const parseBody = (streamBody, context)=>collectBodyString(streamBody, context).then((encoded)=>{
        if (encoded.length) return JSON.parse(encoded);
        return {};
    });
const parseErrorBody = async (errorBody, context)=>{
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data)=>{
    const findKey = (object, key)=>Object.keys(object).find((k)=>k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue)=>{
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") cleanValue = cleanValue.toString();
        if (cleanValue.indexOf(",") >= 0) cleanValue = cleanValue.split(",")[0];
        if (cleanValue.indexOf(":") >= 0) cleanValue = cleanValue.split(":")[0];
        if (cleanValue.indexOf("#") >= 0) cleanValue = cleanValue.split("#")[1];
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) return sanitizeErrorCode(output.headers[headerKey]);
    if (data.code !== undefined) return sanitizeErrorCode(data.code);
    if (data["__type"] !== undefined) return sanitizeErrorCode(data["__type"]);
};

},{"@aws-sdk/protocol-http":"lkWtc","@aws-sdk/smithy-client":"ats0l","../models/CognitoIdentityServiceException":"l45dy","../models/models_0":"6yMxE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"c73jn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DeleteIdentitiesCommand", ()=>DeleteIdentitiesCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _middlewareSigning = require("@aws-sdk/middleware-signing");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
class DeleteIdentitiesCommand extends (0, _smithyClient.Command) {
    constructor(input){
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, DeleteIdentitiesCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, _middlewareSigning.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "CognitoIdentityClient";
        const commandName = "DeleteIdentitiesCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.DeleteIdentitiesInputFilterSensitiveLog),
            outputFilterSensitiveLog: (0, _models0.DeleteIdentitiesResponseFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsJson11.serializeAws_json1_1DeleteIdentitiesCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1DeleteIdentitiesCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/middleware-signing":"apx8g","@aws-sdk/smithy-client":"ats0l","../models/models_0":"6yMxE","../protocols/Aws_json1_1":"duUQ4","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2C6yO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DeleteIdentityPoolCommand", ()=>DeleteIdentityPoolCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _middlewareSigning = require("@aws-sdk/middleware-signing");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
class DeleteIdentityPoolCommand extends (0, _smithyClient.Command) {
    constructor(input){
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, DeleteIdentityPoolCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, _middlewareSigning.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "CognitoIdentityClient";
        const commandName = "DeleteIdentityPoolCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.DeleteIdentityPoolInputFilterSensitiveLog),
            outputFilterSensitiveLog: (output)=>output
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsJson11.serializeAws_json1_1DeleteIdentityPoolCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1DeleteIdentityPoolCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/middleware-signing":"apx8g","@aws-sdk/smithy-client":"ats0l","../models/models_0":"6yMxE","../protocols/Aws_json1_1":"duUQ4","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"72SjC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DescribeIdentityCommand", ()=>DescribeIdentityCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _middlewareSigning = require("@aws-sdk/middleware-signing");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
class DescribeIdentityCommand extends (0, _smithyClient.Command) {
    constructor(input){
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, DescribeIdentityCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, _middlewareSigning.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "CognitoIdentityClient";
        const commandName = "DescribeIdentityCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.DescribeIdentityInputFilterSensitiveLog),
            outputFilterSensitiveLog: (0, _models0.IdentityDescriptionFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsJson11.serializeAws_json1_1DescribeIdentityCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1DescribeIdentityCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/middleware-signing":"apx8g","@aws-sdk/smithy-client":"ats0l","../models/models_0":"6yMxE","../protocols/Aws_json1_1":"duUQ4","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eyYuj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DescribeIdentityPoolCommand", ()=>DescribeIdentityPoolCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _middlewareSigning = require("@aws-sdk/middleware-signing");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
class DescribeIdentityPoolCommand extends (0, _smithyClient.Command) {
    constructor(input){
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, DescribeIdentityPoolCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, _middlewareSigning.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "CognitoIdentityClient";
        const commandName = "DescribeIdentityPoolCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.DescribeIdentityPoolInputFilterSensitiveLog),
            outputFilterSensitiveLog: (0, _models0.IdentityPoolFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsJson11.serializeAws_json1_1DescribeIdentityPoolCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1DescribeIdentityPoolCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/middleware-signing":"apx8g","@aws-sdk/smithy-client":"ats0l","../models/models_0":"6yMxE","../protocols/Aws_json1_1":"duUQ4","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"isHNy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "GetCredentialsForIdentityCommand", ()=>GetCredentialsForIdentityCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
class GetCredentialsForIdentityCommand extends (0, _smithyClient.Command) {
    constructor(input){
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, GetCredentialsForIdentityCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "CognitoIdentityClient";
        const commandName = "GetCredentialsForIdentityCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.GetCredentialsForIdentityInputFilterSensitiveLog),
            outputFilterSensitiveLog: (0, _models0.GetCredentialsForIdentityResponseFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsJson11.serializeAws_json1_1GetCredentialsForIdentityCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1GetCredentialsForIdentityCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../models/models_0":"6yMxE","../protocols/Aws_json1_1":"duUQ4","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jviA9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "GetIdCommand", ()=>GetIdCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
class GetIdCommand extends (0, _smithyClient.Command) {
    constructor(input){
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, GetIdCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "CognitoIdentityClient";
        const commandName = "GetIdCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.GetIdInputFilterSensitiveLog),
            outputFilterSensitiveLog: (0, _models0.GetIdResponseFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsJson11.serializeAws_json1_1GetIdCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1GetIdCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../models/models_0":"6yMxE","../protocols/Aws_json1_1":"duUQ4","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"90ZuQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "GetIdentityPoolRolesCommand", ()=>GetIdentityPoolRolesCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _middlewareSigning = require("@aws-sdk/middleware-signing");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
class GetIdentityPoolRolesCommand extends (0, _smithyClient.Command) {
    constructor(input){
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, GetIdentityPoolRolesCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, _middlewareSigning.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "CognitoIdentityClient";
        const commandName = "GetIdentityPoolRolesCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.GetIdentityPoolRolesInputFilterSensitiveLog),
            outputFilterSensitiveLog: (0, _models0.GetIdentityPoolRolesResponseFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsJson11.serializeAws_json1_1GetIdentityPoolRolesCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1GetIdentityPoolRolesCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/middleware-signing":"apx8g","@aws-sdk/smithy-client":"ats0l","../models/models_0":"6yMxE","../protocols/Aws_json1_1":"duUQ4","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"03mCi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "GetOpenIdTokenCommand", ()=>GetOpenIdTokenCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
class GetOpenIdTokenCommand extends (0, _smithyClient.Command) {
    constructor(input){
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, GetOpenIdTokenCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "CognitoIdentityClient";
        const commandName = "GetOpenIdTokenCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.GetOpenIdTokenInputFilterSensitiveLog),
            outputFilterSensitiveLog: (0, _models0.GetOpenIdTokenResponseFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsJson11.serializeAws_json1_1GetOpenIdTokenCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1GetOpenIdTokenCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../models/models_0":"6yMxE","../protocols/Aws_json1_1":"duUQ4","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gHblr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "GetOpenIdTokenForDeveloperIdentityCommand", ()=>GetOpenIdTokenForDeveloperIdentityCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _middlewareSigning = require("@aws-sdk/middleware-signing");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
class GetOpenIdTokenForDeveloperIdentityCommand extends (0, _smithyClient.Command) {
    constructor(input){
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, GetOpenIdTokenForDeveloperIdentityCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, _middlewareSigning.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "CognitoIdentityClient";
        const commandName = "GetOpenIdTokenForDeveloperIdentityCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.GetOpenIdTokenForDeveloperIdentityInputFilterSensitiveLog),
            outputFilterSensitiveLog: (0, _models0.GetOpenIdTokenForDeveloperIdentityResponseFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsJson11.serializeAws_json1_1GetOpenIdTokenForDeveloperIdentityCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1GetOpenIdTokenForDeveloperIdentityCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/middleware-signing":"apx8g","@aws-sdk/smithy-client":"ats0l","../models/models_0":"6yMxE","../protocols/Aws_json1_1":"duUQ4","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7GhkB":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "GetPrincipalTagAttributeMapCommand", ()=>GetPrincipalTagAttributeMapCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _middlewareSigning = require("@aws-sdk/middleware-signing");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
class GetPrincipalTagAttributeMapCommand extends (0, _smithyClient.Command) {
    constructor(input){
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, GetPrincipalTagAttributeMapCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, _middlewareSigning.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "CognitoIdentityClient";
        const commandName = "GetPrincipalTagAttributeMapCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.GetPrincipalTagAttributeMapInputFilterSensitiveLog),
            outputFilterSensitiveLog: (0, _models0.GetPrincipalTagAttributeMapResponseFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsJson11.serializeAws_json1_1GetPrincipalTagAttributeMapCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1GetPrincipalTagAttributeMapCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/middleware-signing":"apx8g","@aws-sdk/smithy-client":"ats0l","../models/models_0":"6yMxE","../protocols/Aws_json1_1":"duUQ4","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cz0Id":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ListIdentitiesCommand", ()=>ListIdentitiesCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _middlewareSigning = require("@aws-sdk/middleware-signing");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
class ListIdentitiesCommand extends (0, _smithyClient.Command) {
    constructor(input){
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, ListIdentitiesCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, _middlewareSigning.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "CognitoIdentityClient";
        const commandName = "ListIdentitiesCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.ListIdentitiesInputFilterSensitiveLog),
            outputFilterSensitiveLog: (0, _models0.ListIdentitiesResponseFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsJson11.serializeAws_json1_1ListIdentitiesCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1ListIdentitiesCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/middleware-signing":"apx8g","@aws-sdk/smithy-client":"ats0l","../models/models_0":"6yMxE","../protocols/Aws_json1_1":"duUQ4","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"51xc6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ListIdentityPoolsCommand", ()=>ListIdentityPoolsCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _middlewareSigning = require("@aws-sdk/middleware-signing");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
class ListIdentityPoolsCommand extends (0, _smithyClient.Command) {
    constructor(input){
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, ListIdentityPoolsCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, _middlewareSigning.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "CognitoIdentityClient";
        const commandName = "ListIdentityPoolsCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.ListIdentityPoolsInputFilterSensitiveLog),
            outputFilterSensitiveLog: (0, _models0.ListIdentityPoolsResponseFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsJson11.serializeAws_json1_1ListIdentityPoolsCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1ListIdentityPoolsCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/middleware-signing":"apx8g","@aws-sdk/smithy-client":"ats0l","../models/models_0":"6yMxE","../protocols/Aws_json1_1":"duUQ4","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hXa95":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ListTagsForResourceCommand", ()=>ListTagsForResourceCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _middlewareSigning = require("@aws-sdk/middleware-signing");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
class ListTagsForResourceCommand extends (0, _smithyClient.Command) {
    constructor(input){
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, ListTagsForResourceCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, _middlewareSigning.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "CognitoIdentityClient";
        const commandName = "ListTagsForResourceCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.ListTagsForResourceInputFilterSensitiveLog),
            outputFilterSensitiveLog: (0, _models0.ListTagsForResourceResponseFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsJson11.serializeAws_json1_1ListTagsForResourceCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1ListTagsForResourceCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/middleware-signing":"apx8g","@aws-sdk/smithy-client":"ats0l","../models/models_0":"6yMxE","../protocols/Aws_json1_1":"duUQ4","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1X66X":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "LookupDeveloperIdentityCommand", ()=>LookupDeveloperIdentityCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _middlewareSigning = require("@aws-sdk/middleware-signing");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
class LookupDeveloperIdentityCommand extends (0, _smithyClient.Command) {
    constructor(input){
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, LookupDeveloperIdentityCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, _middlewareSigning.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "CognitoIdentityClient";
        const commandName = "LookupDeveloperIdentityCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.LookupDeveloperIdentityInputFilterSensitiveLog),
            outputFilterSensitiveLog: (0, _models0.LookupDeveloperIdentityResponseFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsJson11.serializeAws_json1_1LookupDeveloperIdentityCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1LookupDeveloperIdentityCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/middleware-signing":"apx8g","@aws-sdk/smithy-client":"ats0l","../models/models_0":"6yMxE","../protocols/Aws_json1_1":"duUQ4","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jlRz3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "MergeDeveloperIdentitiesCommand", ()=>MergeDeveloperIdentitiesCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _middlewareSigning = require("@aws-sdk/middleware-signing");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
class MergeDeveloperIdentitiesCommand extends (0, _smithyClient.Command) {
    constructor(input){
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, MergeDeveloperIdentitiesCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, _middlewareSigning.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "CognitoIdentityClient";
        const commandName = "MergeDeveloperIdentitiesCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.MergeDeveloperIdentitiesInputFilterSensitiveLog),
            outputFilterSensitiveLog: (0, _models0.MergeDeveloperIdentitiesResponseFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsJson11.serializeAws_json1_1MergeDeveloperIdentitiesCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1MergeDeveloperIdentitiesCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/middleware-signing":"apx8g","@aws-sdk/smithy-client":"ats0l","../models/models_0":"6yMxE","../protocols/Aws_json1_1":"duUQ4","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gvZWh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SetIdentityPoolRolesCommand", ()=>SetIdentityPoolRolesCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _middlewareSigning = require("@aws-sdk/middleware-signing");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
class SetIdentityPoolRolesCommand extends (0, _smithyClient.Command) {
    constructor(input){
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, SetIdentityPoolRolesCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, _middlewareSigning.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "CognitoIdentityClient";
        const commandName = "SetIdentityPoolRolesCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.SetIdentityPoolRolesInputFilterSensitiveLog),
            outputFilterSensitiveLog: (output)=>output
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsJson11.serializeAws_json1_1SetIdentityPoolRolesCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1SetIdentityPoolRolesCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/middleware-signing":"apx8g","@aws-sdk/smithy-client":"ats0l","../models/models_0":"6yMxE","../protocols/Aws_json1_1":"duUQ4","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"heQzK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "SetPrincipalTagAttributeMapCommand", ()=>SetPrincipalTagAttributeMapCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _middlewareSigning = require("@aws-sdk/middleware-signing");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
class SetPrincipalTagAttributeMapCommand extends (0, _smithyClient.Command) {
    constructor(input){
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, SetPrincipalTagAttributeMapCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, _middlewareSigning.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "CognitoIdentityClient";
        const commandName = "SetPrincipalTagAttributeMapCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.SetPrincipalTagAttributeMapInputFilterSensitiveLog),
            outputFilterSensitiveLog: (0, _models0.SetPrincipalTagAttributeMapResponseFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsJson11.serializeAws_json1_1SetPrincipalTagAttributeMapCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1SetPrincipalTagAttributeMapCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/middleware-signing":"apx8g","@aws-sdk/smithy-client":"ats0l","../models/models_0":"6yMxE","../protocols/Aws_json1_1":"duUQ4","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6llRr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TagResourceCommand", ()=>TagResourceCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _middlewareSigning = require("@aws-sdk/middleware-signing");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
class TagResourceCommand extends (0, _smithyClient.Command) {
    constructor(input){
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, TagResourceCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, _middlewareSigning.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "CognitoIdentityClient";
        const commandName = "TagResourceCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.TagResourceInputFilterSensitiveLog),
            outputFilterSensitiveLog: (0, _models0.TagResourceResponseFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsJson11.serializeAws_json1_1TagResourceCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1TagResourceCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/middleware-signing":"apx8g","@aws-sdk/smithy-client":"ats0l","../models/models_0":"6yMxE","../protocols/Aws_json1_1":"duUQ4","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5GaDO":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "UnlinkDeveloperIdentityCommand", ()=>UnlinkDeveloperIdentityCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _middlewareSigning = require("@aws-sdk/middleware-signing");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
class UnlinkDeveloperIdentityCommand extends (0, _smithyClient.Command) {
    constructor(input){
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, UnlinkDeveloperIdentityCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, _middlewareSigning.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "CognitoIdentityClient";
        const commandName = "UnlinkDeveloperIdentityCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.UnlinkDeveloperIdentityInputFilterSensitiveLog),
            outputFilterSensitiveLog: (output)=>output
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsJson11.serializeAws_json1_1UnlinkDeveloperIdentityCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1UnlinkDeveloperIdentityCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/middleware-signing":"apx8g","@aws-sdk/smithy-client":"ats0l","../models/models_0":"6yMxE","../protocols/Aws_json1_1":"duUQ4","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"d8ig7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "UnlinkIdentityCommand", ()=>UnlinkIdentityCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
class UnlinkIdentityCommand extends (0, _smithyClient.Command) {
    constructor(input){
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, UnlinkIdentityCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "CognitoIdentityClient";
        const commandName = "UnlinkIdentityCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.UnlinkIdentityInputFilterSensitiveLog),
            outputFilterSensitiveLog: (output)=>output
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsJson11.serializeAws_json1_1UnlinkIdentityCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1UnlinkIdentityCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../models/models_0":"6yMxE","../protocols/Aws_json1_1":"duUQ4","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8XvTh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "UntagResourceCommand", ()=>UntagResourceCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _middlewareSigning = require("@aws-sdk/middleware-signing");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
class UntagResourceCommand extends (0, _smithyClient.Command) {
    constructor(input){
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, UntagResourceCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, _middlewareSigning.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "CognitoIdentityClient";
        const commandName = "UntagResourceCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.UntagResourceInputFilterSensitiveLog),
            outputFilterSensitiveLog: (0, _models0.UntagResourceResponseFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsJson11.serializeAws_json1_1UntagResourceCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1UntagResourceCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/middleware-signing":"apx8g","@aws-sdk/smithy-client":"ats0l","../models/models_0":"6yMxE","../protocols/Aws_json1_1":"duUQ4","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"546f1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "UpdateIdentityPoolCommand", ()=>UpdateIdentityPoolCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _middlewareSigning = require("@aws-sdk/middleware-signing");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsJson11 = require("../protocols/Aws_json1_1");
class UpdateIdentityPoolCommand extends (0, _smithyClient.Command) {
    constructor(input){
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, UpdateIdentityPoolCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, _middlewareSigning.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "CognitoIdentityClient";
        const commandName = "UpdateIdentityPoolCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.IdentityPoolFilterSensitiveLog),
            outputFilterSensitiveLog: (0, _models0.IdentityPoolFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsJson11.serializeAws_json1_1UpdateIdentityPoolCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsJson11.deserializeAws_json1_1UpdateIdentityPoolCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/middleware-signing":"apx8g","@aws-sdk/smithy-client":"ats0l","../models/models_0":"6yMxE","../protocols/Aws_json1_1":"duUQ4","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1AyOQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createIdentityPoolCommand = require("./CreateIdentityPoolCommand");
parcelHelpers.exportAll(_createIdentityPoolCommand, exports);
var _deleteIdentitiesCommand = require("./DeleteIdentitiesCommand");
parcelHelpers.exportAll(_deleteIdentitiesCommand, exports);
var _deleteIdentityPoolCommand = require("./DeleteIdentityPoolCommand");
parcelHelpers.exportAll(_deleteIdentityPoolCommand, exports);
var _describeIdentityCommand = require("./DescribeIdentityCommand");
parcelHelpers.exportAll(_describeIdentityCommand, exports);
var _describeIdentityPoolCommand = require("./DescribeIdentityPoolCommand");
parcelHelpers.exportAll(_describeIdentityPoolCommand, exports);
var _getCredentialsForIdentityCommand = require("./GetCredentialsForIdentityCommand");
parcelHelpers.exportAll(_getCredentialsForIdentityCommand, exports);
var _getIdCommand = require("./GetIdCommand");
parcelHelpers.exportAll(_getIdCommand, exports);
var _getIdentityPoolRolesCommand = require("./GetIdentityPoolRolesCommand");
parcelHelpers.exportAll(_getIdentityPoolRolesCommand, exports);
var _getOpenIdTokenCommand = require("./GetOpenIdTokenCommand");
parcelHelpers.exportAll(_getOpenIdTokenCommand, exports);
var _getOpenIdTokenForDeveloperIdentityCommand = require("./GetOpenIdTokenForDeveloperIdentityCommand");
parcelHelpers.exportAll(_getOpenIdTokenForDeveloperIdentityCommand, exports);
var _getPrincipalTagAttributeMapCommand = require("./GetPrincipalTagAttributeMapCommand");
parcelHelpers.exportAll(_getPrincipalTagAttributeMapCommand, exports);
var _listIdentitiesCommand = require("./ListIdentitiesCommand");
parcelHelpers.exportAll(_listIdentitiesCommand, exports);
var _listIdentityPoolsCommand = require("./ListIdentityPoolsCommand");
parcelHelpers.exportAll(_listIdentityPoolsCommand, exports);
var _listTagsForResourceCommand = require("./ListTagsForResourceCommand");
parcelHelpers.exportAll(_listTagsForResourceCommand, exports);
var _lookupDeveloperIdentityCommand = require("./LookupDeveloperIdentityCommand");
parcelHelpers.exportAll(_lookupDeveloperIdentityCommand, exports);
var _mergeDeveloperIdentitiesCommand = require("./MergeDeveloperIdentitiesCommand");
parcelHelpers.exportAll(_mergeDeveloperIdentitiesCommand, exports);
var _setIdentityPoolRolesCommand = require("./SetIdentityPoolRolesCommand");
parcelHelpers.exportAll(_setIdentityPoolRolesCommand, exports);
var _setPrincipalTagAttributeMapCommand = require("./SetPrincipalTagAttributeMapCommand");
parcelHelpers.exportAll(_setPrincipalTagAttributeMapCommand, exports);
var _tagResourceCommand = require("./TagResourceCommand");
parcelHelpers.exportAll(_tagResourceCommand, exports);
var _unlinkDeveloperIdentityCommand = require("./UnlinkDeveloperIdentityCommand");
parcelHelpers.exportAll(_unlinkDeveloperIdentityCommand, exports);
var _unlinkIdentityCommand = require("./UnlinkIdentityCommand");
parcelHelpers.exportAll(_unlinkIdentityCommand, exports);
var _untagResourceCommand = require("./UntagResourceCommand");
parcelHelpers.exportAll(_untagResourceCommand, exports);
var _updateIdentityPoolCommand = require("./UpdateIdentityPoolCommand");
parcelHelpers.exportAll(_updateIdentityPoolCommand, exports);

},{"./CreateIdentityPoolCommand":"g3rb4","./DeleteIdentitiesCommand":"c73jn","./DeleteIdentityPoolCommand":"2C6yO","./DescribeIdentityCommand":"72SjC","./DescribeIdentityPoolCommand":"eyYuj","./GetCredentialsForIdentityCommand":"isHNy","./GetIdCommand":"jviA9","./GetIdentityPoolRolesCommand":"90ZuQ","./GetOpenIdTokenCommand":"03mCi","./GetOpenIdTokenForDeveloperIdentityCommand":"gHblr","./GetPrincipalTagAttributeMapCommand":"7GhkB","./ListIdentitiesCommand":"cz0Id","./ListIdentityPoolsCommand":"51xc6","./ListTagsForResourceCommand":"hXa95","./LookupDeveloperIdentityCommand":"1X66X","./MergeDeveloperIdentitiesCommand":"jlRz3","./SetIdentityPoolRolesCommand":"gvZWh","./SetPrincipalTagAttributeMapCommand":"heQzK","./TagResourceCommand":"6llRr","./UnlinkDeveloperIdentityCommand":"5GaDO","./UnlinkIdentityCommand":"d8ig7","./UntagResourceCommand":"8XvTh","./UpdateIdentityPoolCommand":"546f1","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5Tgrn":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _models0 = require("./models_0");
parcelHelpers.exportAll(_models0, exports);

},{"./models_0":"6yMxE","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eLuqX":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _interfaces = require("./Interfaces");
parcelHelpers.exportAll(_interfaces, exports);
var _listIdentityPoolsPaginator = require("./ListIdentityPoolsPaginator");
parcelHelpers.exportAll(_listIdentityPoolsPaginator, exports);

},{"./Interfaces":"aPMc8","./ListIdentityPoolsPaginator":"jyCcG","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aPMc8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jyCcG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "paginateListIdentityPools", ()=>paginateListIdentityPools);
var _cognitoIdentity = require("../CognitoIdentity");
var _cognitoIdentityClient = require("../CognitoIdentityClient");
var _listIdentityPoolsCommand = require("../commands/ListIdentityPoolsCommand");
const makePagedClientRequest = async (client, input, ...args)=>{
    return await client.send(new (0, _listIdentityPoolsCommand.ListIdentityPoolsCommand)(input), ...args);
};
const makePagedRequest = async (client, input, ...args)=>{
    return await client.listIdentityPools(input, ...args);
};
async function* paginateListIdentityPools(config, input, ...additionalArguments) {
    let token = config.startingToken || undefined;
    let hasNext = true;
    let page;
    while(hasNext){
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof (0, _cognitoIdentity.CognitoIdentity)) page = await makePagedRequest(config.client, input, ...additionalArguments);
        else if (config.client instanceof (0, _cognitoIdentityClient.CognitoIdentityClient)) page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        else throw new Error("Invalid client, expected CognitoIdentity | CognitoIdentityClient");
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
    }
    return undefined;
}

},{"../CognitoIdentity":"jBrMW","../CognitoIdentityClient":"kMbaB","../commands/ListIdentityPoolsCommand":"51xc6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lzRhb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DynamoDBServiceException", ()=>(0, _dynamoDBServiceException.DynamoDBServiceException));
var _dynamoDB = require("./DynamoDB");
parcelHelpers.exportAll(_dynamoDB, exports);
var _dynamoDBClient = require("./DynamoDBClient");
parcelHelpers.exportAll(_dynamoDBClient, exports);
var _commands = require("./commands");
parcelHelpers.exportAll(_commands, exports);
var _models = require("./models");
parcelHelpers.exportAll(_models, exports);
var _pagination = require("./pagination");
parcelHelpers.exportAll(_pagination, exports);
var _waiters = require("./waiters");
parcelHelpers.exportAll(_waiters, exports);
var _dynamoDBServiceException = require("./models/DynamoDBServiceException");

},{"./DynamoDB":"heqp3","./DynamoDBClient":"8WS72","./commands":"dKsfp","./models":"6Trql","./pagination":"dwGYy","./waiters":"blpUC","./models/DynamoDBServiceException":"fNTX9","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"heqp3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DynamoDB", ()=>DynamoDB);
var _batchExecuteStatementCommand = require("./commands/BatchExecuteStatementCommand");
var _batchGetItemCommand = require("./commands/BatchGetItemCommand");
var _batchWriteItemCommand = require("./commands/BatchWriteItemCommand");
var _createBackupCommand = require("./commands/CreateBackupCommand");
var _createGlobalTableCommand = require("./commands/CreateGlobalTableCommand");
var _createTableCommand = require("./commands/CreateTableCommand");
var _deleteBackupCommand = require("./commands/DeleteBackupCommand");
var _deleteItemCommand = require("./commands/DeleteItemCommand");
var _deleteTableCommand = require("./commands/DeleteTableCommand");
var _describeBackupCommand = require("./commands/DescribeBackupCommand");
var _describeContinuousBackupsCommand = require("./commands/DescribeContinuousBackupsCommand");
var _describeContributorInsightsCommand = require("./commands/DescribeContributorInsightsCommand");
var _describeEndpointsCommand = require("./commands/DescribeEndpointsCommand");
var _describeExportCommand = require("./commands/DescribeExportCommand");
var _describeGlobalTableCommand = require("./commands/DescribeGlobalTableCommand");
var _describeGlobalTableSettingsCommand = require("./commands/DescribeGlobalTableSettingsCommand");
var _describeImportCommand = require("./commands/DescribeImportCommand");
var _describeKinesisStreamingDestinationCommand = require("./commands/DescribeKinesisStreamingDestinationCommand");
var _describeLimitsCommand = require("./commands/DescribeLimitsCommand");
var _describeTableCommand = require("./commands/DescribeTableCommand");
var _describeTableReplicaAutoScalingCommand = require("./commands/DescribeTableReplicaAutoScalingCommand");
var _describeTimeToLiveCommand = require("./commands/DescribeTimeToLiveCommand");
var _disableKinesisStreamingDestinationCommand = require("./commands/DisableKinesisStreamingDestinationCommand");
var _enableKinesisStreamingDestinationCommand = require("./commands/EnableKinesisStreamingDestinationCommand");
var _executeStatementCommand = require("./commands/ExecuteStatementCommand");
var _executeTransactionCommand = require("./commands/ExecuteTransactionCommand");
var _exportTableToPointInTimeCommand = require("./commands/ExportTableToPointInTimeCommand");
var _getItemCommand = require("./commands/GetItemCommand");
var _importTableCommand = require("./commands/ImportTableCommand");
var _listBackupsCommand = require("./commands/ListBackupsCommand");
var _listContributorInsightsCommand = require("./commands/ListContributorInsightsCommand");
var _listExportsCommand = require("./commands/ListExportsCommand");
var _listGlobalTablesCommand = require("./commands/ListGlobalTablesCommand");
var _listImportsCommand = require("./commands/ListImportsCommand");
var _listTablesCommand = require("./commands/ListTablesCommand");
var _listTagsOfResourceCommand = require("./commands/ListTagsOfResourceCommand");
var _putItemCommand = require("./commands/PutItemCommand");
var _queryCommand = require("./commands/QueryCommand");
var _restoreTableFromBackupCommand = require("./commands/RestoreTableFromBackupCommand");
var _restoreTableToPointInTimeCommand = require("./commands/RestoreTableToPointInTimeCommand");
var _scanCommand = require("./commands/ScanCommand");
var _tagResourceCommand = require("./commands/TagResourceCommand");
var _transactGetItemsCommand = require("./commands/TransactGetItemsCommand");
var _transactWriteItemsCommand = require("./commands/TransactWriteItemsCommand");
var _untagResourceCommand = require("./commands/UntagResourceCommand");
var _updateContinuousBackupsCommand = require("./commands/UpdateContinuousBackupsCommand");
var _updateContributorInsightsCommand = require("./commands/UpdateContributorInsightsCommand");
var _updateGlobalTableCommand = require("./commands/UpdateGlobalTableCommand");
var _updateGlobalTableSettingsCommand = require("./commands/UpdateGlobalTableSettingsCommand");
var _updateItemCommand = require("./commands/UpdateItemCommand");
var _updateTableCommand = require("./commands/UpdateTableCommand");
var _updateTableReplicaAutoScalingCommand = require("./commands/UpdateTableReplicaAutoScalingCommand");
var _updateTimeToLiveCommand = require("./commands/UpdateTimeToLiveCommand");
var _dynamoDBClient = require("./DynamoDBClient");
class DynamoDB extends (0, _dynamoDBClient.DynamoDBClient) {
    batchExecuteStatement(args, optionsOrCb, cb) {
        const command = new (0, _batchExecuteStatementCommand.BatchExecuteStatementCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    }
    batchGetItem(args, optionsOrCb, cb) {
        const command = new (0, _batchGetItemCommand.BatchGetItemCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    }
    batchWriteItem(args, optionsOrCb, cb) {
        const command = new (0, _batchWriteItemCommand.BatchWriteItemCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    }
    createBackup(args, optionsOrCb, cb) {
        const command = new (0, _createBackupCommand.CreateBackupCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    }
    createGlobalTable(args, optionsOrCb, cb) {
        const command = new (0, _createGlobalTableCommand.CreateGlobalTableCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    }
    createTable(args, optionsOrCb, cb) {
        const command = new (0, _createTableCommand.CreateTableCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    }
    deleteBackup(args, optionsOrCb, cb) {
        const command = new (0, _deleteBackupCommand.DeleteBackupCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    }
    deleteItem(args, optionsOrCb, cb) {
        const command = new (0, _deleteItemCommand.DeleteItemCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    }
    deleteTable(args, optionsOrCb, cb) {
        const command = new (0, _deleteTableCommand.DeleteTableCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    }
    describeBackup(args, optionsOrCb, cb) {
        const command = new (0, _describeBackupCommand.DescribeBackupCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    }
    describeContinuousBackups(args, optionsOrCb, cb) {
        const command = new (0, _describeContinuousBackupsCommand.DescribeContinuousBackupsCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    }
    describeContributorInsights(args, optionsOrCb, cb) {
        const command = new (0, _describeContributorInsightsCommand.DescribeContributorInsightsCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    }
    describeEndpoints(args, optionsOrCb, cb) {
        const command = new (0, _describeEndpointsCommand.DescribeEndpointsCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    }
    describeExport(args, optionsOrCb, cb) {
        const command = new (0, _describeExportCommand.DescribeExportCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    }
    describeGlobalTable(args, optionsOrCb, cb) {
        const command = new (0, _describeGlobalTableCommand.DescribeGlobalTableCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    }
    describeGlobalTableSettings(args, optionsOrCb, cb) {
        const command = new (0, _describeGlobalTableSettingsCommand.DescribeGlobalTableSettingsCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    }
    describeImport(args, optionsOrCb, cb) {
        const command = new (0, _describeImportCommand.DescribeImportCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    }
    describeKinesisStreamingDestination(args, optionsOrCb, cb) {
        const command = new (0, _describeKinesisStreamingDestinationCommand.DescribeKinesisStreamingDestinationCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    }
    describeLimits(args, optionsOrCb, cb) {
        const command = new (0, _describeLimitsCommand.DescribeLimitsCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    }
    describeTable(args, optionsOrCb, cb) {
        const command = new (0, _describeTableCommand.DescribeTableCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    }
    describeTableReplicaAutoScaling(args, optionsOrCb, cb) {
        const command = new (0, _describeTableReplicaAutoScalingCommand.DescribeTableReplicaAutoScalingCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    }
    describeTimeToLive(args, optionsOrCb, cb) {
        const command = new (0, _describeTimeToLiveCommand.DescribeTimeToLiveCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    }
    disableKinesisStreamingDestination(args, optionsOrCb, cb) {
        const command = new (0, _disableKinesisStreamingDestinationCommand.DisableKinesisStreamingDestinationCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    }
    enableKinesisStreamingDestination(args, optionsOrCb, cb) {
        const command = new (0, _enableKinesisStreamingDestinationCommand.EnableKinesisStreamingDestinationCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    }
    executeStatement(args, optionsOrCb, cb) {
        const command = new (0, _executeStatementCommand.ExecuteStatementCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    }
    executeTransaction(args, optionsOrCb, cb) {
        const command = new (0, _executeTransactionCommand.ExecuteTransactionCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    }
    exportTableToPointInTime(args, optionsOrCb, cb) {
        const command = new (0, _exportTableToPointInTimeCommand.ExportTableToPointInTimeCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    }
    getItem(args, optionsOrCb, cb) {
        const command = new (0, _getItemCommand.GetItemCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    }
    importTable(args, optionsOrCb, cb) {
        const command = new (0, _importTableCommand.ImportTableCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    }
    listBackups(args, optionsOrCb, cb) {
        const command = new (0, _listBackupsCommand.ListBackupsCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    }
    listContributorInsights(args, optionsOrCb, cb) {
        const command = new (0, _listContributorInsightsCommand.ListContributorInsightsCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    }
    listExports(args, optionsOrCb, cb) {
        const command = new (0, _listExportsCommand.ListExportsCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    }
    listGlobalTables(args, optionsOrCb, cb) {
        const command = new (0, _listGlobalTablesCommand.ListGlobalTablesCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    }
    listImports(args, optionsOrCb, cb) {
        const command = new (0, _listImportsCommand.ListImportsCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    }
    listTables(args, optionsOrCb, cb) {
        const command = new (0, _listTablesCommand.ListTablesCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    }
    listTagsOfResource(args, optionsOrCb, cb) {
        const command = new (0, _listTagsOfResourceCommand.ListTagsOfResourceCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    }
    putItem(args, optionsOrCb, cb) {
        const command = new (0, _putItemCommand.PutItemCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    }
    query(args, optionsOrCb, cb) {
        const command = new (0, _queryCommand.QueryCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    }
    restoreTableFromBackup(args, optionsOrCb, cb) {
        const command = new (0, _restoreTableFromBackupCommand.RestoreTableFromBackupCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    }
    restoreTableToPointInTime(args, optionsOrCb, cb) {
        const command = new (0, _restoreTableToPointInTimeCommand.RestoreTableToPointInTimeCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    }
    scan(args, optionsOrCb, cb) {
        const command = new (0, _scanCommand.ScanCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    }
    tagResource(args, optionsOrCb, cb) {
        const command = new (0, _tagResourceCommand.TagResourceCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    }
    transactGetItems(args, optionsOrCb, cb) {
        const command = new (0, _transactGetItemsCommand.TransactGetItemsCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    }
    transactWriteItems(args, optionsOrCb, cb) {
        const command = new (0, _transactWriteItemsCommand.TransactWriteItemsCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    }
    untagResource(args, optionsOrCb, cb) {
        const command = new (0, _untagResourceCommand.UntagResourceCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    }
    updateContinuousBackups(args, optionsOrCb, cb) {
        const command = new (0, _updateContinuousBackupsCommand.UpdateContinuousBackupsCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    }
    updateContributorInsights(args, optionsOrCb, cb) {
        const command = new (0, _updateContributorInsightsCommand.UpdateContributorInsightsCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    }
    updateGlobalTable(args, optionsOrCb, cb) {
        const command = new (0, _updateGlobalTableCommand.UpdateGlobalTableCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    }
    updateGlobalTableSettings(args, optionsOrCb, cb) {
        const command = new (0, _updateGlobalTableSettingsCommand.UpdateGlobalTableSettingsCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    }
    updateItem(args, optionsOrCb, cb) {
        const command = new (0, _updateItemCommand.UpdateItemCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    }
    updateTable(args, optionsOrCb, cb) {
        const command = new (0, _updateTableCommand.UpdateTableCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    }
    updateTableReplicaAutoScaling(args, optionsOrCb, cb) {
        const command = new (0, _updateTableReplicaAutoScalingCommand.UpdateTableReplicaAutoScalingCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    }
    updateTimeToLive(args, optionsOrCb, cb) {
        const command = new (0, _updateTimeToLiveCommand.UpdateTimeToLiveCommand)(args);
        if (typeof optionsOrCb === "function") this.send(command, optionsOrCb);
        else if (typeof cb === "function") {
            if (typeof optionsOrCb !== "object") throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
            this.send(command, optionsOrCb || {}, cb);
        } else return this.send(command, optionsOrCb);
    }
}

},{"./commands/BatchExecuteStatementCommand":"54UtQ","./commands/BatchGetItemCommand":"jbco9","./commands/BatchWriteItemCommand":"fjdm8","./commands/CreateBackupCommand":"ffw2W","./commands/CreateGlobalTableCommand":"9m7Rs","./commands/CreateTableCommand":"5rbEF","./commands/DeleteBackupCommand":"1VuvK","./commands/DeleteItemCommand":"dNZgc","./commands/DeleteTableCommand":"iDQo0","./commands/DescribeBackupCommand":"k9eTA","./commands/DescribeContinuousBackupsCommand":"23EB3","./commands/DescribeContributorInsightsCommand":"4Ohfm","./commands/DescribeEndpointsCommand":"dlVBr","./commands/DescribeExportCommand":"8mC4P","./commands/DescribeGlobalTableCommand":"q8RCi","./commands/DescribeGlobalTableSettingsCommand":"a75QM","./commands/DescribeImportCommand":"b7hlV","./commands/DescribeKinesisStreamingDestinationCommand":"lto8R","./commands/DescribeLimitsCommand":"4BVng","./commands/DescribeTableCommand":"kVY8e","./commands/DescribeTableReplicaAutoScalingCommand":"dQqXy","./commands/DescribeTimeToLiveCommand":"eK0Cx","./commands/DisableKinesisStreamingDestinationCommand":"hRQXM","./commands/EnableKinesisStreamingDestinationCommand":"iCptj","./commands/ExecuteStatementCommand":"drbaG","./commands/ExecuteTransactionCommand":"kKuz4","./commands/ExportTableToPointInTimeCommand":"c1KeZ","./commands/GetItemCommand":"2nDTS","./commands/ImportTableCommand":"fMp66","./commands/ListBackupsCommand":"bqSzJ","./commands/ListContributorInsightsCommand":"2d7jp","./commands/ListExportsCommand":"3HosE","./commands/ListGlobalTablesCommand":"48EtG","./commands/ListImportsCommand":"cNJcg","./commands/ListTablesCommand":"7dYH2","./commands/ListTagsOfResourceCommand":"enYXb","./commands/PutItemCommand":"7Hj9z","./commands/QueryCommand":"1Y7ez","./commands/RestoreTableFromBackupCommand":"21gyH","./commands/RestoreTableToPointInTimeCommand":"1dkoT","./commands/ScanCommand":"klZUL","./commands/TagResourceCommand":"5Mq51","./commands/TransactGetItemsCommand":"22zCR","./commands/TransactWriteItemsCommand":"fnEm7","./commands/UntagResourceCommand":"fxMFa","./commands/UpdateContinuousBackupsCommand":"6GXpQ","./commands/UpdateContributorInsightsCommand":"fj8ON","./commands/UpdateGlobalTableCommand":"k0g1H","./commands/UpdateGlobalTableSettingsCommand":"85Z97","./commands/UpdateItemCommand":"7VwWS","./commands/UpdateTableCommand":"6KZkH","./commands/UpdateTableReplicaAutoScalingCommand":"giji1","./commands/UpdateTimeToLiveCommand":"dhHr1","./DynamoDBClient":"8WS72","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"54UtQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BatchExecuteStatementCommand", ()=>BatchExecuteStatementCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsJson10 = require("../protocols/Aws_json1_0");
class BatchExecuteStatementCommand extends (0, _smithyClient.Command) {
    constructor(input){
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, BatchExecuteStatementCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "BatchExecuteStatementCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.BatchExecuteStatementInputFilterSensitiveLog),
            outputFilterSensitiveLog: (0, _models0.BatchExecuteStatementOutputFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsJson10.serializeAws_json1_0BatchExecuteStatementCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsJson10.deserializeAws_json1_0BatchExecuteStatementCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../models/models_0":"6OiVg","../protocols/Aws_json1_0":"2MtWi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6OiVg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BackupType", ()=>BackupType);
parcelHelpers.export(exports, "BackupInUseException", ()=>BackupInUseException);
parcelHelpers.export(exports, "BackupNotFoundException", ()=>BackupNotFoundException);
parcelHelpers.export(exports, "BackupTypeFilter", ()=>BackupTypeFilter);
parcelHelpers.export(exports, "BatchStatementErrorCodeEnum", ()=>BatchStatementErrorCodeEnum);
parcelHelpers.export(exports, "InternalServerError", ()=>InternalServerError);
parcelHelpers.export(exports, "RequestLimitExceeded", ()=>RequestLimitExceeded);
parcelHelpers.export(exports, "InvalidEndpointException", ()=>InvalidEndpointException);
parcelHelpers.export(exports, "ProvisionedThroughputExceededException", ()=>ProvisionedThroughputExceededException);
parcelHelpers.export(exports, "ResourceNotFoundException", ()=>ResourceNotFoundException);
parcelHelpers.export(exports, "ItemCollectionSizeLimitExceededException", ()=>ItemCollectionSizeLimitExceededException);
parcelHelpers.export(exports, "ConditionalCheckFailedException", ()=>ConditionalCheckFailedException);
parcelHelpers.export(exports, "ContinuousBackupsUnavailableException", ()=>ContinuousBackupsUnavailableException);
parcelHelpers.export(exports, "LimitExceededException", ()=>LimitExceededException);
parcelHelpers.export(exports, "TableInUseException", ()=>TableInUseException);
parcelHelpers.export(exports, "TableNotFoundException", ()=>TableNotFoundException);
parcelHelpers.export(exports, "TableClass", ()=>TableClass);
parcelHelpers.export(exports, "GlobalTableAlreadyExistsException", ()=>GlobalTableAlreadyExistsException);
parcelHelpers.export(exports, "ResourceInUseException", ()=>ResourceInUseException);
parcelHelpers.export(exports, "TransactionConflictException", ()=>TransactionConflictException);
parcelHelpers.export(exports, "ExportFormat", ()=>ExportFormat);
parcelHelpers.export(exports, "ExportStatus", ()=>ExportStatus);
parcelHelpers.export(exports, "ExportNotFoundException", ()=>ExportNotFoundException);
parcelHelpers.export(exports, "GlobalTableNotFoundException", ()=>GlobalTableNotFoundException);
parcelHelpers.export(exports, "ImportStatus", ()=>ImportStatus);
parcelHelpers.export(exports, "InputCompressionType", ()=>InputCompressionType);
parcelHelpers.export(exports, "InputFormat", ()=>InputFormat);
parcelHelpers.export(exports, "ImportNotFoundException", ()=>ImportNotFoundException);
parcelHelpers.export(exports, "DuplicateItemException", ()=>DuplicateItemException);
parcelHelpers.export(exports, "IdempotentParameterMismatchException", ()=>IdempotentParameterMismatchException);
parcelHelpers.export(exports, "TransactionInProgressException", ()=>TransactionInProgressException);
parcelHelpers.export(exports, "ExportConflictException", ()=>ExportConflictException);
parcelHelpers.export(exports, "InvalidExportTimeException", ()=>InvalidExportTimeException);
parcelHelpers.export(exports, "PointInTimeRecoveryUnavailableException", ()=>PointInTimeRecoveryUnavailableException);
parcelHelpers.export(exports, "ImportConflictException", ()=>ImportConflictException);
parcelHelpers.export(exports, "TableAlreadyExistsException", ()=>TableAlreadyExistsException);
parcelHelpers.export(exports, "InvalidRestoreTimeException", ()=>InvalidRestoreTimeException);
parcelHelpers.export(exports, "ReplicaAlreadyExistsException", ()=>ReplicaAlreadyExistsException);
parcelHelpers.export(exports, "ReplicaNotFoundException", ()=>ReplicaNotFoundException);
parcelHelpers.export(exports, "IndexNotFoundException", ()=>IndexNotFoundException);
parcelHelpers.export(exports, "AttributeValue", ()=>AttributeValue);
parcelHelpers.export(exports, "TransactionCanceledException", ()=>TransactionCanceledException);
parcelHelpers.export(exports, "ArchivalSummaryFilterSensitiveLog", ()=>ArchivalSummaryFilterSensitiveLog);
parcelHelpers.export(exports, "AttributeDefinitionFilterSensitiveLog", ()=>AttributeDefinitionFilterSensitiveLog);
parcelHelpers.export(exports, "AutoScalingTargetTrackingScalingPolicyConfigurationDescriptionFilterSensitiveLog", ()=>AutoScalingTargetTrackingScalingPolicyConfigurationDescriptionFilterSensitiveLog);
parcelHelpers.export(exports, "AutoScalingPolicyDescriptionFilterSensitiveLog", ()=>AutoScalingPolicyDescriptionFilterSensitiveLog);
parcelHelpers.export(exports, "AutoScalingTargetTrackingScalingPolicyConfigurationUpdateFilterSensitiveLog", ()=>AutoScalingTargetTrackingScalingPolicyConfigurationUpdateFilterSensitiveLog);
parcelHelpers.export(exports, "AutoScalingPolicyUpdateFilterSensitiveLog", ()=>AutoScalingPolicyUpdateFilterSensitiveLog);
parcelHelpers.export(exports, "AutoScalingSettingsDescriptionFilterSensitiveLog", ()=>AutoScalingSettingsDescriptionFilterSensitiveLog);
parcelHelpers.export(exports, "AutoScalingSettingsUpdateFilterSensitiveLog", ()=>AutoScalingSettingsUpdateFilterSensitiveLog);
parcelHelpers.export(exports, "BackupDetailsFilterSensitiveLog", ()=>BackupDetailsFilterSensitiveLog);
parcelHelpers.export(exports, "KeySchemaElementFilterSensitiveLog", ()=>KeySchemaElementFilterSensitiveLog);
parcelHelpers.export(exports, "ProvisionedThroughputFilterSensitiveLog", ()=>ProvisionedThroughputFilterSensitiveLog);
parcelHelpers.export(exports, "SourceTableDetailsFilterSensitiveLog", ()=>SourceTableDetailsFilterSensitiveLog);
parcelHelpers.export(exports, "ProjectionFilterSensitiveLog", ()=>ProjectionFilterSensitiveLog);
parcelHelpers.export(exports, "GlobalSecondaryIndexInfoFilterSensitiveLog", ()=>GlobalSecondaryIndexInfoFilterSensitiveLog);
parcelHelpers.export(exports, "LocalSecondaryIndexInfoFilterSensitiveLog", ()=>LocalSecondaryIndexInfoFilterSensitiveLog);
parcelHelpers.export(exports, "SSEDescriptionFilterSensitiveLog", ()=>SSEDescriptionFilterSensitiveLog);
parcelHelpers.export(exports, "StreamSpecificationFilterSensitiveLog", ()=>StreamSpecificationFilterSensitiveLog);
parcelHelpers.export(exports, "TimeToLiveDescriptionFilterSensitiveLog", ()=>TimeToLiveDescriptionFilterSensitiveLog);
parcelHelpers.export(exports, "SourceTableFeatureDetailsFilterSensitiveLog", ()=>SourceTableFeatureDetailsFilterSensitiveLog);
parcelHelpers.export(exports, "BackupDescriptionFilterSensitiveLog", ()=>BackupDescriptionFilterSensitiveLog);
parcelHelpers.export(exports, "BackupSummaryFilterSensitiveLog", ()=>BackupSummaryFilterSensitiveLog);
parcelHelpers.export(exports, "CapacityFilterSensitiveLog", ()=>CapacityFilterSensitiveLog);
parcelHelpers.export(exports, "ConsumedCapacityFilterSensitiveLog", ()=>ConsumedCapacityFilterSensitiveLog);
parcelHelpers.export(exports, "BatchStatementErrorFilterSensitiveLog", ()=>BatchStatementErrorFilterSensitiveLog);
parcelHelpers.export(exports, "BillingModeSummaryFilterSensitiveLog", ()=>BillingModeSummaryFilterSensitiveLog);
parcelHelpers.export(exports, "PointInTimeRecoveryDescriptionFilterSensitiveLog", ()=>PointInTimeRecoveryDescriptionFilterSensitiveLog);
parcelHelpers.export(exports, "ContinuousBackupsDescriptionFilterSensitiveLog", ()=>ContinuousBackupsDescriptionFilterSensitiveLog);
parcelHelpers.export(exports, "ContributorInsightsSummaryFilterSensitiveLog", ()=>ContributorInsightsSummaryFilterSensitiveLog);
parcelHelpers.export(exports, "CreateBackupInputFilterSensitiveLog", ()=>CreateBackupInputFilterSensitiveLog);
parcelHelpers.export(exports, "CreateBackupOutputFilterSensitiveLog", ()=>CreateBackupOutputFilterSensitiveLog);
parcelHelpers.export(exports, "CreateGlobalSecondaryIndexActionFilterSensitiveLog", ()=>CreateGlobalSecondaryIndexActionFilterSensitiveLog);
parcelHelpers.export(exports, "ReplicaFilterSensitiveLog", ()=>ReplicaFilterSensitiveLog);
parcelHelpers.export(exports, "CreateGlobalTableInputFilterSensitiveLog", ()=>CreateGlobalTableInputFilterSensitiveLog);
parcelHelpers.export(exports, "ProvisionedThroughputOverrideFilterSensitiveLog", ()=>ProvisionedThroughputOverrideFilterSensitiveLog);
parcelHelpers.export(exports, "ReplicaGlobalSecondaryIndexDescriptionFilterSensitiveLog", ()=>ReplicaGlobalSecondaryIndexDescriptionFilterSensitiveLog);
parcelHelpers.export(exports, "TableClassSummaryFilterSensitiveLog", ()=>TableClassSummaryFilterSensitiveLog);
parcelHelpers.export(exports, "ReplicaDescriptionFilterSensitiveLog", ()=>ReplicaDescriptionFilterSensitiveLog);
parcelHelpers.export(exports, "GlobalTableDescriptionFilterSensitiveLog", ()=>GlobalTableDescriptionFilterSensitiveLog);
parcelHelpers.export(exports, "CreateGlobalTableOutputFilterSensitiveLog", ()=>CreateGlobalTableOutputFilterSensitiveLog);
parcelHelpers.export(exports, "CreateReplicaActionFilterSensitiveLog", ()=>CreateReplicaActionFilterSensitiveLog);
parcelHelpers.export(exports, "ReplicaGlobalSecondaryIndexFilterSensitiveLog", ()=>ReplicaGlobalSecondaryIndexFilterSensitiveLog);
parcelHelpers.export(exports, "CreateReplicationGroupMemberActionFilterSensitiveLog", ()=>CreateReplicationGroupMemberActionFilterSensitiveLog);
parcelHelpers.export(exports, "GlobalSecondaryIndexFilterSensitiveLog", ()=>GlobalSecondaryIndexFilterSensitiveLog);
parcelHelpers.export(exports, "LocalSecondaryIndexFilterSensitiveLog", ()=>LocalSecondaryIndexFilterSensitiveLog);
parcelHelpers.export(exports, "SSESpecificationFilterSensitiveLog", ()=>SSESpecificationFilterSensitiveLog);
parcelHelpers.export(exports, "TagFilterSensitiveLog", ()=>TagFilterSensitiveLog);
parcelHelpers.export(exports, "CreateTableInputFilterSensitiveLog", ()=>CreateTableInputFilterSensitiveLog);
parcelHelpers.export(exports, "ProvisionedThroughputDescriptionFilterSensitiveLog", ()=>ProvisionedThroughputDescriptionFilterSensitiveLog);
parcelHelpers.export(exports, "GlobalSecondaryIndexDescriptionFilterSensitiveLog", ()=>GlobalSecondaryIndexDescriptionFilterSensitiveLog);
parcelHelpers.export(exports, "LocalSecondaryIndexDescriptionFilterSensitiveLog", ()=>LocalSecondaryIndexDescriptionFilterSensitiveLog);
parcelHelpers.export(exports, "RestoreSummaryFilterSensitiveLog", ()=>RestoreSummaryFilterSensitiveLog);
parcelHelpers.export(exports, "TableDescriptionFilterSensitiveLog", ()=>TableDescriptionFilterSensitiveLog);
parcelHelpers.export(exports, "CreateTableOutputFilterSensitiveLog", ()=>CreateTableOutputFilterSensitiveLog);
parcelHelpers.export(exports, "CsvOptionsFilterSensitiveLog", ()=>CsvOptionsFilterSensitiveLog);
parcelHelpers.export(exports, "DeleteBackupInputFilterSensitiveLog", ()=>DeleteBackupInputFilterSensitiveLog);
parcelHelpers.export(exports, "DeleteBackupOutputFilterSensitiveLog", ()=>DeleteBackupOutputFilterSensitiveLog);
parcelHelpers.export(exports, "DeleteGlobalSecondaryIndexActionFilterSensitiveLog", ()=>DeleteGlobalSecondaryIndexActionFilterSensitiveLog);
parcelHelpers.export(exports, "DeleteReplicaActionFilterSensitiveLog", ()=>DeleteReplicaActionFilterSensitiveLog);
parcelHelpers.export(exports, "DeleteReplicationGroupMemberActionFilterSensitiveLog", ()=>DeleteReplicationGroupMemberActionFilterSensitiveLog);
parcelHelpers.export(exports, "DeleteTableInputFilterSensitiveLog", ()=>DeleteTableInputFilterSensitiveLog);
parcelHelpers.export(exports, "DeleteTableOutputFilterSensitiveLog", ()=>DeleteTableOutputFilterSensitiveLog);
parcelHelpers.export(exports, "DescribeBackupInputFilterSensitiveLog", ()=>DescribeBackupInputFilterSensitiveLog);
parcelHelpers.export(exports, "DescribeBackupOutputFilterSensitiveLog", ()=>DescribeBackupOutputFilterSensitiveLog);
parcelHelpers.export(exports, "DescribeContinuousBackupsInputFilterSensitiveLog", ()=>DescribeContinuousBackupsInputFilterSensitiveLog);
parcelHelpers.export(exports, "DescribeContinuousBackupsOutputFilterSensitiveLog", ()=>DescribeContinuousBackupsOutputFilterSensitiveLog);
parcelHelpers.export(exports, "DescribeContributorInsightsInputFilterSensitiveLog", ()=>DescribeContributorInsightsInputFilterSensitiveLog);
parcelHelpers.export(exports, "FailureExceptionFilterSensitiveLog", ()=>FailureExceptionFilterSensitiveLog);
parcelHelpers.export(exports, "DescribeContributorInsightsOutputFilterSensitiveLog", ()=>DescribeContributorInsightsOutputFilterSensitiveLog);
parcelHelpers.export(exports, "DescribeEndpointsRequestFilterSensitiveLog", ()=>DescribeEndpointsRequestFilterSensitiveLog);
parcelHelpers.export(exports, "EndpointFilterSensitiveLog", ()=>EndpointFilterSensitiveLog);
parcelHelpers.export(exports, "DescribeEndpointsResponseFilterSensitiveLog", ()=>DescribeEndpointsResponseFilterSensitiveLog);
parcelHelpers.export(exports, "DescribeExportInputFilterSensitiveLog", ()=>DescribeExportInputFilterSensitiveLog);
parcelHelpers.export(exports, "ExportDescriptionFilterSensitiveLog", ()=>ExportDescriptionFilterSensitiveLog);
parcelHelpers.export(exports, "DescribeExportOutputFilterSensitiveLog", ()=>DescribeExportOutputFilterSensitiveLog);
parcelHelpers.export(exports, "DescribeGlobalTableInputFilterSensitiveLog", ()=>DescribeGlobalTableInputFilterSensitiveLog);
parcelHelpers.export(exports, "DescribeGlobalTableOutputFilterSensitiveLog", ()=>DescribeGlobalTableOutputFilterSensitiveLog);
parcelHelpers.export(exports, "DescribeGlobalTableSettingsInputFilterSensitiveLog", ()=>DescribeGlobalTableSettingsInputFilterSensitiveLog);
parcelHelpers.export(exports, "ReplicaGlobalSecondaryIndexSettingsDescriptionFilterSensitiveLog", ()=>ReplicaGlobalSecondaryIndexSettingsDescriptionFilterSensitiveLog);
parcelHelpers.export(exports, "ReplicaSettingsDescriptionFilterSensitiveLog", ()=>ReplicaSettingsDescriptionFilterSensitiveLog);
parcelHelpers.export(exports, "DescribeGlobalTableSettingsOutputFilterSensitiveLog", ()=>DescribeGlobalTableSettingsOutputFilterSensitiveLog);
parcelHelpers.export(exports, "DescribeImportInputFilterSensitiveLog", ()=>DescribeImportInputFilterSensitiveLog);
parcelHelpers.export(exports, "InputFormatOptionsFilterSensitiveLog", ()=>InputFormatOptionsFilterSensitiveLog);
parcelHelpers.export(exports, "S3BucketSourceFilterSensitiveLog", ()=>S3BucketSourceFilterSensitiveLog);
parcelHelpers.export(exports, "TableCreationParametersFilterSensitiveLog", ()=>TableCreationParametersFilterSensitiveLog);
parcelHelpers.export(exports, "ImportTableDescriptionFilterSensitiveLog", ()=>ImportTableDescriptionFilterSensitiveLog);
parcelHelpers.export(exports, "DescribeImportOutputFilterSensitiveLog", ()=>DescribeImportOutputFilterSensitiveLog);
parcelHelpers.export(exports, "DescribeKinesisStreamingDestinationInputFilterSensitiveLog", ()=>DescribeKinesisStreamingDestinationInputFilterSensitiveLog);
parcelHelpers.export(exports, "KinesisDataStreamDestinationFilterSensitiveLog", ()=>KinesisDataStreamDestinationFilterSensitiveLog);
parcelHelpers.export(exports, "DescribeKinesisStreamingDestinationOutputFilterSensitiveLog", ()=>DescribeKinesisStreamingDestinationOutputFilterSensitiveLog);
parcelHelpers.export(exports, "DescribeLimitsInputFilterSensitiveLog", ()=>DescribeLimitsInputFilterSensitiveLog);
parcelHelpers.export(exports, "DescribeLimitsOutputFilterSensitiveLog", ()=>DescribeLimitsOutputFilterSensitiveLog);
parcelHelpers.export(exports, "DescribeTableInputFilterSensitiveLog", ()=>DescribeTableInputFilterSensitiveLog);
parcelHelpers.export(exports, "DescribeTableOutputFilterSensitiveLog", ()=>DescribeTableOutputFilterSensitiveLog);
parcelHelpers.export(exports, "DescribeTableReplicaAutoScalingInputFilterSensitiveLog", ()=>DescribeTableReplicaAutoScalingInputFilterSensitiveLog);
parcelHelpers.export(exports, "ReplicaGlobalSecondaryIndexAutoScalingDescriptionFilterSensitiveLog", ()=>ReplicaGlobalSecondaryIndexAutoScalingDescriptionFilterSensitiveLog);
parcelHelpers.export(exports, "ReplicaAutoScalingDescriptionFilterSensitiveLog", ()=>ReplicaAutoScalingDescriptionFilterSensitiveLog);
parcelHelpers.export(exports, "TableAutoScalingDescriptionFilterSensitiveLog", ()=>TableAutoScalingDescriptionFilterSensitiveLog);
parcelHelpers.export(exports, "DescribeTableReplicaAutoScalingOutputFilterSensitiveLog", ()=>DescribeTableReplicaAutoScalingOutputFilterSensitiveLog);
parcelHelpers.export(exports, "DescribeTimeToLiveInputFilterSensitiveLog", ()=>DescribeTimeToLiveInputFilterSensitiveLog);
parcelHelpers.export(exports, "DescribeTimeToLiveOutputFilterSensitiveLog", ()=>DescribeTimeToLiveOutputFilterSensitiveLog);
parcelHelpers.export(exports, "KinesisStreamingDestinationInputFilterSensitiveLog", ()=>KinesisStreamingDestinationInputFilterSensitiveLog);
parcelHelpers.export(exports, "KinesisStreamingDestinationOutputFilterSensitiveLog", ()=>KinesisStreamingDestinationOutputFilterSensitiveLog);
parcelHelpers.export(exports, "ExportTableToPointInTimeInputFilterSensitiveLog", ()=>ExportTableToPointInTimeInputFilterSensitiveLog);
parcelHelpers.export(exports, "ExportTableToPointInTimeOutputFilterSensitiveLog", ()=>ExportTableToPointInTimeOutputFilterSensitiveLog);
parcelHelpers.export(exports, "ImportTableInputFilterSensitiveLog", ()=>ImportTableInputFilterSensitiveLog);
parcelHelpers.export(exports, "ImportTableOutputFilterSensitiveLog", ()=>ImportTableOutputFilterSensitiveLog);
parcelHelpers.export(exports, "ListBackupsInputFilterSensitiveLog", ()=>ListBackupsInputFilterSensitiveLog);
parcelHelpers.export(exports, "ListBackupsOutputFilterSensitiveLog", ()=>ListBackupsOutputFilterSensitiveLog);
parcelHelpers.export(exports, "ListContributorInsightsInputFilterSensitiveLog", ()=>ListContributorInsightsInputFilterSensitiveLog);
parcelHelpers.export(exports, "ListContributorInsightsOutputFilterSensitiveLog", ()=>ListContributorInsightsOutputFilterSensitiveLog);
parcelHelpers.export(exports, "ListExportsInputFilterSensitiveLog", ()=>ListExportsInputFilterSensitiveLog);
parcelHelpers.export(exports, "ExportSummaryFilterSensitiveLog", ()=>ExportSummaryFilterSensitiveLog);
parcelHelpers.export(exports, "ListExportsOutputFilterSensitiveLog", ()=>ListExportsOutputFilterSensitiveLog);
parcelHelpers.export(exports, "ListGlobalTablesInputFilterSensitiveLog", ()=>ListGlobalTablesInputFilterSensitiveLog);
parcelHelpers.export(exports, "GlobalTableFilterSensitiveLog", ()=>GlobalTableFilterSensitiveLog);
parcelHelpers.export(exports, "ListGlobalTablesOutputFilterSensitiveLog", ()=>ListGlobalTablesOutputFilterSensitiveLog);
parcelHelpers.export(exports, "ListImportsInputFilterSensitiveLog", ()=>ListImportsInputFilterSensitiveLog);
parcelHelpers.export(exports, "ImportSummaryFilterSensitiveLog", ()=>ImportSummaryFilterSensitiveLog);
parcelHelpers.export(exports, "ListImportsOutputFilterSensitiveLog", ()=>ListImportsOutputFilterSensitiveLog);
parcelHelpers.export(exports, "ListTablesInputFilterSensitiveLog", ()=>ListTablesInputFilterSensitiveLog);
parcelHelpers.export(exports, "ListTablesOutputFilterSensitiveLog", ()=>ListTablesOutputFilterSensitiveLog);
parcelHelpers.export(exports, "ListTagsOfResourceInputFilterSensitiveLog", ()=>ListTagsOfResourceInputFilterSensitiveLog);
parcelHelpers.export(exports, "ListTagsOfResourceOutputFilterSensitiveLog", ()=>ListTagsOfResourceOutputFilterSensitiveLog);
parcelHelpers.export(exports, "RestoreTableFromBackupInputFilterSensitiveLog", ()=>RestoreTableFromBackupInputFilterSensitiveLog);
parcelHelpers.export(exports, "RestoreTableFromBackupOutputFilterSensitiveLog", ()=>RestoreTableFromBackupOutputFilterSensitiveLog);
parcelHelpers.export(exports, "RestoreTableToPointInTimeInputFilterSensitiveLog", ()=>RestoreTableToPointInTimeInputFilterSensitiveLog);
parcelHelpers.export(exports, "RestoreTableToPointInTimeOutputFilterSensitiveLog", ()=>RestoreTableToPointInTimeOutputFilterSensitiveLog);
parcelHelpers.export(exports, "TagResourceInputFilterSensitiveLog", ()=>TagResourceInputFilterSensitiveLog);
parcelHelpers.export(exports, "UntagResourceInputFilterSensitiveLog", ()=>UntagResourceInputFilterSensitiveLog);
parcelHelpers.export(exports, "PointInTimeRecoverySpecificationFilterSensitiveLog", ()=>PointInTimeRecoverySpecificationFilterSensitiveLog);
parcelHelpers.export(exports, "UpdateContinuousBackupsInputFilterSensitiveLog", ()=>UpdateContinuousBackupsInputFilterSensitiveLog);
parcelHelpers.export(exports, "UpdateContinuousBackupsOutputFilterSensitiveLog", ()=>UpdateContinuousBackupsOutputFilterSensitiveLog);
parcelHelpers.export(exports, "UpdateContributorInsightsInputFilterSensitiveLog", ()=>UpdateContributorInsightsInputFilterSensitiveLog);
parcelHelpers.export(exports, "UpdateContributorInsightsOutputFilterSensitiveLog", ()=>UpdateContributorInsightsOutputFilterSensitiveLog);
parcelHelpers.export(exports, "ReplicaUpdateFilterSensitiveLog", ()=>ReplicaUpdateFilterSensitiveLog);
parcelHelpers.export(exports, "UpdateGlobalTableInputFilterSensitiveLog", ()=>UpdateGlobalTableInputFilterSensitiveLog);
parcelHelpers.export(exports, "UpdateGlobalTableOutputFilterSensitiveLog", ()=>UpdateGlobalTableOutputFilterSensitiveLog);
parcelHelpers.export(exports, "GlobalTableGlobalSecondaryIndexSettingsUpdateFilterSensitiveLog", ()=>GlobalTableGlobalSecondaryIndexSettingsUpdateFilterSensitiveLog);
parcelHelpers.export(exports, "ReplicaGlobalSecondaryIndexSettingsUpdateFilterSensitiveLog", ()=>ReplicaGlobalSecondaryIndexSettingsUpdateFilterSensitiveLog);
parcelHelpers.export(exports, "ReplicaSettingsUpdateFilterSensitiveLog", ()=>ReplicaSettingsUpdateFilterSensitiveLog);
parcelHelpers.export(exports, "UpdateGlobalTableSettingsInputFilterSensitiveLog", ()=>UpdateGlobalTableSettingsInputFilterSensitiveLog);
parcelHelpers.export(exports, "UpdateGlobalTableSettingsOutputFilterSensitiveLog", ()=>UpdateGlobalTableSettingsOutputFilterSensitiveLog);
parcelHelpers.export(exports, "UpdateGlobalSecondaryIndexActionFilterSensitiveLog", ()=>UpdateGlobalSecondaryIndexActionFilterSensitiveLog);
parcelHelpers.export(exports, "GlobalSecondaryIndexUpdateFilterSensitiveLog", ()=>GlobalSecondaryIndexUpdateFilterSensitiveLog);
parcelHelpers.export(exports, "UpdateReplicationGroupMemberActionFilterSensitiveLog", ()=>UpdateReplicationGroupMemberActionFilterSensitiveLog);
parcelHelpers.export(exports, "ReplicationGroupUpdateFilterSensitiveLog", ()=>ReplicationGroupUpdateFilterSensitiveLog);
parcelHelpers.export(exports, "UpdateTableInputFilterSensitiveLog", ()=>UpdateTableInputFilterSensitiveLog);
parcelHelpers.export(exports, "UpdateTableOutputFilterSensitiveLog", ()=>UpdateTableOutputFilterSensitiveLog);
parcelHelpers.export(exports, "GlobalSecondaryIndexAutoScalingUpdateFilterSensitiveLog", ()=>GlobalSecondaryIndexAutoScalingUpdateFilterSensitiveLog);
parcelHelpers.export(exports, "ReplicaGlobalSecondaryIndexAutoScalingUpdateFilterSensitiveLog", ()=>ReplicaGlobalSecondaryIndexAutoScalingUpdateFilterSensitiveLog);
parcelHelpers.export(exports, "ReplicaAutoScalingUpdateFilterSensitiveLog", ()=>ReplicaAutoScalingUpdateFilterSensitiveLog);
parcelHelpers.export(exports, "UpdateTableReplicaAutoScalingInputFilterSensitiveLog", ()=>UpdateTableReplicaAutoScalingInputFilterSensitiveLog);
parcelHelpers.export(exports, "UpdateTableReplicaAutoScalingOutputFilterSensitiveLog", ()=>UpdateTableReplicaAutoScalingOutputFilterSensitiveLog);
parcelHelpers.export(exports, "TimeToLiveSpecificationFilterSensitiveLog", ()=>TimeToLiveSpecificationFilterSensitiveLog);
parcelHelpers.export(exports, "UpdateTimeToLiveInputFilterSensitiveLog", ()=>UpdateTimeToLiveInputFilterSensitiveLog);
parcelHelpers.export(exports, "UpdateTimeToLiveOutputFilterSensitiveLog", ()=>UpdateTimeToLiveOutputFilterSensitiveLog);
parcelHelpers.export(exports, "AttributeValueFilterSensitiveLog", ()=>AttributeValueFilterSensitiveLog);
parcelHelpers.export(exports, "AttributeValueUpdateFilterSensitiveLog", ()=>AttributeValueUpdateFilterSensitiveLog);
parcelHelpers.export(exports, "BatchStatementRequestFilterSensitiveLog", ()=>BatchStatementRequestFilterSensitiveLog);
parcelHelpers.export(exports, "BatchStatementResponseFilterSensitiveLog", ()=>BatchStatementResponseFilterSensitiveLog);
parcelHelpers.export(exports, "CancellationReasonFilterSensitiveLog", ()=>CancellationReasonFilterSensitiveLog);
parcelHelpers.export(exports, "ConditionFilterSensitiveLog", ()=>ConditionFilterSensitiveLog);
parcelHelpers.export(exports, "DeleteRequestFilterSensitiveLog", ()=>DeleteRequestFilterSensitiveLog);
parcelHelpers.export(exports, "ExecuteStatementInputFilterSensitiveLog", ()=>ExecuteStatementInputFilterSensitiveLog);
parcelHelpers.export(exports, "GetFilterSensitiveLog", ()=>GetFilterSensitiveLog);
parcelHelpers.export(exports, "GetItemInputFilterSensitiveLog", ()=>GetItemInputFilterSensitiveLog);
parcelHelpers.export(exports, "GetItemOutputFilterSensitiveLog", ()=>GetItemOutputFilterSensitiveLog);
parcelHelpers.export(exports, "ItemCollectionMetricsFilterSensitiveLog", ()=>ItemCollectionMetricsFilterSensitiveLog);
parcelHelpers.export(exports, "ItemResponseFilterSensitiveLog", ()=>ItemResponseFilterSensitiveLog);
parcelHelpers.export(exports, "ParameterizedStatementFilterSensitiveLog", ()=>ParameterizedStatementFilterSensitiveLog);
parcelHelpers.export(exports, "PutRequestFilterSensitiveLog", ()=>PutRequestFilterSensitiveLog);
parcelHelpers.export(exports, "KeysAndAttributesFilterSensitiveLog", ()=>KeysAndAttributesFilterSensitiveLog);
parcelHelpers.export(exports, "TransactGetItemFilterSensitiveLog", ()=>TransactGetItemFilterSensitiveLog);
parcelHelpers.export(exports, "BatchExecuteStatementInputFilterSensitiveLog", ()=>BatchExecuteStatementInputFilterSensitiveLog);
parcelHelpers.export(exports, "BatchExecuteStatementOutputFilterSensitiveLog", ()=>BatchExecuteStatementOutputFilterSensitiveLog);
parcelHelpers.export(exports, "ExecuteTransactionInputFilterSensitiveLog", ()=>ExecuteTransactionInputFilterSensitiveLog);
parcelHelpers.export(exports, "ExecuteTransactionOutputFilterSensitiveLog", ()=>ExecuteTransactionOutputFilterSensitiveLog);
parcelHelpers.export(exports, "TransactGetItemsOutputFilterSensitiveLog", ()=>TransactGetItemsOutputFilterSensitiveLog);
parcelHelpers.export(exports, "BatchGetItemInputFilterSensitiveLog", ()=>BatchGetItemInputFilterSensitiveLog);
parcelHelpers.export(exports, "ExpectedAttributeValueFilterSensitiveLog", ()=>ExpectedAttributeValueFilterSensitiveLog);
parcelHelpers.export(exports, "TransactGetItemsInputFilterSensitiveLog", ()=>TransactGetItemsInputFilterSensitiveLog);
parcelHelpers.export(exports, "TransactWriteItemsOutputFilterSensitiveLog", ()=>TransactWriteItemsOutputFilterSensitiveLog);
parcelHelpers.export(exports, "ConditionCheckFilterSensitiveLog", ()=>ConditionCheckFilterSensitiveLog);
parcelHelpers.export(exports, "DeleteFilterSensitiveLog", ()=>DeleteFilterSensitiveLog);
parcelHelpers.export(exports, "PutFilterSensitiveLog", ()=>PutFilterSensitiveLog);
parcelHelpers.export(exports, "UpdateFilterSensitiveLog", ()=>UpdateFilterSensitiveLog);
parcelHelpers.export(exports, "DeleteItemOutputFilterSensitiveLog", ()=>DeleteItemOutputFilterSensitiveLog);
parcelHelpers.export(exports, "ExecuteStatementOutputFilterSensitiveLog", ()=>ExecuteStatementOutputFilterSensitiveLog);
parcelHelpers.export(exports, "PutItemOutputFilterSensitiveLog", ()=>PutItemOutputFilterSensitiveLog);
parcelHelpers.export(exports, "QueryOutputFilterSensitiveLog", ()=>QueryOutputFilterSensitiveLog);
parcelHelpers.export(exports, "ScanOutputFilterSensitiveLog", ()=>ScanOutputFilterSensitiveLog);
parcelHelpers.export(exports, "UpdateItemOutputFilterSensitiveLog", ()=>UpdateItemOutputFilterSensitiveLog);
parcelHelpers.export(exports, "WriteRequestFilterSensitiveLog", ()=>WriteRequestFilterSensitiveLog);
parcelHelpers.export(exports, "BatchGetItemOutputFilterSensitiveLog", ()=>BatchGetItemOutputFilterSensitiveLog);
parcelHelpers.export(exports, "ScanInputFilterSensitiveLog", ()=>ScanInputFilterSensitiveLog);
parcelHelpers.export(exports, "BatchWriteItemInputFilterSensitiveLog", ()=>BatchWriteItemInputFilterSensitiveLog);
parcelHelpers.export(exports, "DeleteItemInputFilterSensitiveLog", ()=>DeleteItemInputFilterSensitiveLog);
parcelHelpers.export(exports, "PutItemInputFilterSensitiveLog", ()=>PutItemInputFilterSensitiveLog);
parcelHelpers.export(exports, "QueryInputFilterSensitiveLog", ()=>QueryInputFilterSensitiveLog);
parcelHelpers.export(exports, "BatchWriteItemOutputFilterSensitiveLog", ()=>BatchWriteItemOutputFilterSensitiveLog);
parcelHelpers.export(exports, "UpdateItemInputFilterSensitiveLog", ()=>UpdateItemInputFilterSensitiveLog);
parcelHelpers.export(exports, "TransactWriteItemFilterSensitiveLog", ()=>TransactWriteItemFilterSensitiveLog);
parcelHelpers.export(exports, "TransactWriteItemsInputFilterSensitiveLog", ()=>TransactWriteItemsInputFilterSensitiveLog);
var _dynamoDBServiceException = require("./DynamoDBServiceException");
var BackupType;
(function(BackupType) {
    BackupType["AWS_BACKUP"] = "AWS_BACKUP";
    BackupType["SYSTEM"] = "SYSTEM";
    BackupType["USER"] = "USER";
})(BackupType || (BackupType = {}));
class BackupInUseException extends (0, _dynamoDBServiceException.DynamoDBServiceException) {
    constructor(opts){
        super({
            name: "BackupInUseException",
            $fault: "client",
            ...opts
        });
        this.name = "BackupInUseException";
        this.$fault = "client";
        Object.setPrototypeOf(this, BackupInUseException.prototype);
    }
}
class BackupNotFoundException extends (0, _dynamoDBServiceException.DynamoDBServiceException) {
    constructor(opts){
        super({
            name: "BackupNotFoundException",
            $fault: "client",
            ...opts
        });
        this.name = "BackupNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, BackupNotFoundException.prototype);
    }
}
var BackupTypeFilter;
(function(BackupTypeFilter) {
    BackupTypeFilter["ALL"] = "ALL";
    BackupTypeFilter["AWS_BACKUP"] = "AWS_BACKUP";
    BackupTypeFilter["SYSTEM"] = "SYSTEM";
    BackupTypeFilter["USER"] = "USER";
})(BackupTypeFilter || (BackupTypeFilter = {}));
var BatchStatementErrorCodeEnum;
(function(BatchStatementErrorCodeEnum) {
    BatchStatementErrorCodeEnum["AccessDenied"] = "AccessDenied";
    BatchStatementErrorCodeEnum["ConditionalCheckFailed"] = "ConditionalCheckFailed";
    BatchStatementErrorCodeEnum["DuplicateItem"] = "DuplicateItem";
    BatchStatementErrorCodeEnum["InternalServerError"] = "InternalServerError";
    BatchStatementErrorCodeEnum["ItemCollectionSizeLimitExceeded"] = "ItemCollectionSizeLimitExceeded";
    BatchStatementErrorCodeEnum["ProvisionedThroughputExceeded"] = "ProvisionedThroughputExceeded";
    BatchStatementErrorCodeEnum["RequestLimitExceeded"] = "RequestLimitExceeded";
    BatchStatementErrorCodeEnum["ResourceNotFound"] = "ResourceNotFound";
    BatchStatementErrorCodeEnum["ThrottlingError"] = "ThrottlingError";
    BatchStatementErrorCodeEnum["TransactionConflict"] = "TransactionConflict";
    BatchStatementErrorCodeEnum["ValidationError"] = "ValidationError";
})(BatchStatementErrorCodeEnum || (BatchStatementErrorCodeEnum = {}));
class InternalServerError extends (0, _dynamoDBServiceException.DynamoDBServiceException) {
    constructor(opts){
        super({
            name: "InternalServerError",
            $fault: "server",
            ...opts
        });
        this.name = "InternalServerError";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerError.prototype);
    }
}
class RequestLimitExceeded extends (0, _dynamoDBServiceException.DynamoDBServiceException) {
    constructor(opts){
        super({
            name: "RequestLimitExceeded",
            $fault: "client",
            ...opts
        });
        this.name = "RequestLimitExceeded";
        this.$fault = "client";
        Object.setPrototypeOf(this, RequestLimitExceeded.prototype);
    }
}
class InvalidEndpointException extends (0, _dynamoDBServiceException.DynamoDBServiceException) {
    constructor(opts){
        super({
            name: "InvalidEndpointException",
            $fault: "client",
            ...opts
        });
        this.name = "InvalidEndpointException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidEndpointException.prototype);
        this.Message = opts.Message;
    }
}
class ProvisionedThroughputExceededException extends (0, _dynamoDBServiceException.DynamoDBServiceException) {
    constructor(opts){
        super({
            name: "ProvisionedThroughputExceededException",
            $fault: "client",
            ...opts
        });
        this.name = "ProvisionedThroughputExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ProvisionedThroughputExceededException.prototype);
    }
}
class ResourceNotFoundException extends (0, _dynamoDBServiceException.DynamoDBServiceException) {
    constructor(opts){
        super({
            name: "ResourceNotFoundException",
            $fault: "client",
            ...opts
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
    }
}
class ItemCollectionSizeLimitExceededException extends (0, _dynamoDBServiceException.DynamoDBServiceException) {
    constructor(opts){
        super({
            name: "ItemCollectionSizeLimitExceededException",
            $fault: "client",
            ...opts
        });
        this.name = "ItemCollectionSizeLimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ItemCollectionSizeLimitExceededException.prototype);
    }
}
class ConditionalCheckFailedException extends (0, _dynamoDBServiceException.DynamoDBServiceException) {
    constructor(opts){
        super({
            name: "ConditionalCheckFailedException",
            $fault: "client",
            ...opts
        });
        this.name = "ConditionalCheckFailedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ConditionalCheckFailedException.prototype);
    }
}
class ContinuousBackupsUnavailableException extends (0, _dynamoDBServiceException.DynamoDBServiceException) {
    constructor(opts){
        super({
            name: "ContinuousBackupsUnavailableException",
            $fault: "client",
            ...opts
        });
        this.name = "ContinuousBackupsUnavailableException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ContinuousBackupsUnavailableException.prototype);
    }
}
class LimitExceededException extends (0, _dynamoDBServiceException.DynamoDBServiceException) {
    constructor(opts){
        super({
            name: "LimitExceededException",
            $fault: "client",
            ...opts
        });
        this.name = "LimitExceededException";
        this.$fault = "client";
        Object.setPrototypeOf(this, LimitExceededException.prototype);
    }
}
class TableInUseException extends (0, _dynamoDBServiceException.DynamoDBServiceException) {
    constructor(opts){
        super({
            name: "TableInUseException",
            $fault: "client",
            ...opts
        });
        this.name = "TableInUseException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TableInUseException.prototype);
    }
}
class TableNotFoundException extends (0, _dynamoDBServiceException.DynamoDBServiceException) {
    constructor(opts){
        super({
            name: "TableNotFoundException",
            $fault: "client",
            ...opts
        });
        this.name = "TableNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TableNotFoundException.prototype);
    }
}
var TableClass;
(function(TableClass) {
    TableClass["STANDARD"] = "STANDARD";
    TableClass["STANDARD_INFREQUENT_ACCESS"] = "STANDARD_INFREQUENT_ACCESS";
})(TableClass || (TableClass = {}));
class GlobalTableAlreadyExistsException extends (0, _dynamoDBServiceException.DynamoDBServiceException) {
    constructor(opts){
        super({
            name: "GlobalTableAlreadyExistsException",
            $fault: "client",
            ...opts
        });
        this.name = "GlobalTableAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, GlobalTableAlreadyExistsException.prototype);
    }
}
class ResourceInUseException extends (0, _dynamoDBServiceException.DynamoDBServiceException) {
    constructor(opts){
        super({
            name: "ResourceInUseException",
            $fault: "client",
            ...opts
        });
        this.name = "ResourceInUseException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceInUseException.prototype);
    }
}
class TransactionConflictException extends (0, _dynamoDBServiceException.DynamoDBServiceException) {
    constructor(opts){
        super({
            name: "TransactionConflictException",
            $fault: "client",
            ...opts
        });
        this.name = "TransactionConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TransactionConflictException.prototype);
    }
}
var ExportFormat;
(function(ExportFormat) {
    ExportFormat["DYNAMODB_JSON"] = "DYNAMODB_JSON";
    ExportFormat["ION"] = "ION";
})(ExportFormat || (ExportFormat = {}));
var ExportStatus;
(function(ExportStatus) {
    ExportStatus["COMPLETED"] = "COMPLETED";
    ExportStatus["FAILED"] = "FAILED";
    ExportStatus["IN_PROGRESS"] = "IN_PROGRESS";
})(ExportStatus || (ExportStatus = {}));
class ExportNotFoundException extends (0, _dynamoDBServiceException.DynamoDBServiceException) {
    constructor(opts){
        super({
            name: "ExportNotFoundException",
            $fault: "client",
            ...opts
        });
        this.name = "ExportNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ExportNotFoundException.prototype);
    }
}
class GlobalTableNotFoundException extends (0, _dynamoDBServiceException.DynamoDBServiceException) {
    constructor(opts){
        super({
            name: "GlobalTableNotFoundException",
            $fault: "client",
            ...opts
        });
        this.name = "GlobalTableNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, GlobalTableNotFoundException.prototype);
    }
}
var ImportStatus;
(function(ImportStatus) {
    ImportStatus["CANCELLED"] = "CANCELLED";
    ImportStatus["CANCELLING"] = "CANCELLING";
    ImportStatus["COMPLETED"] = "COMPLETED";
    ImportStatus["FAILED"] = "FAILED";
    ImportStatus["IN_PROGRESS"] = "IN_PROGRESS";
})(ImportStatus || (ImportStatus = {}));
var InputCompressionType;
(function(InputCompressionType) {
    InputCompressionType["GZIP"] = "GZIP";
    InputCompressionType["NONE"] = "NONE";
    InputCompressionType["ZSTD"] = "ZSTD";
})(InputCompressionType || (InputCompressionType = {}));
var InputFormat;
(function(InputFormat) {
    InputFormat["CSV"] = "CSV";
    InputFormat["DYNAMODB_JSON"] = "DYNAMODB_JSON";
    InputFormat["ION"] = "ION";
})(InputFormat || (InputFormat = {}));
class ImportNotFoundException extends (0, _dynamoDBServiceException.DynamoDBServiceException) {
    constructor(opts){
        super({
            name: "ImportNotFoundException",
            $fault: "client",
            ...opts
        });
        this.name = "ImportNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ImportNotFoundException.prototype);
    }
}
class DuplicateItemException extends (0, _dynamoDBServiceException.DynamoDBServiceException) {
    constructor(opts){
        super({
            name: "DuplicateItemException",
            $fault: "client",
            ...opts
        });
        this.name = "DuplicateItemException";
        this.$fault = "client";
        Object.setPrototypeOf(this, DuplicateItemException.prototype);
    }
}
class IdempotentParameterMismatchException extends (0, _dynamoDBServiceException.DynamoDBServiceException) {
    constructor(opts){
        super({
            name: "IdempotentParameterMismatchException",
            $fault: "client",
            ...opts
        });
        this.name = "IdempotentParameterMismatchException";
        this.$fault = "client";
        Object.setPrototypeOf(this, IdempotentParameterMismatchException.prototype);
        this.Message = opts.Message;
    }
}
class TransactionInProgressException extends (0, _dynamoDBServiceException.DynamoDBServiceException) {
    constructor(opts){
        super({
            name: "TransactionInProgressException",
            $fault: "client",
            ...opts
        });
        this.name = "TransactionInProgressException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TransactionInProgressException.prototype);
        this.Message = opts.Message;
    }
}
class ExportConflictException extends (0, _dynamoDBServiceException.DynamoDBServiceException) {
    constructor(opts){
        super({
            name: "ExportConflictException",
            $fault: "client",
            ...opts
        });
        this.name = "ExportConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ExportConflictException.prototype);
    }
}
class InvalidExportTimeException extends (0, _dynamoDBServiceException.DynamoDBServiceException) {
    constructor(opts){
        super({
            name: "InvalidExportTimeException",
            $fault: "client",
            ...opts
        });
        this.name = "InvalidExportTimeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidExportTimeException.prototype);
    }
}
class PointInTimeRecoveryUnavailableException extends (0, _dynamoDBServiceException.DynamoDBServiceException) {
    constructor(opts){
        super({
            name: "PointInTimeRecoveryUnavailableException",
            $fault: "client",
            ...opts
        });
        this.name = "PointInTimeRecoveryUnavailableException";
        this.$fault = "client";
        Object.setPrototypeOf(this, PointInTimeRecoveryUnavailableException.prototype);
    }
}
class ImportConflictException extends (0, _dynamoDBServiceException.DynamoDBServiceException) {
    constructor(opts){
        super({
            name: "ImportConflictException",
            $fault: "client",
            ...opts
        });
        this.name = "ImportConflictException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ImportConflictException.prototype);
    }
}
class TableAlreadyExistsException extends (0, _dynamoDBServiceException.DynamoDBServiceException) {
    constructor(opts){
        super({
            name: "TableAlreadyExistsException",
            $fault: "client",
            ...opts
        });
        this.name = "TableAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TableAlreadyExistsException.prototype);
    }
}
class InvalidRestoreTimeException extends (0, _dynamoDBServiceException.DynamoDBServiceException) {
    constructor(opts){
        super({
            name: "InvalidRestoreTimeException",
            $fault: "client",
            ...opts
        });
        this.name = "InvalidRestoreTimeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidRestoreTimeException.prototype);
    }
}
class ReplicaAlreadyExistsException extends (0, _dynamoDBServiceException.DynamoDBServiceException) {
    constructor(opts){
        super({
            name: "ReplicaAlreadyExistsException",
            $fault: "client",
            ...opts
        });
        this.name = "ReplicaAlreadyExistsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ReplicaAlreadyExistsException.prototype);
    }
}
class ReplicaNotFoundException extends (0, _dynamoDBServiceException.DynamoDBServiceException) {
    constructor(opts){
        super({
            name: "ReplicaNotFoundException",
            $fault: "client",
            ...opts
        });
        this.name = "ReplicaNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ReplicaNotFoundException.prototype);
    }
}
class IndexNotFoundException extends (0, _dynamoDBServiceException.DynamoDBServiceException) {
    constructor(opts){
        super({
            name: "IndexNotFoundException",
            $fault: "client",
            ...opts
        });
        this.name = "IndexNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, IndexNotFoundException.prototype);
    }
}
var AttributeValue;
(function(AttributeValue) {
    AttributeValue.visit = (value, visitor)=>{
        if (value.S !== undefined) return visitor.S(value.S);
        if (value.N !== undefined) return visitor.N(value.N);
        if (value.B !== undefined) return visitor.B(value.B);
        if (value.SS !== undefined) return visitor.SS(value.SS);
        if (value.NS !== undefined) return visitor.NS(value.NS);
        if (value.BS !== undefined) return visitor.BS(value.BS);
        if (value.M !== undefined) return visitor.M(value.M);
        if (value.L !== undefined) return visitor.L(value.L);
        if (value.NULL !== undefined) return visitor.NULL(value.NULL);
        if (value.BOOL !== undefined) return visitor.BOOL(value.BOOL);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(AttributeValue || (AttributeValue = {}));
class TransactionCanceledException extends (0, _dynamoDBServiceException.DynamoDBServiceException) {
    constructor(opts){
        super({
            name: "TransactionCanceledException",
            $fault: "client",
            ...opts
        });
        this.name = "TransactionCanceledException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TransactionCanceledException.prototype);
        this.Message = opts.Message;
        this.CancellationReasons = opts.CancellationReasons;
    }
}
const ArchivalSummaryFilterSensitiveLog = (obj)=>({
        ...obj
    });
const AttributeDefinitionFilterSensitiveLog = (obj)=>({
        ...obj
    });
const AutoScalingTargetTrackingScalingPolicyConfigurationDescriptionFilterSensitiveLog = (obj)=>({
        ...obj
    });
const AutoScalingPolicyDescriptionFilterSensitiveLog = (obj)=>({
        ...obj
    });
const AutoScalingTargetTrackingScalingPolicyConfigurationUpdateFilterSensitiveLog = (obj)=>({
        ...obj
    });
const AutoScalingPolicyUpdateFilterSensitiveLog = (obj)=>({
        ...obj
    });
const AutoScalingSettingsDescriptionFilterSensitiveLog = (obj)=>({
        ...obj
    });
const AutoScalingSettingsUpdateFilterSensitiveLog = (obj)=>({
        ...obj
    });
const BackupDetailsFilterSensitiveLog = (obj)=>({
        ...obj
    });
const KeySchemaElementFilterSensitiveLog = (obj)=>({
        ...obj
    });
const ProvisionedThroughputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const SourceTableDetailsFilterSensitiveLog = (obj)=>({
        ...obj
    });
const ProjectionFilterSensitiveLog = (obj)=>({
        ...obj
    });
const GlobalSecondaryIndexInfoFilterSensitiveLog = (obj)=>({
        ...obj
    });
const LocalSecondaryIndexInfoFilterSensitiveLog = (obj)=>({
        ...obj
    });
const SSEDescriptionFilterSensitiveLog = (obj)=>({
        ...obj
    });
const StreamSpecificationFilterSensitiveLog = (obj)=>({
        ...obj
    });
const TimeToLiveDescriptionFilterSensitiveLog = (obj)=>({
        ...obj
    });
const SourceTableFeatureDetailsFilterSensitiveLog = (obj)=>({
        ...obj
    });
const BackupDescriptionFilterSensitiveLog = (obj)=>({
        ...obj
    });
const BackupSummaryFilterSensitiveLog = (obj)=>({
        ...obj
    });
const CapacityFilterSensitiveLog = (obj)=>({
        ...obj
    });
const ConsumedCapacityFilterSensitiveLog = (obj)=>({
        ...obj
    });
const BatchStatementErrorFilterSensitiveLog = (obj)=>({
        ...obj
    });
const BillingModeSummaryFilterSensitiveLog = (obj)=>({
        ...obj
    });
const PointInTimeRecoveryDescriptionFilterSensitiveLog = (obj)=>({
        ...obj
    });
const ContinuousBackupsDescriptionFilterSensitiveLog = (obj)=>({
        ...obj
    });
const ContributorInsightsSummaryFilterSensitiveLog = (obj)=>({
        ...obj
    });
const CreateBackupInputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const CreateBackupOutputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const CreateGlobalSecondaryIndexActionFilterSensitiveLog = (obj)=>({
        ...obj
    });
const ReplicaFilterSensitiveLog = (obj)=>({
        ...obj
    });
const CreateGlobalTableInputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const ProvisionedThroughputOverrideFilterSensitiveLog = (obj)=>({
        ...obj
    });
const ReplicaGlobalSecondaryIndexDescriptionFilterSensitiveLog = (obj)=>({
        ...obj
    });
const TableClassSummaryFilterSensitiveLog = (obj)=>({
        ...obj
    });
const ReplicaDescriptionFilterSensitiveLog = (obj)=>({
        ...obj
    });
const GlobalTableDescriptionFilterSensitiveLog = (obj)=>({
        ...obj
    });
const CreateGlobalTableOutputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const CreateReplicaActionFilterSensitiveLog = (obj)=>({
        ...obj
    });
const ReplicaGlobalSecondaryIndexFilterSensitiveLog = (obj)=>({
        ...obj
    });
const CreateReplicationGroupMemberActionFilterSensitiveLog = (obj)=>({
        ...obj
    });
const GlobalSecondaryIndexFilterSensitiveLog = (obj)=>({
        ...obj
    });
const LocalSecondaryIndexFilterSensitiveLog = (obj)=>({
        ...obj
    });
const SSESpecificationFilterSensitiveLog = (obj)=>({
        ...obj
    });
const TagFilterSensitiveLog = (obj)=>({
        ...obj
    });
const CreateTableInputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const ProvisionedThroughputDescriptionFilterSensitiveLog = (obj)=>({
        ...obj
    });
const GlobalSecondaryIndexDescriptionFilterSensitiveLog = (obj)=>({
        ...obj
    });
const LocalSecondaryIndexDescriptionFilterSensitiveLog = (obj)=>({
        ...obj
    });
const RestoreSummaryFilterSensitiveLog = (obj)=>({
        ...obj
    });
const TableDescriptionFilterSensitiveLog = (obj)=>({
        ...obj
    });
const CreateTableOutputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const CsvOptionsFilterSensitiveLog = (obj)=>({
        ...obj
    });
const DeleteBackupInputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const DeleteBackupOutputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const DeleteGlobalSecondaryIndexActionFilterSensitiveLog = (obj)=>({
        ...obj
    });
const DeleteReplicaActionFilterSensitiveLog = (obj)=>({
        ...obj
    });
const DeleteReplicationGroupMemberActionFilterSensitiveLog = (obj)=>({
        ...obj
    });
const DeleteTableInputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const DeleteTableOutputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const DescribeBackupInputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const DescribeBackupOutputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const DescribeContinuousBackupsInputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const DescribeContinuousBackupsOutputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const DescribeContributorInsightsInputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const FailureExceptionFilterSensitiveLog = (obj)=>({
        ...obj
    });
const DescribeContributorInsightsOutputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const DescribeEndpointsRequestFilterSensitiveLog = (obj)=>({
        ...obj
    });
const EndpointFilterSensitiveLog = (obj)=>({
        ...obj
    });
const DescribeEndpointsResponseFilterSensitiveLog = (obj)=>({
        ...obj
    });
const DescribeExportInputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const ExportDescriptionFilterSensitiveLog = (obj)=>({
        ...obj
    });
const DescribeExportOutputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const DescribeGlobalTableInputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const DescribeGlobalTableOutputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const DescribeGlobalTableSettingsInputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const ReplicaGlobalSecondaryIndexSettingsDescriptionFilterSensitiveLog = (obj)=>({
        ...obj
    });
const ReplicaSettingsDescriptionFilterSensitiveLog = (obj)=>({
        ...obj
    });
const DescribeGlobalTableSettingsOutputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const DescribeImportInputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const InputFormatOptionsFilterSensitiveLog = (obj)=>({
        ...obj
    });
const S3BucketSourceFilterSensitiveLog = (obj)=>({
        ...obj
    });
const TableCreationParametersFilterSensitiveLog = (obj)=>({
        ...obj
    });
const ImportTableDescriptionFilterSensitiveLog = (obj)=>({
        ...obj
    });
const DescribeImportOutputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const DescribeKinesisStreamingDestinationInputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const KinesisDataStreamDestinationFilterSensitiveLog = (obj)=>({
        ...obj
    });
const DescribeKinesisStreamingDestinationOutputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const DescribeLimitsInputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const DescribeLimitsOutputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const DescribeTableInputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const DescribeTableOutputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const DescribeTableReplicaAutoScalingInputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const ReplicaGlobalSecondaryIndexAutoScalingDescriptionFilterSensitiveLog = (obj)=>({
        ...obj
    });
const ReplicaAutoScalingDescriptionFilterSensitiveLog = (obj)=>({
        ...obj
    });
const TableAutoScalingDescriptionFilterSensitiveLog = (obj)=>({
        ...obj
    });
const DescribeTableReplicaAutoScalingOutputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const DescribeTimeToLiveInputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const DescribeTimeToLiveOutputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const KinesisStreamingDestinationInputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const KinesisStreamingDestinationOutputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const ExportTableToPointInTimeInputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const ExportTableToPointInTimeOutputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const ImportTableInputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const ImportTableOutputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const ListBackupsInputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const ListBackupsOutputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const ListContributorInsightsInputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const ListContributorInsightsOutputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const ListExportsInputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const ExportSummaryFilterSensitiveLog = (obj)=>({
        ...obj
    });
const ListExportsOutputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const ListGlobalTablesInputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const GlobalTableFilterSensitiveLog = (obj)=>({
        ...obj
    });
const ListGlobalTablesOutputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const ListImportsInputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const ImportSummaryFilterSensitiveLog = (obj)=>({
        ...obj
    });
const ListImportsOutputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const ListTablesInputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const ListTablesOutputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const ListTagsOfResourceInputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const ListTagsOfResourceOutputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const RestoreTableFromBackupInputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const RestoreTableFromBackupOutputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const RestoreTableToPointInTimeInputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const RestoreTableToPointInTimeOutputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const TagResourceInputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const UntagResourceInputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const PointInTimeRecoverySpecificationFilterSensitiveLog = (obj)=>({
        ...obj
    });
const UpdateContinuousBackupsInputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const UpdateContinuousBackupsOutputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const UpdateContributorInsightsInputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const UpdateContributorInsightsOutputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const ReplicaUpdateFilterSensitiveLog = (obj)=>({
        ...obj
    });
const UpdateGlobalTableInputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const UpdateGlobalTableOutputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const GlobalTableGlobalSecondaryIndexSettingsUpdateFilterSensitiveLog = (obj)=>({
        ...obj
    });
const ReplicaGlobalSecondaryIndexSettingsUpdateFilterSensitiveLog = (obj)=>({
        ...obj
    });
const ReplicaSettingsUpdateFilterSensitiveLog = (obj)=>({
        ...obj
    });
const UpdateGlobalTableSettingsInputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const UpdateGlobalTableSettingsOutputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const UpdateGlobalSecondaryIndexActionFilterSensitiveLog = (obj)=>({
        ...obj
    });
const GlobalSecondaryIndexUpdateFilterSensitiveLog = (obj)=>({
        ...obj
    });
const UpdateReplicationGroupMemberActionFilterSensitiveLog = (obj)=>({
        ...obj
    });
const ReplicationGroupUpdateFilterSensitiveLog = (obj)=>({
        ...obj
    });
const UpdateTableInputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const UpdateTableOutputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const GlobalSecondaryIndexAutoScalingUpdateFilterSensitiveLog = (obj)=>({
        ...obj
    });
const ReplicaGlobalSecondaryIndexAutoScalingUpdateFilterSensitiveLog = (obj)=>({
        ...obj
    });
const ReplicaAutoScalingUpdateFilterSensitiveLog = (obj)=>({
        ...obj
    });
const UpdateTableReplicaAutoScalingInputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const UpdateTableReplicaAutoScalingOutputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const TimeToLiveSpecificationFilterSensitiveLog = (obj)=>({
        ...obj
    });
const UpdateTimeToLiveInputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const UpdateTimeToLiveOutputFilterSensitiveLog = (obj)=>({
        ...obj
    });
const AttributeValueFilterSensitiveLog = (obj)=>{
    if (obj.S !== undefined) return {
        S: obj.S
    };
    if (obj.N !== undefined) return {
        N: obj.N
    };
    if (obj.B !== undefined) return {
        B: obj.B
    };
    if (obj.SS !== undefined) return {
        SS: obj.SS
    };
    if (obj.NS !== undefined) return {
        NS: obj.NS
    };
    if (obj.BS !== undefined) return {
        BS: obj.BS
    };
    if (obj.M !== undefined) return {
        M: Object.entries(obj.M).reduce((acc, [key, value])=>({
                ...acc,
                [key]: AttributeValueFilterSensitiveLog(value)
            }), {})
    };
    if (obj.L !== undefined) return {
        L: obj.L.map((item)=>AttributeValueFilterSensitiveLog(item))
    };
    if (obj.NULL !== undefined) return {
        NULL: obj.NULL
    };
    if (obj.BOOL !== undefined) return {
        BOOL: obj.BOOL
    };
    if (obj.$unknown !== undefined) return {
        [obj.$unknown[0]]: "UNKNOWN"
    };
};
const AttributeValueUpdateFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Value && {
            Value: AttributeValueFilterSensitiveLog(obj.Value)
        }
    });
const BatchStatementRequestFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Parameters && {
            Parameters: obj.Parameters.map((item)=>AttributeValueFilterSensitiveLog(item))
        }
    });
const BatchStatementResponseFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Item && {
            Item: Object.entries(obj.Item).reduce((acc, [key, value])=>({
                    ...acc,
                    [key]: AttributeValueFilterSensitiveLog(value)
                }), {})
        }
    });
const CancellationReasonFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Item && {
            Item: Object.entries(obj.Item).reduce((acc, [key, value])=>({
                    ...acc,
                    [key]: AttributeValueFilterSensitiveLog(value)
                }), {})
        }
    });
const ConditionFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.AttributeValueList && {
            AttributeValueList: obj.AttributeValueList.map((item)=>AttributeValueFilterSensitiveLog(item))
        }
    });
const DeleteRequestFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Key && {
            Key: Object.entries(obj.Key).reduce((acc, [key, value])=>({
                    ...acc,
                    [key]: AttributeValueFilterSensitiveLog(value)
                }), {})
        }
    });
const ExecuteStatementInputFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Parameters && {
            Parameters: obj.Parameters.map((item)=>AttributeValueFilterSensitiveLog(item))
        }
    });
const GetFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Key && {
            Key: Object.entries(obj.Key).reduce((acc, [key, value])=>({
                    ...acc,
                    [key]: AttributeValueFilterSensitiveLog(value)
                }), {})
        }
    });
const GetItemInputFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Key && {
            Key: Object.entries(obj.Key).reduce((acc, [key, value])=>({
                    ...acc,
                    [key]: AttributeValueFilterSensitiveLog(value)
                }), {})
        }
    });
const GetItemOutputFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Item && {
            Item: Object.entries(obj.Item).reduce((acc, [key, value])=>({
                    ...acc,
                    [key]: AttributeValueFilterSensitiveLog(value)
                }), {})
        }
    });
const ItemCollectionMetricsFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.ItemCollectionKey && {
            ItemCollectionKey: Object.entries(obj.ItemCollectionKey).reduce((acc, [key, value])=>({
                    ...acc,
                    [key]: AttributeValueFilterSensitiveLog(value)
                }), {})
        }
    });
const ItemResponseFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Item && {
            Item: Object.entries(obj.Item).reduce((acc, [key, value])=>({
                    ...acc,
                    [key]: AttributeValueFilterSensitiveLog(value)
                }), {})
        }
    });
const ParameterizedStatementFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Parameters && {
            Parameters: obj.Parameters.map((item)=>AttributeValueFilterSensitiveLog(item))
        }
    });
const PutRequestFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Item && {
            Item: Object.entries(obj.Item).reduce((acc, [key, value])=>({
                    ...acc,
                    [key]: AttributeValueFilterSensitiveLog(value)
                }), {})
        }
    });
const KeysAndAttributesFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Keys && {
            Keys: obj.Keys.map((item)=>Object.entries(item).reduce((acc, [key, value])=>({
                        ...acc,
                        [key]: AttributeValueFilterSensitiveLog(value)
                    }), {}))
        }
    });
const TransactGetItemFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Get && {
            Get: GetFilterSensitiveLog(obj.Get)
        }
    });
const BatchExecuteStatementInputFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Statements && {
            Statements: obj.Statements.map((item)=>BatchStatementRequestFilterSensitiveLog(item))
        }
    });
const BatchExecuteStatementOutputFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Responses && {
            Responses: obj.Responses.map((item)=>BatchStatementResponseFilterSensitiveLog(item))
        }
    });
const ExecuteTransactionInputFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.TransactStatements && {
            TransactStatements: obj.TransactStatements.map((item)=>ParameterizedStatementFilterSensitiveLog(item))
        }
    });
const ExecuteTransactionOutputFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Responses && {
            Responses: obj.Responses.map((item)=>ItemResponseFilterSensitiveLog(item))
        }
    });
const TransactGetItemsOutputFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Responses && {
            Responses: obj.Responses.map((item)=>ItemResponseFilterSensitiveLog(item))
        }
    });
const BatchGetItemInputFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.RequestItems && {
            RequestItems: Object.entries(obj.RequestItems).reduce((acc, [key, value])=>({
                    ...acc,
                    [key]: KeysAndAttributesFilterSensitiveLog(value)
                }), {})
        }
    });
const ExpectedAttributeValueFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Value && {
            Value: AttributeValueFilterSensitiveLog(obj.Value)
        },
        ...obj.AttributeValueList && {
            AttributeValueList: obj.AttributeValueList.map((item)=>AttributeValueFilterSensitiveLog(item))
        }
    });
const TransactGetItemsInputFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.TransactItems && {
            TransactItems: obj.TransactItems.map((item)=>TransactGetItemFilterSensitiveLog(item))
        }
    });
const TransactWriteItemsOutputFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.ItemCollectionMetrics && {
            ItemCollectionMetrics: Object.entries(obj.ItemCollectionMetrics).reduce((acc, [key, value])=>({
                    ...acc,
                    [key]: value.map((item)=>ItemCollectionMetricsFilterSensitiveLog(item))
                }), {})
        }
    });
const ConditionCheckFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Key && {
            Key: Object.entries(obj.Key).reduce((acc, [key, value])=>({
                    ...acc,
                    [key]: AttributeValueFilterSensitiveLog(value)
                }), {})
        },
        ...obj.ExpressionAttributeValues && {
            ExpressionAttributeValues: Object.entries(obj.ExpressionAttributeValues).reduce((acc, [key, value])=>({
                    ...acc,
                    [key]: AttributeValueFilterSensitiveLog(value)
                }), {})
        }
    });
const DeleteFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Key && {
            Key: Object.entries(obj.Key).reduce((acc, [key, value])=>({
                    ...acc,
                    [key]: AttributeValueFilterSensitiveLog(value)
                }), {})
        },
        ...obj.ExpressionAttributeValues && {
            ExpressionAttributeValues: Object.entries(obj.ExpressionAttributeValues).reduce((acc, [key, value])=>({
                    ...acc,
                    [key]: AttributeValueFilterSensitiveLog(value)
                }), {})
        }
    });
const PutFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Item && {
            Item: Object.entries(obj.Item).reduce((acc, [key, value])=>({
                    ...acc,
                    [key]: AttributeValueFilterSensitiveLog(value)
                }), {})
        },
        ...obj.ExpressionAttributeValues && {
            ExpressionAttributeValues: Object.entries(obj.ExpressionAttributeValues).reduce((acc, [key, value])=>({
                    ...acc,
                    [key]: AttributeValueFilterSensitiveLog(value)
                }), {})
        }
    });
const UpdateFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Key && {
            Key: Object.entries(obj.Key).reduce((acc, [key, value])=>({
                    ...acc,
                    [key]: AttributeValueFilterSensitiveLog(value)
                }), {})
        },
        ...obj.ExpressionAttributeValues && {
            ExpressionAttributeValues: Object.entries(obj.ExpressionAttributeValues).reduce((acc, [key, value])=>({
                    ...acc,
                    [key]: AttributeValueFilterSensitiveLog(value)
                }), {})
        }
    });
const DeleteItemOutputFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Attributes && {
            Attributes: Object.entries(obj.Attributes).reduce((acc, [key, value])=>({
                    ...acc,
                    [key]: AttributeValueFilterSensitiveLog(value)
                }), {})
        },
        ...obj.ItemCollectionMetrics && {
            ItemCollectionMetrics: ItemCollectionMetricsFilterSensitiveLog(obj.ItemCollectionMetrics)
        }
    });
const ExecuteStatementOutputFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Items && {
            Items: obj.Items.map((item)=>Object.entries(item).reduce((acc, [key, value])=>({
                        ...acc,
                        [key]: AttributeValueFilterSensitiveLog(value)
                    }), {}))
        },
        ...obj.LastEvaluatedKey && {
            LastEvaluatedKey: Object.entries(obj.LastEvaluatedKey).reduce((acc, [key, value])=>({
                    ...acc,
                    [key]: AttributeValueFilterSensitiveLog(value)
                }), {})
        }
    });
const PutItemOutputFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Attributes && {
            Attributes: Object.entries(obj.Attributes).reduce((acc, [key, value])=>({
                    ...acc,
                    [key]: AttributeValueFilterSensitiveLog(value)
                }), {})
        },
        ...obj.ItemCollectionMetrics && {
            ItemCollectionMetrics: ItemCollectionMetricsFilterSensitiveLog(obj.ItemCollectionMetrics)
        }
    });
const QueryOutputFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Items && {
            Items: obj.Items.map((item)=>Object.entries(item).reduce((acc, [key, value])=>({
                        ...acc,
                        [key]: AttributeValueFilterSensitiveLog(value)
                    }), {}))
        },
        ...obj.LastEvaluatedKey && {
            LastEvaluatedKey: Object.entries(obj.LastEvaluatedKey).reduce((acc, [key, value])=>({
                    ...acc,
                    [key]: AttributeValueFilterSensitiveLog(value)
                }), {})
        }
    });
const ScanOutputFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Items && {
            Items: obj.Items.map((item)=>Object.entries(item).reduce((acc, [key, value])=>({
                        ...acc,
                        [key]: AttributeValueFilterSensitiveLog(value)
                    }), {}))
        },
        ...obj.LastEvaluatedKey && {
            LastEvaluatedKey: Object.entries(obj.LastEvaluatedKey).reduce((acc, [key, value])=>({
                    ...acc,
                    [key]: AttributeValueFilterSensitiveLog(value)
                }), {})
        }
    });
const UpdateItemOutputFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Attributes && {
            Attributes: Object.entries(obj.Attributes).reduce((acc, [key, value])=>({
                    ...acc,
                    [key]: AttributeValueFilterSensitiveLog(value)
                }), {})
        },
        ...obj.ItemCollectionMetrics && {
            ItemCollectionMetrics: ItemCollectionMetricsFilterSensitiveLog(obj.ItemCollectionMetrics)
        }
    });
const WriteRequestFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.PutRequest && {
            PutRequest: PutRequestFilterSensitiveLog(obj.PutRequest)
        },
        ...obj.DeleteRequest && {
            DeleteRequest: DeleteRequestFilterSensitiveLog(obj.DeleteRequest)
        }
    });
const BatchGetItemOutputFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Responses && {
            Responses: Object.entries(obj.Responses).reduce((acc, [key, value])=>({
                    ...acc,
                    [key]: value.map((item)=>Object.entries(item).reduce((acc, [key, value])=>({
                                ...acc,
                                [key]: AttributeValueFilterSensitiveLog(value)
                            }), {}))
                }), {})
        },
        ...obj.UnprocessedKeys && {
            UnprocessedKeys: Object.entries(obj.UnprocessedKeys).reduce((acc, [key, value])=>({
                    ...acc,
                    [key]: KeysAndAttributesFilterSensitiveLog(value)
                }), {})
        }
    });
const ScanInputFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.ScanFilter && {
            ScanFilter: Object.entries(obj.ScanFilter).reduce((acc, [key, value])=>({
                    ...acc,
                    [key]: ConditionFilterSensitiveLog(value)
                }), {})
        },
        ...obj.ExclusiveStartKey && {
            ExclusiveStartKey: Object.entries(obj.ExclusiveStartKey).reduce((acc, [key, value])=>({
                    ...acc,
                    [key]: AttributeValueFilterSensitiveLog(value)
                }), {})
        },
        ...obj.ExpressionAttributeValues && {
            ExpressionAttributeValues: Object.entries(obj.ExpressionAttributeValues).reduce((acc, [key, value])=>({
                    ...acc,
                    [key]: AttributeValueFilterSensitiveLog(value)
                }), {})
        }
    });
const BatchWriteItemInputFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.RequestItems && {
            RequestItems: Object.entries(obj.RequestItems).reduce((acc, [key, value])=>({
                    ...acc,
                    [key]: value.map((item)=>WriteRequestFilterSensitiveLog(item))
                }), {})
        }
    });
const DeleteItemInputFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Key && {
            Key: Object.entries(obj.Key).reduce((acc, [key, value])=>({
                    ...acc,
                    [key]: AttributeValueFilterSensitiveLog(value)
                }), {})
        },
        ...obj.Expected && {
            Expected: Object.entries(obj.Expected).reduce((acc, [key, value])=>({
                    ...acc,
                    [key]: ExpectedAttributeValueFilterSensitiveLog(value)
                }), {})
        },
        ...obj.ExpressionAttributeValues && {
            ExpressionAttributeValues: Object.entries(obj.ExpressionAttributeValues).reduce((acc, [key, value])=>({
                    ...acc,
                    [key]: AttributeValueFilterSensitiveLog(value)
                }), {})
        }
    });
const PutItemInputFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Item && {
            Item: Object.entries(obj.Item).reduce((acc, [key, value])=>({
                    ...acc,
                    [key]: AttributeValueFilterSensitiveLog(value)
                }), {})
        },
        ...obj.Expected && {
            Expected: Object.entries(obj.Expected).reduce((acc, [key, value])=>({
                    ...acc,
                    [key]: ExpectedAttributeValueFilterSensitiveLog(value)
                }), {})
        },
        ...obj.ExpressionAttributeValues && {
            ExpressionAttributeValues: Object.entries(obj.ExpressionAttributeValues).reduce((acc, [key, value])=>({
                    ...acc,
                    [key]: AttributeValueFilterSensitiveLog(value)
                }), {})
        }
    });
const QueryInputFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.KeyConditions && {
            KeyConditions: Object.entries(obj.KeyConditions).reduce((acc, [key, value])=>({
                    ...acc,
                    [key]: ConditionFilterSensitiveLog(value)
                }), {})
        },
        ...obj.QueryFilter && {
            QueryFilter: Object.entries(obj.QueryFilter).reduce((acc, [key, value])=>({
                    ...acc,
                    [key]: ConditionFilterSensitiveLog(value)
                }), {})
        },
        ...obj.ExclusiveStartKey && {
            ExclusiveStartKey: Object.entries(obj.ExclusiveStartKey).reduce((acc, [key, value])=>({
                    ...acc,
                    [key]: AttributeValueFilterSensitiveLog(value)
                }), {})
        },
        ...obj.ExpressionAttributeValues && {
            ExpressionAttributeValues: Object.entries(obj.ExpressionAttributeValues).reduce((acc, [key, value])=>({
                    ...acc,
                    [key]: AttributeValueFilterSensitiveLog(value)
                }), {})
        }
    });
const BatchWriteItemOutputFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.UnprocessedItems && {
            UnprocessedItems: Object.entries(obj.UnprocessedItems).reduce((acc, [key, value])=>({
                    ...acc,
                    [key]: value.map((item)=>WriteRequestFilterSensitiveLog(item))
                }), {})
        },
        ...obj.ItemCollectionMetrics && {
            ItemCollectionMetrics: Object.entries(obj.ItemCollectionMetrics).reduce((acc, [key, value])=>({
                    ...acc,
                    [key]: value.map((item)=>ItemCollectionMetricsFilterSensitiveLog(item))
                }), {})
        }
    });
const UpdateItemInputFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.Key && {
            Key: Object.entries(obj.Key).reduce((acc, [key, value])=>({
                    ...acc,
                    [key]: AttributeValueFilterSensitiveLog(value)
                }), {})
        },
        ...obj.AttributeUpdates && {
            AttributeUpdates: Object.entries(obj.AttributeUpdates).reduce((acc, [key, value])=>({
                    ...acc,
                    [key]: AttributeValueUpdateFilterSensitiveLog(value)
                }), {})
        },
        ...obj.Expected && {
            Expected: Object.entries(obj.Expected).reduce((acc, [key, value])=>({
                    ...acc,
                    [key]: ExpectedAttributeValueFilterSensitiveLog(value)
                }), {})
        },
        ...obj.ExpressionAttributeValues && {
            ExpressionAttributeValues: Object.entries(obj.ExpressionAttributeValues).reduce((acc, [key, value])=>({
                    ...acc,
                    [key]: AttributeValueFilterSensitiveLog(value)
                }), {})
        }
    });
const TransactWriteItemFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.ConditionCheck && {
            ConditionCheck: ConditionCheckFilterSensitiveLog(obj.ConditionCheck)
        },
        ...obj.Put && {
            Put: PutFilterSensitiveLog(obj.Put)
        },
        ...obj.Delete && {
            Delete: DeleteFilterSensitiveLog(obj.Delete)
        },
        ...obj.Update && {
            Update: UpdateFilterSensitiveLog(obj.Update)
        }
    });
const TransactWriteItemsInputFilterSensitiveLog = (obj)=>({
        ...obj,
        ...obj.TransactItems && {
            TransactItems: obj.TransactItems.map((item)=>TransactWriteItemFilterSensitiveLog(item))
        }
    });

},{"./DynamoDBServiceException":"fNTX9","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fNTX9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DynamoDBServiceException", ()=>DynamoDBServiceException);
var _smithyClient = require("@aws-sdk/smithy-client");
class DynamoDBServiceException extends (0, _smithyClient.ServiceException) {
    constructor(options){
        super(options);
        Object.setPrototypeOf(this, DynamoDBServiceException.prototype);
    }
}

},{"@aws-sdk/smithy-client":"ats0l","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2MtWi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "serializeAws_json1_0BatchExecuteStatementCommand", ()=>serializeAws_json1_0BatchExecuteStatementCommand);
parcelHelpers.export(exports, "serializeAws_json1_0BatchGetItemCommand", ()=>serializeAws_json1_0BatchGetItemCommand);
parcelHelpers.export(exports, "serializeAws_json1_0BatchWriteItemCommand", ()=>serializeAws_json1_0BatchWriteItemCommand);
parcelHelpers.export(exports, "serializeAws_json1_0CreateBackupCommand", ()=>serializeAws_json1_0CreateBackupCommand);
parcelHelpers.export(exports, "serializeAws_json1_0CreateGlobalTableCommand", ()=>serializeAws_json1_0CreateGlobalTableCommand);
parcelHelpers.export(exports, "serializeAws_json1_0CreateTableCommand", ()=>serializeAws_json1_0CreateTableCommand);
parcelHelpers.export(exports, "serializeAws_json1_0DeleteBackupCommand", ()=>serializeAws_json1_0DeleteBackupCommand);
parcelHelpers.export(exports, "serializeAws_json1_0DeleteItemCommand", ()=>serializeAws_json1_0DeleteItemCommand);
parcelHelpers.export(exports, "serializeAws_json1_0DeleteTableCommand", ()=>serializeAws_json1_0DeleteTableCommand);
parcelHelpers.export(exports, "serializeAws_json1_0DescribeBackupCommand", ()=>serializeAws_json1_0DescribeBackupCommand);
parcelHelpers.export(exports, "serializeAws_json1_0DescribeContinuousBackupsCommand", ()=>serializeAws_json1_0DescribeContinuousBackupsCommand);
parcelHelpers.export(exports, "serializeAws_json1_0DescribeContributorInsightsCommand", ()=>serializeAws_json1_0DescribeContributorInsightsCommand);
parcelHelpers.export(exports, "serializeAws_json1_0DescribeEndpointsCommand", ()=>serializeAws_json1_0DescribeEndpointsCommand);
parcelHelpers.export(exports, "serializeAws_json1_0DescribeExportCommand", ()=>serializeAws_json1_0DescribeExportCommand);
parcelHelpers.export(exports, "serializeAws_json1_0DescribeGlobalTableCommand", ()=>serializeAws_json1_0DescribeGlobalTableCommand);
parcelHelpers.export(exports, "serializeAws_json1_0DescribeGlobalTableSettingsCommand", ()=>serializeAws_json1_0DescribeGlobalTableSettingsCommand);
parcelHelpers.export(exports, "serializeAws_json1_0DescribeImportCommand", ()=>serializeAws_json1_0DescribeImportCommand);
parcelHelpers.export(exports, "serializeAws_json1_0DescribeKinesisStreamingDestinationCommand", ()=>serializeAws_json1_0DescribeKinesisStreamingDestinationCommand);
parcelHelpers.export(exports, "serializeAws_json1_0DescribeLimitsCommand", ()=>serializeAws_json1_0DescribeLimitsCommand);
parcelHelpers.export(exports, "serializeAws_json1_0DescribeTableCommand", ()=>serializeAws_json1_0DescribeTableCommand);
parcelHelpers.export(exports, "serializeAws_json1_0DescribeTableReplicaAutoScalingCommand", ()=>serializeAws_json1_0DescribeTableReplicaAutoScalingCommand);
parcelHelpers.export(exports, "serializeAws_json1_0DescribeTimeToLiveCommand", ()=>serializeAws_json1_0DescribeTimeToLiveCommand);
parcelHelpers.export(exports, "serializeAws_json1_0DisableKinesisStreamingDestinationCommand", ()=>serializeAws_json1_0DisableKinesisStreamingDestinationCommand);
parcelHelpers.export(exports, "serializeAws_json1_0EnableKinesisStreamingDestinationCommand", ()=>serializeAws_json1_0EnableKinesisStreamingDestinationCommand);
parcelHelpers.export(exports, "serializeAws_json1_0ExecuteStatementCommand", ()=>serializeAws_json1_0ExecuteStatementCommand);
parcelHelpers.export(exports, "serializeAws_json1_0ExecuteTransactionCommand", ()=>serializeAws_json1_0ExecuteTransactionCommand);
parcelHelpers.export(exports, "serializeAws_json1_0ExportTableToPointInTimeCommand", ()=>serializeAws_json1_0ExportTableToPointInTimeCommand);
parcelHelpers.export(exports, "serializeAws_json1_0GetItemCommand", ()=>serializeAws_json1_0GetItemCommand);
parcelHelpers.export(exports, "serializeAws_json1_0ImportTableCommand", ()=>serializeAws_json1_0ImportTableCommand);
parcelHelpers.export(exports, "serializeAws_json1_0ListBackupsCommand", ()=>serializeAws_json1_0ListBackupsCommand);
parcelHelpers.export(exports, "serializeAws_json1_0ListContributorInsightsCommand", ()=>serializeAws_json1_0ListContributorInsightsCommand);
parcelHelpers.export(exports, "serializeAws_json1_0ListExportsCommand", ()=>serializeAws_json1_0ListExportsCommand);
parcelHelpers.export(exports, "serializeAws_json1_0ListGlobalTablesCommand", ()=>serializeAws_json1_0ListGlobalTablesCommand);
parcelHelpers.export(exports, "serializeAws_json1_0ListImportsCommand", ()=>serializeAws_json1_0ListImportsCommand);
parcelHelpers.export(exports, "serializeAws_json1_0ListTablesCommand", ()=>serializeAws_json1_0ListTablesCommand);
parcelHelpers.export(exports, "serializeAws_json1_0ListTagsOfResourceCommand", ()=>serializeAws_json1_0ListTagsOfResourceCommand);
parcelHelpers.export(exports, "serializeAws_json1_0PutItemCommand", ()=>serializeAws_json1_0PutItemCommand);
parcelHelpers.export(exports, "serializeAws_json1_0QueryCommand", ()=>serializeAws_json1_0QueryCommand);
parcelHelpers.export(exports, "serializeAws_json1_0RestoreTableFromBackupCommand", ()=>serializeAws_json1_0RestoreTableFromBackupCommand);
parcelHelpers.export(exports, "serializeAws_json1_0RestoreTableToPointInTimeCommand", ()=>serializeAws_json1_0RestoreTableToPointInTimeCommand);
parcelHelpers.export(exports, "serializeAws_json1_0ScanCommand", ()=>serializeAws_json1_0ScanCommand);
parcelHelpers.export(exports, "serializeAws_json1_0TagResourceCommand", ()=>serializeAws_json1_0TagResourceCommand);
parcelHelpers.export(exports, "serializeAws_json1_0TransactGetItemsCommand", ()=>serializeAws_json1_0TransactGetItemsCommand);
parcelHelpers.export(exports, "serializeAws_json1_0TransactWriteItemsCommand", ()=>serializeAws_json1_0TransactWriteItemsCommand);
parcelHelpers.export(exports, "serializeAws_json1_0UntagResourceCommand", ()=>serializeAws_json1_0UntagResourceCommand);
parcelHelpers.export(exports, "serializeAws_json1_0UpdateContinuousBackupsCommand", ()=>serializeAws_json1_0UpdateContinuousBackupsCommand);
parcelHelpers.export(exports, "serializeAws_json1_0UpdateContributorInsightsCommand", ()=>serializeAws_json1_0UpdateContributorInsightsCommand);
parcelHelpers.export(exports, "serializeAws_json1_0UpdateGlobalTableCommand", ()=>serializeAws_json1_0UpdateGlobalTableCommand);
parcelHelpers.export(exports, "serializeAws_json1_0UpdateGlobalTableSettingsCommand", ()=>serializeAws_json1_0UpdateGlobalTableSettingsCommand);
parcelHelpers.export(exports, "serializeAws_json1_0UpdateItemCommand", ()=>serializeAws_json1_0UpdateItemCommand);
parcelHelpers.export(exports, "serializeAws_json1_0UpdateTableCommand", ()=>serializeAws_json1_0UpdateTableCommand);
parcelHelpers.export(exports, "serializeAws_json1_0UpdateTableReplicaAutoScalingCommand", ()=>serializeAws_json1_0UpdateTableReplicaAutoScalingCommand);
parcelHelpers.export(exports, "serializeAws_json1_0UpdateTimeToLiveCommand", ()=>serializeAws_json1_0UpdateTimeToLiveCommand);
parcelHelpers.export(exports, "deserializeAws_json1_0BatchExecuteStatementCommand", ()=>deserializeAws_json1_0BatchExecuteStatementCommand);
parcelHelpers.export(exports, "deserializeAws_json1_0BatchGetItemCommand", ()=>deserializeAws_json1_0BatchGetItemCommand);
parcelHelpers.export(exports, "deserializeAws_json1_0BatchWriteItemCommand", ()=>deserializeAws_json1_0BatchWriteItemCommand);
parcelHelpers.export(exports, "deserializeAws_json1_0CreateBackupCommand", ()=>deserializeAws_json1_0CreateBackupCommand);
parcelHelpers.export(exports, "deserializeAws_json1_0CreateGlobalTableCommand", ()=>deserializeAws_json1_0CreateGlobalTableCommand);
parcelHelpers.export(exports, "deserializeAws_json1_0CreateTableCommand", ()=>deserializeAws_json1_0CreateTableCommand);
parcelHelpers.export(exports, "deserializeAws_json1_0DeleteBackupCommand", ()=>deserializeAws_json1_0DeleteBackupCommand);
parcelHelpers.export(exports, "deserializeAws_json1_0DeleteItemCommand", ()=>deserializeAws_json1_0DeleteItemCommand);
parcelHelpers.export(exports, "deserializeAws_json1_0DeleteTableCommand", ()=>deserializeAws_json1_0DeleteTableCommand);
parcelHelpers.export(exports, "deserializeAws_json1_0DescribeBackupCommand", ()=>deserializeAws_json1_0DescribeBackupCommand);
parcelHelpers.export(exports, "deserializeAws_json1_0DescribeContinuousBackupsCommand", ()=>deserializeAws_json1_0DescribeContinuousBackupsCommand);
parcelHelpers.export(exports, "deserializeAws_json1_0DescribeContributorInsightsCommand", ()=>deserializeAws_json1_0DescribeContributorInsightsCommand);
parcelHelpers.export(exports, "deserializeAws_json1_0DescribeEndpointsCommand", ()=>deserializeAws_json1_0DescribeEndpointsCommand);
parcelHelpers.export(exports, "deserializeAws_json1_0DescribeExportCommand", ()=>deserializeAws_json1_0DescribeExportCommand);
parcelHelpers.export(exports, "deserializeAws_json1_0DescribeGlobalTableCommand", ()=>deserializeAws_json1_0DescribeGlobalTableCommand);
parcelHelpers.export(exports, "deserializeAws_json1_0DescribeGlobalTableSettingsCommand", ()=>deserializeAws_json1_0DescribeGlobalTableSettingsCommand);
parcelHelpers.export(exports, "deserializeAws_json1_0DescribeImportCommand", ()=>deserializeAws_json1_0DescribeImportCommand);
parcelHelpers.export(exports, "deserializeAws_json1_0DescribeKinesisStreamingDestinationCommand", ()=>deserializeAws_json1_0DescribeKinesisStreamingDestinationCommand);
parcelHelpers.export(exports, "deserializeAws_json1_0DescribeLimitsCommand", ()=>deserializeAws_json1_0DescribeLimitsCommand);
parcelHelpers.export(exports, "deserializeAws_json1_0DescribeTableCommand", ()=>deserializeAws_json1_0DescribeTableCommand);
parcelHelpers.export(exports, "deserializeAws_json1_0DescribeTableReplicaAutoScalingCommand", ()=>deserializeAws_json1_0DescribeTableReplicaAutoScalingCommand);
parcelHelpers.export(exports, "deserializeAws_json1_0DescribeTimeToLiveCommand", ()=>deserializeAws_json1_0DescribeTimeToLiveCommand);
parcelHelpers.export(exports, "deserializeAws_json1_0DisableKinesisStreamingDestinationCommand", ()=>deserializeAws_json1_0DisableKinesisStreamingDestinationCommand);
parcelHelpers.export(exports, "deserializeAws_json1_0EnableKinesisStreamingDestinationCommand", ()=>deserializeAws_json1_0EnableKinesisStreamingDestinationCommand);
parcelHelpers.export(exports, "deserializeAws_json1_0ExecuteStatementCommand", ()=>deserializeAws_json1_0ExecuteStatementCommand);
parcelHelpers.export(exports, "deserializeAws_json1_0ExecuteTransactionCommand", ()=>deserializeAws_json1_0ExecuteTransactionCommand);
parcelHelpers.export(exports, "deserializeAws_json1_0ExportTableToPointInTimeCommand", ()=>deserializeAws_json1_0ExportTableToPointInTimeCommand);
parcelHelpers.export(exports, "deserializeAws_json1_0GetItemCommand", ()=>deserializeAws_json1_0GetItemCommand);
parcelHelpers.export(exports, "deserializeAws_json1_0ImportTableCommand", ()=>deserializeAws_json1_0ImportTableCommand);
parcelHelpers.export(exports, "deserializeAws_json1_0ListBackupsCommand", ()=>deserializeAws_json1_0ListBackupsCommand);
parcelHelpers.export(exports, "deserializeAws_json1_0ListContributorInsightsCommand", ()=>deserializeAws_json1_0ListContributorInsightsCommand);
parcelHelpers.export(exports, "deserializeAws_json1_0ListExportsCommand", ()=>deserializeAws_json1_0ListExportsCommand);
parcelHelpers.export(exports, "deserializeAws_json1_0ListGlobalTablesCommand", ()=>deserializeAws_json1_0ListGlobalTablesCommand);
parcelHelpers.export(exports, "deserializeAws_json1_0ListImportsCommand", ()=>deserializeAws_json1_0ListImportsCommand);
parcelHelpers.export(exports, "deserializeAws_json1_0ListTablesCommand", ()=>deserializeAws_json1_0ListTablesCommand);
parcelHelpers.export(exports, "deserializeAws_json1_0ListTagsOfResourceCommand", ()=>deserializeAws_json1_0ListTagsOfResourceCommand);
parcelHelpers.export(exports, "deserializeAws_json1_0PutItemCommand", ()=>deserializeAws_json1_0PutItemCommand);
parcelHelpers.export(exports, "deserializeAws_json1_0QueryCommand", ()=>deserializeAws_json1_0QueryCommand);
parcelHelpers.export(exports, "deserializeAws_json1_0RestoreTableFromBackupCommand", ()=>deserializeAws_json1_0RestoreTableFromBackupCommand);
parcelHelpers.export(exports, "deserializeAws_json1_0RestoreTableToPointInTimeCommand", ()=>deserializeAws_json1_0RestoreTableToPointInTimeCommand);
parcelHelpers.export(exports, "deserializeAws_json1_0ScanCommand", ()=>deserializeAws_json1_0ScanCommand);
parcelHelpers.export(exports, "deserializeAws_json1_0TagResourceCommand", ()=>deserializeAws_json1_0TagResourceCommand);
parcelHelpers.export(exports, "deserializeAws_json1_0TransactGetItemsCommand", ()=>deserializeAws_json1_0TransactGetItemsCommand);
parcelHelpers.export(exports, "deserializeAws_json1_0TransactWriteItemsCommand", ()=>deserializeAws_json1_0TransactWriteItemsCommand);
parcelHelpers.export(exports, "deserializeAws_json1_0UntagResourceCommand", ()=>deserializeAws_json1_0UntagResourceCommand);
parcelHelpers.export(exports, "deserializeAws_json1_0UpdateContinuousBackupsCommand", ()=>deserializeAws_json1_0UpdateContinuousBackupsCommand);
parcelHelpers.export(exports, "deserializeAws_json1_0UpdateContributorInsightsCommand", ()=>deserializeAws_json1_0UpdateContributorInsightsCommand);
parcelHelpers.export(exports, "deserializeAws_json1_0UpdateGlobalTableCommand", ()=>deserializeAws_json1_0UpdateGlobalTableCommand);
parcelHelpers.export(exports, "deserializeAws_json1_0UpdateGlobalTableSettingsCommand", ()=>deserializeAws_json1_0UpdateGlobalTableSettingsCommand);
parcelHelpers.export(exports, "deserializeAws_json1_0UpdateItemCommand", ()=>deserializeAws_json1_0UpdateItemCommand);
parcelHelpers.export(exports, "deserializeAws_json1_0UpdateTableCommand", ()=>deserializeAws_json1_0UpdateTableCommand);
parcelHelpers.export(exports, "deserializeAws_json1_0UpdateTableReplicaAutoScalingCommand", ()=>deserializeAws_json1_0UpdateTableReplicaAutoScalingCommand);
parcelHelpers.export(exports, "deserializeAws_json1_0UpdateTimeToLiveCommand", ()=>deserializeAws_json1_0UpdateTimeToLiveCommand);
var _protocolHttp = require("@aws-sdk/protocol-http");
var _smithyClient = require("@aws-sdk/smithy-client");
var _uuid = require("uuid");
var _dynamoDBServiceException = require("../models/DynamoDBServiceException");
var _models0 = require("../models/models_0");
const serializeAws_json1_0BatchExecuteStatementCommand = async (input, context)=>{
    const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.BatchExecuteStatement"
    };
    let body;
    body = JSON.stringify(serializeAws_json1_0BatchExecuteStatementInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_0BatchGetItemCommand = async (input, context)=>{
    const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.BatchGetItem"
    };
    let body;
    body = JSON.stringify(serializeAws_json1_0BatchGetItemInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_0BatchWriteItemCommand = async (input, context)=>{
    const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.BatchWriteItem"
    };
    let body;
    body = JSON.stringify(serializeAws_json1_0BatchWriteItemInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_0CreateBackupCommand = async (input, context)=>{
    const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.CreateBackup"
    };
    let body;
    body = JSON.stringify(serializeAws_json1_0CreateBackupInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_0CreateGlobalTableCommand = async (input, context)=>{
    const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.CreateGlobalTable"
    };
    let body;
    body = JSON.stringify(serializeAws_json1_0CreateGlobalTableInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_0CreateTableCommand = async (input, context)=>{
    const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.CreateTable"
    };
    let body;
    body = JSON.stringify(serializeAws_json1_0CreateTableInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_0DeleteBackupCommand = async (input, context)=>{
    const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.DeleteBackup"
    };
    let body;
    body = JSON.stringify(serializeAws_json1_0DeleteBackupInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_0DeleteItemCommand = async (input, context)=>{
    const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.DeleteItem"
    };
    let body;
    body = JSON.stringify(serializeAws_json1_0DeleteItemInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_0DeleteTableCommand = async (input, context)=>{
    const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.DeleteTable"
    };
    let body;
    body = JSON.stringify(serializeAws_json1_0DeleteTableInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_0DescribeBackupCommand = async (input, context)=>{
    const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.DescribeBackup"
    };
    let body;
    body = JSON.stringify(serializeAws_json1_0DescribeBackupInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_0DescribeContinuousBackupsCommand = async (input, context)=>{
    const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.DescribeContinuousBackups"
    };
    let body;
    body = JSON.stringify(serializeAws_json1_0DescribeContinuousBackupsInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_0DescribeContributorInsightsCommand = async (input, context)=>{
    const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.DescribeContributorInsights"
    };
    let body;
    body = JSON.stringify(serializeAws_json1_0DescribeContributorInsightsInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_0DescribeEndpointsCommand = async (input, context)=>{
    const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.DescribeEndpoints"
    };
    let body;
    body = JSON.stringify(serializeAws_json1_0DescribeEndpointsRequest(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_0DescribeExportCommand = async (input, context)=>{
    const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.DescribeExport"
    };
    let body;
    body = JSON.stringify(serializeAws_json1_0DescribeExportInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_0DescribeGlobalTableCommand = async (input, context)=>{
    const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.DescribeGlobalTable"
    };
    let body;
    body = JSON.stringify(serializeAws_json1_0DescribeGlobalTableInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_0DescribeGlobalTableSettingsCommand = async (input, context)=>{
    const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.DescribeGlobalTableSettings"
    };
    let body;
    body = JSON.stringify(serializeAws_json1_0DescribeGlobalTableSettingsInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_0DescribeImportCommand = async (input, context)=>{
    const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.DescribeImport"
    };
    let body;
    body = JSON.stringify(serializeAws_json1_0DescribeImportInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_0DescribeKinesisStreamingDestinationCommand = async (input, context)=>{
    const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.DescribeKinesisStreamingDestination"
    };
    let body;
    body = JSON.stringify(serializeAws_json1_0DescribeKinesisStreamingDestinationInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_0DescribeLimitsCommand = async (input, context)=>{
    const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.DescribeLimits"
    };
    let body;
    body = JSON.stringify(serializeAws_json1_0DescribeLimitsInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_0DescribeTableCommand = async (input, context)=>{
    const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.DescribeTable"
    };
    let body;
    body = JSON.stringify(serializeAws_json1_0DescribeTableInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_0DescribeTableReplicaAutoScalingCommand = async (input, context)=>{
    const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.DescribeTableReplicaAutoScaling"
    };
    let body;
    body = JSON.stringify(serializeAws_json1_0DescribeTableReplicaAutoScalingInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_0DescribeTimeToLiveCommand = async (input, context)=>{
    const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.DescribeTimeToLive"
    };
    let body;
    body = JSON.stringify(serializeAws_json1_0DescribeTimeToLiveInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_0DisableKinesisStreamingDestinationCommand = async (input, context)=>{
    const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.DisableKinesisStreamingDestination"
    };
    let body;
    body = JSON.stringify(serializeAws_json1_0KinesisStreamingDestinationInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_0EnableKinesisStreamingDestinationCommand = async (input, context)=>{
    const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.EnableKinesisStreamingDestination"
    };
    let body;
    body = JSON.stringify(serializeAws_json1_0KinesisStreamingDestinationInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_0ExecuteStatementCommand = async (input, context)=>{
    const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.ExecuteStatement"
    };
    let body;
    body = JSON.stringify(serializeAws_json1_0ExecuteStatementInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_0ExecuteTransactionCommand = async (input, context)=>{
    const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.ExecuteTransaction"
    };
    let body;
    body = JSON.stringify(serializeAws_json1_0ExecuteTransactionInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_0ExportTableToPointInTimeCommand = async (input, context)=>{
    const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.ExportTableToPointInTime"
    };
    let body;
    body = JSON.stringify(serializeAws_json1_0ExportTableToPointInTimeInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_0GetItemCommand = async (input, context)=>{
    const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.GetItem"
    };
    let body;
    body = JSON.stringify(serializeAws_json1_0GetItemInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_0ImportTableCommand = async (input, context)=>{
    const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.ImportTable"
    };
    let body;
    body = JSON.stringify(serializeAws_json1_0ImportTableInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_0ListBackupsCommand = async (input, context)=>{
    const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.ListBackups"
    };
    let body;
    body = JSON.stringify(serializeAws_json1_0ListBackupsInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_0ListContributorInsightsCommand = async (input, context)=>{
    const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.ListContributorInsights"
    };
    let body;
    body = JSON.stringify(serializeAws_json1_0ListContributorInsightsInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_0ListExportsCommand = async (input, context)=>{
    const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.ListExports"
    };
    let body;
    body = JSON.stringify(serializeAws_json1_0ListExportsInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_0ListGlobalTablesCommand = async (input, context)=>{
    const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.ListGlobalTables"
    };
    let body;
    body = JSON.stringify(serializeAws_json1_0ListGlobalTablesInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_0ListImportsCommand = async (input, context)=>{
    const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.ListImports"
    };
    let body;
    body = JSON.stringify(serializeAws_json1_0ListImportsInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_0ListTablesCommand = async (input, context)=>{
    const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.ListTables"
    };
    let body;
    body = JSON.stringify(serializeAws_json1_0ListTablesInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_0ListTagsOfResourceCommand = async (input, context)=>{
    const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.ListTagsOfResource"
    };
    let body;
    body = JSON.stringify(serializeAws_json1_0ListTagsOfResourceInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_0PutItemCommand = async (input, context)=>{
    const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.PutItem"
    };
    let body;
    body = JSON.stringify(serializeAws_json1_0PutItemInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_0QueryCommand = async (input, context)=>{
    const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.Query"
    };
    let body;
    body = JSON.stringify(serializeAws_json1_0QueryInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_0RestoreTableFromBackupCommand = async (input, context)=>{
    const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.RestoreTableFromBackup"
    };
    let body;
    body = JSON.stringify(serializeAws_json1_0RestoreTableFromBackupInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_0RestoreTableToPointInTimeCommand = async (input, context)=>{
    const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.RestoreTableToPointInTime"
    };
    let body;
    body = JSON.stringify(serializeAws_json1_0RestoreTableToPointInTimeInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_0ScanCommand = async (input, context)=>{
    const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.Scan"
    };
    let body;
    body = JSON.stringify(serializeAws_json1_0ScanInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_0TagResourceCommand = async (input, context)=>{
    const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.TagResource"
    };
    let body;
    body = JSON.stringify(serializeAws_json1_0TagResourceInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_0TransactGetItemsCommand = async (input, context)=>{
    const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.TransactGetItems"
    };
    let body;
    body = JSON.stringify(serializeAws_json1_0TransactGetItemsInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_0TransactWriteItemsCommand = async (input, context)=>{
    const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.TransactWriteItems"
    };
    let body;
    body = JSON.stringify(serializeAws_json1_0TransactWriteItemsInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_0UntagResourceCommand = async (input, context)=>{
    const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.UntagResource"
    };
    let body;
    body = JSON.stringify(serializeAws_json1_0UntagResourceInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_0UpdateContinuousBackupsCommand = async (input, context)=>{
    const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.UpdateContinuousBackups"
    };
    let body;
    body = JSON.stringify(serializeAws_json1_0UpdateContinuousBackupsInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_0UpdateContributorInsightsCommand = async (input, context)=>{
    const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.UpdateContributorInsights"
    };
    let body;
    body = JSON.stringify(serializeAws_json1_0UpdateContributorInsightsInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_0UpdateGlobalTableCommand = async (input, context)=>{
    const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.UpdateGlobalTable"
    };
    let body;
    body = JSON.stringify(serializeAws_json1_0UpdateGlobalTableInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_0UpdateGlobalTableSettingsCommand = async (input, context)=>{
    const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.UpdateGlobalTableSettings"
    };
    let body;
    body = JSON.stringify(serializeAws_json1_0UpdateGlobalTableSettingsInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_0UpdateItemCommand = async (input, context)=>{
    const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.UpdateItem"
    };
    let body;
    body = JSON.stringify(serializeAws_json1_0UpdateItemInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_0UpdateTableCommand = async (input, context)=>{
    const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.UpdateTable"
    };
    let body;
    body = JSON.stringify(serializeAws_json1_0UpdateTableInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_0UpdateTableReplicaAutoScalingCommand = async (input, context)=>{
    const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.UpdateTableReplicaAutoScaling"
    };
    let body;
    body = JSON.stringify(serializeAws_json1_0UpdateTableReplicaAutoScalingInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const serializeAws_json1_0UpdateTimeToLiveCommand = async (input, context)=>{
    const headers = {
        "content-type": "application/x-amz-json-1.0",
        "x-amz-target": "DynamoDB_20120810.UpdateTimeToLive"
    };
    let body;
    body = JSON.stringify(serializeAws_json1_0UpdateTimeToLiveInput(input, context));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const deserializeAws_json1_0BatchExecuteStatementCommand = async (output, context)=>{
    if (output.statusCode >= 300) return deserializeAws_json1_0BatchExecuteStatementCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_0BatchExecuteStatementOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_0BatchExecuteStatementCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
            throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "RequestLimitExceeded":
        case "com.amazonaws.dynamodb#RequestLimitExceeded":
            throw await deserializeAws_json1_0RequestLimitExceededResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, _smithyClient.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: (0, _dynamoDBServiceException.DynamoDBServiceException),
                errorCode
            });
    }
};
const deserializeAws_json1_0BatchGetItemCommand = async (output, context)=>{
    if (output.statusCode >= 300) return deserializeAws_json1_0BatchGetItemCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_0BatchGetItemOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_0BatchGetItemCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
            throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
            throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.dynamodb#ProvisionedThroughputExceededException":
            throw await deserializeAws_json1_0ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "RequestLimitExceeded":
        case "com.amazonaws.dynamodb#RequestLimitExceeded":
            throw await deserializeAws_json1_0RequestLimitExceededResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
            throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, _smithyClient.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: (0, _dynamoDBServiceException.DynamoDBServiceException),
                errorCode
            });
    }
};
const deserializeAws_json1_0BatchWriteItemCommand = async (output, context)=>{
    if (output.statusCode >= 300) return deserializeAws_json1_0BatchWriteItemCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_0BatchWriteItemOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_0BatchWriteItemCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
            throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
            throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case "ItemCollectionSizeLimitExceededException":
        case "com.amazonaws.dynamodb#ItemCollectionSizeLimitExceededException":
            throw await deserializeAws_json1_0ItemCollectionSizeLimitExceededExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.dynamodb#ProvisionedThroughputExceededException":
            throw await deserializeAws_json1_0ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "RequestLimitExceeded":
        case "com.amazonaws.dynamodb#RequestLimitExceeded":
            throw await deserializeAws_json1_0RequestLimitExceededResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
            throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, _smithyClient.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: (0, _dynamoDBServiceException.DynamoDBServiceException),
                errorCode
            });
    }
};
const deserializeAws_json1_0CreateBackupCommand = async (output, context)=>{
    if (output.statusCode >= 300) return deserializeAws_json1_0CreateBackupCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_0CreateBackupOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_0CreateBackupCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "BackupInUseException":
        case "com.amazonaws.dynamodb#BackupInUseException":
            throw await deserializeAws_json1_0BackupInUseExceptionResponse(parsedOutput, context);
        case "ContinuousBackupsUnavailableException":
        case "com.amazonaws.dynamodb#ContinuousBackupsUnavailableException":
            throw await deserializeAws_json1_0ContinuousBackupsUnavailableExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
            throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
            throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
            throw await deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context);
        case "TableInUseException":
        case "com.amazonaws.dynamodb#TableInUseException":
            throw await deserializeAws_json1_0TableInUseExceptionResponse(parsedOutput, context);
        case "TableNotFoundException":
        case "com.amazonaws.dynamodb#TableNotFoundException":
            throw await deserializeAws_json1_0TableNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, _smithyClient.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: (0, _dynamoDBServiceException.DynamoDBServiceException),
                errorCode
            });
    }
};
const deserializeAws_json1_0CreateGlobalTableCommand = async (output, context)=>{
    if (output.statusCode >= 300) return deserializeAws_json1_0CreateGlobalTableCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_0CreateGlobalTableOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_0CreateGlobalTableCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "GlobalTableAlreadyExistsException":
        case "com.amazonaws.dynamodb#GlobalTableAlreadyExistsException":
            throw await deserializeAws_json1_0GlobalTableAlreadyExistsExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
            throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
            throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
            throw await deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context);
        case "TableNotFoundException":
        case "com.amazonaws.dynamodb#TableNotFoundException":
            throw await deserializeAws_json1_0TableNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, _smithyClient.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: (0, _dynamoDBServiceException.DynamoDBServiceException),
                errorCode
            });
    }
};
const deserializeAws_json1_0CreateTableCommand = async (output, context)=>{
    if (output.statusCode >= 300) return deserializeAws_json1_0CreateTableCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_0CreateTableOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_0CreateTableCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
            throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
            throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
            throw await deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.dynamodb#ResourceInUseException":
            throw await deserializeAws_json1_0ResourceInUseExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, _smithyClient.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: (0, _dynamoDBServiceException.DynamoDBServiceException),
                errorCode
            });
    }
};
const deserializeAws_json1_0DeleteBackupCommand = async (output, context)=>{
    if (output.statusCode >= 300) return deserializeAws_json1_0DeleteBackupCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_0DeleteBackupOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_0DeleteBackupCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "BackupInUseException":
        case "com.amazonaws.dynamodb#BackupInUseException":
            throw await deserializeAws_json1_0BackupInUseExceptionResponse(parsedOutput, context);
        case "BackupNotFoundException":
        case "com.amazonaws.dynamodb#BackupNotFoundException":
            throw await deserializeAws_json1_0BackupNotFoundExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
            throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
            throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
            throw await deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, _smithyClient.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: (0, _dynamoDBServiceException.DynamoDBServiceException),
                errorCode
            });
    }
};
const deserializeAws_json1_0DeleteItemCommand = async (output, context)=>{
    if (output.statusCode >= 300) return deserializeAws_json1_0DeleteItemCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_0DeleteItemOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_0DeleteItemCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "ConditionalCheckFailedException":
        case "com.amazonaws.dynamodb#ConditionalCheckFailedException":
            throw await deserializeAws_json1_0ConditionalCheckFailedExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
            throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
            throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case "ItemCollectionSizeLimitExceededException":
        case "com.amazonaws.dynamodb#ItemCollectionSizeLimitExceededException":
            throw await deserializeAws_json1_0ItemCollectionSizeLimitExceededExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.dynamodb#ProvisionedThroughputExceededException":
            throw await deserializeAws_json1_0ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "RequestLimitExceeded":
        case "com.amazonaws.dynamodb#RequestLimitExceeded":
            throw await deserializeAws_json1_0RequestLimitExceededResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
            throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TransactionConflictException":
        case "com.amazonaws.dynamodb#TransactionConflictException":
            throw await deserializeAws_json1_0TransactionConflictExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, _smithyClient.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: (0, _dynamoDBServiceException.DynamoDBServiceException),
                errorCode
            });
    }
};
const deserializeAws_json1_0DeleteTableCommand = async (output, context)=>{
    if (output.statusCode >= 300) return deserializeAws_json1_0DeleteTableCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_0DeleteTableOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_0DeleteTableCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
            throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
            throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
            throw await deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.dynamodb#ResourceInUseException":
            throw await deserializeAws_json1_0ResourceInUseExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
            throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, _smithyClient.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: (0, _dynamoDBServiceException.DynamoDBServiceException),
                errorCode
            });
    }
};
const deserializeAws_json1_0DescribeBackupCommand = async (output, context)=>{
    if (output.statusCode >= 300) return deserializeAws_json1_0DescribeBackupCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_0DescribeBackupOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_0DescribeBackupCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "BackupNotFoundException":
        case "com.amazonaws.dynamodb#BackupNotFoundException":
            throw await deserializeAws_json1_0BackupNotFoundExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
            throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
            throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, _smithyClient.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: (0, _dynamoDBServiceException.DynamoDBServiceException),
                errorCode
            });
    }
};
const deserializeAws_json1_0DescribeContinuousBackupsCommand = async (output, context)=>{
    if (output.statusCode >= 300) return deserializeAws_json1_0DescribeContinuousBackupsCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_0DescribeContinuousBackupsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_0DescribeContinuousBackupsCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
            throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
            throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case "TableNotFoundException":
        case "com.amazonaws.dynamodb#TableNotFoundException":
            throw await deserializeAws_json1_0TableNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, _smithyClient.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: (0, _dynamoDBServiceException.DynamoDBServiceException),
                errorCode
            });
    }
};
const deserializeAws_json1_0DescribeContributorInsightsCommand = async (output, context)=>{
    if (output.statusCode >= 300) return deserializeAws_json1_0DescribeContributorInsightsCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_0DescribeContributorInsightsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_0DescribeContributorInsightsCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
            throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
            throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, _smithyClient.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: (0, _dynamoDBServiceException.DynamoDBServiceException),
                errorCode
            });
    }
};
const deserializeAws_json1_0DescribeEndpointsCommand = async (output, context)=>{
    if (output.statusCode >= 300) return deserializeAws_json1_0DescribeEndpointsCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_0DescribeEndpointsResponse(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_0DescribeEndpointsCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    const parsedBody = parsedOutput.body;
    (0, _smithyClient.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: (0, _dynamoDBServiceException.DynamoDBServiceException),
        errorCode
    });
};
const deserializeAws_json1_0DescribeExportCommand = async (output, context)=>{
    if (output.statusCode >= 300) return deserializeAws_json1_0DescribeExportCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_0DescribeExportOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_0DescribeExportCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "ExportNotFoundException":
        case "com.amazonaws.dynamodb#ExportNotFoundException":
            throw await deserializeAws_json1_0ExportNotFoundExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
            throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
            throw await deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, _smithyClient.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: (0, _dynamoDBServiceException.DynamoDBServiceException),
                errorCode
            });
    }
};
const deserializeAws_json1_0DescribeGlobalTableCommand = async (output, context)=>{
    if (output.statusCode >= 300) return deserializeAws_json1_0DescribeGlobalTableCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_0DescribeGlobalTableOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_0DescribeGlobalTableCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "GlobalTableNotFoundException":
        case "com.amazonaws.dynamodb#GlobalTableNotFoundException":
            throw await deserializeAws_json1_0GlobalTableNotFoundExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
            throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
            throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, _smithyClient.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: (0, _dynamoDBServiceException.DynamoDBServiceException),
                errorCode
            });
    }
};
const deserializeAws_json1_0DescribeGlobalTableSettingsCommand = async (output, context)=>{
    if (output.statusCode >= 300) return deserializeAws_json1_0DescribeGlobalTableSettingsCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_0DescribeGlobalTableSettingsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_0DescribeGlobalTableSettingsCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "GlobalTableNotFoundException":
        case "com.amazonaws.dynamodb#GlobalTableNotFoundException":
            throw await deserializeAws_json1_0GlobalTableNotFoundExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
            throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
            throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, _smithyClient.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: (0, _dynamoDBServiceException.DynamoDBServiceException),
                errorCode
            });
    }
};
const deserializeAws_json1_0DescribeImportCommand = async (output, context)=>{
    if (output.statusCode >= 300) return deserializeAws_json1_0DescribeImportCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_0DescribeImportOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_0DescribeImportCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "ImportNotFoundException":
        case "com.amazonaws.dynamodb#ImportNotFoundException":
            throw await deserializeAws_json1_0ImportNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, _smithyClient.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: (0, _dynamoDBServiceException.DynamoDBServiceException),
                errorCode
            });
    }
};
const deserializeAws_json1_0DescribeKinesisStreamingDestinationCommand = async (output, context)=>{
    if (output.statusCode >= 300) return deserializeAws_json1_0DescribeKinesisStreamingDestinationCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_0DescribeKinesisStreamingDestinationOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_0DescribeKinesisStreamingDestinationCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
            throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
            throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
            throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, _smithyClient.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: (0, _dynamoDBServiceException.DynamoDBServiceException),
                errorCode
            });
    }
};
const deserializeAws_json1_0DescribeLimitsCommand = async (output, context)=>{
    if (output.statusCode >= 300) return deserializeAws_json1_0DescribeLimitsCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_0DescribeLimitsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_0DescribeLimitsCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
            throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
            throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, _smithyClient.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: (0, _dynamoDBServiceException.DynamoDBServiceException),
                errorCode
            });
    }
};
const deserializeAws_json1_0DescribeTableCommand = async (output, context)=>{
    if (output.statusCode >= 300) return deserializeAws_json1_0DescribeTableCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_0DescribeTableOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_0DescribeTableCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
            throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
            throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
            throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, _smithyClient.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: (0, _dynamoDBServiceException.DynamoDBServiceException),
                errorCode
            });
    }
};
const deserializeAws_json1_0DescribeTableReplicaAutoScalingCommand = async (output, context)=>{
    if (output.statusCode >= 300) return deserializeAws_json1_0DescribeTableReplicaAutoScalingCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_0DescribeTableReplicaAutoScalingOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_0DescribeTableReplicaAutoScalingCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
            throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
            throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, _smithyClient.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: (0, _dynamoDBServiceException.DynamoDBServiceException),
                errorCode
            });
    }
};
const deserializeAws_json1_0DescribeTimeToLiveCommand = async (output, context)=>{
    if (output.statusCode >= 300) return deserializeAws_json1_0DescribeTimeToLiveCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_0DescribeTimeToLiveOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_0DescribeTimeToLiveCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
            throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
            throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
            throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, _smithyClient.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: (0, _dynamoDBServiceException.DynamoDBServiceException),
                errorCode
            });
    }
};
const deserializeAws_json1_0DisableKinesisStreamingDestinationCommand = async (output, context)=>{
    if (output.statusCode >= 300) return deserializeAws_json1_0DisableKinesisStreamingDestinationCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_0KinesisStreamingDestinationOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_0DisableKinesisStreamingDestinationCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
            throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
            throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
            throw await deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.dynamodb#ResourceInUseException":
            throw await deserializeAws_json1_0ResourceInUseExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
            throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, _smithyClient.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: (0, _dynamoDBServiceException.DynamoDBServiceException),
                errorCode
            });
    }
};
const deserializeAws_json1_0EnableKinesisStreamingDestinationCommand = async (output, context)=>{
    if (output.statusCode >= 300) return deserializeAws_json1_0EnableKinesisStreamingDestinationCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_0KinesisStreamingDestinationOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_0EnableKinesisStreamingDestinationCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
            throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
            throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
            throw await deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.dynamodb#ResourceInUseException":
            throw await deserializeAws_json1_0ResourceInUseExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
            throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, _smithyClient.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: (0, _dynamoDBServiceException.DynamoDBServiceException),
                errorCode
            });
    }
};
const deserializeAws_json1_0ExecuteStatementCommand = async (output, context)=>{
    if (output.statusCode >= 300) return deserializeAws_json1_0ExecuteStatementCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_0ExecuteStatementOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_0ExecuteStatementCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "ConditionalCheckFailedException":
        case "com.amazonaws.dynamodb#ConditionalCheckFailedException":
            throw await deserializeAws_json1_0ConditionalCheckFailedExceptionResponse(parsedOutput, context);
        case "DuplicateItemException":
        case "com.amazonaws.dynamodb#DuplicateItemException":
            throw await deserializeAws_json1_0DuplicateItemExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
            throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "ItemCollectionSizeLimitExceededException":
        case "com.amazonaws.dynamodb#ItemCollectionSizeLimitExceededException":
            throw await deserializeAws_json1_0ItemCollectionSizeLimitExceededExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.dynamodb#ProvisionedThroughputExceededException":
            throw await deserializeAws_json1_0ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "RequestLimitExceeded":
        case "com.amazonaws.dynamodb#RequestLimitExceeded":
            throw await deserializeAws_json1_0RequestLimitExceededResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
            throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TransactionConflictException":
        case "com.amazonaws.dynamodb#TransactionConflictException":
            throw await deserializeAws_json1_0TransactionConflictExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, _smithyClient.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: (0, _dynamoDBServiceException.DynamoDBServiceException),
                errorCode
            });
    }
};
const deserializeAws_json1_0ExecuteTransactionCommand = async (output, context)=>{
    if (output.statusCode >= 300) return deserializeAws_json1_0ExecuteTransactionCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_0ExecuteTransactionOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_0ExecuteTransactionCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "IdempotentParameterMismatchException":
        case "com.amazonaws.dynamodb#IdempotentParameterMismatchException":
            throw await deserializeAws_json1_0IdempotentParameterMismatchExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
            throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.dynamodb#ProvisionedThroughputExceededException":
            throw await deserializeAws_json1_0ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "RequestLimitExceeded":
        case "com.amazonaws.dynamodb#RequestLimitExceeded":
            throw await deserializeAws_json1_0RequestLimitExceededResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
            throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TransactionCanceledException":
        case "com.amazonaws.dynamodb#TransactionCanceledException":
            throw await deserializeAws_json1_0TransactionCanceledExceptionResponse(parsedOutput, context);
        case "TransactionInProgressException":
        case "com.amazonaws.dynamodb#TransactionInProgressException":
            throw await deserializeAws_json1_0TransactionInProgressExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, _smithyClient.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: (0, _dynamoDBServiceException.DynamoDBServiceException),
                errorCode
            });
    }
};
const deserializeAws_json1_0ExportTableToPointInTimeCommand = async (output, context)=>{
    if (output.statusCode >= 300) return deserializeAws_json1_0ExportTableToPointInTimeCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_0ExportTableToPointInTimeOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_0ExportTableToPointInTimeCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "ExportConflictException":
        case "com.amazonaws.dynamodb#ExportConflictException":
            throw await deserializeAws_json1_0ExportConflictExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
            throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "InvalidExportTimeException":
        case "com.amazonaws.dynamodb#InvalidExportTimeException":
            throw await deserializeAws_json1_0InvalidExportTimeExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
            throw await deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context);
        case "PointInTimeRecoveryUnavailableException":
        case "com.amazonaws.dynamodb#PointInTimeRecoveryUnavailableException":
            throw await deserializeAws_json1_0PointInTimeRecoveryUnavailableExceptionResponse(parsedOutput, context);
        case "TableNotFoundException":
        case "com.amazonaws.dynamodb#TableNotFoundException":
            throw await deserializeAws_json1_0TableNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, _smithyClient.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: (0, _dynamoDBServiceException.DynamoDBServiceException),
                errorCode
            });
    }
};
const deserializeAws_json1_0GetItemCommand = async (output, context)=>{
    if (output.statusCode >= 300) return deserializeAws_json1_0GetItemCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_0GetItemOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_0GetItemCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
            throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
            throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.dynamodb#ProvisionedThroughputExceededException":
            throw await deserializeAws_json1_0ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "RequestLimitExceeded":
        case "com.amazonaws.dynamodb#RequestLimitExceeded":
            throw await deserializeAws_json1_0RequestLimitExceededResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
            throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, _smithyClient.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: (0, _dynamoDBServiceException.DynamoDBServiceException),
                errorCode
            });
    }
};
const deserializeAws_json1_0ImportTableCommand = async (output, context)=>{
    if (output.statusCode >= 300) return deserializeAws_json1_0ImportTableCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_0ImportTableOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_0ImportTableCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "ImportConflictException":
        case "com.amazonaws.dynamodb#ImportConflictException":
            throw await deserializeAws_json1_0ImportConflictExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
            throw await deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.dynamodb#ResourceInUseException":
            throw await deserializeAws_json1_0ResourceInUseExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, _smithyClient.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: (0, _dynamoDBServiceException.DynamoDBServiceException),
                errorCode
            });
    }
};
const deserializeAws_json1_0ListBackupsCommand = async (output, context)=>{
    if (output.statusCode >= 300) return deserializeAws_json1_0ListBackupsCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_0ListBackupsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_0ListBackupsCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
            throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
            throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, _smithyClient.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: (0, _dynamoDBServiceException.DynamoDBServiceException),
                errorCode
            });
    }
};
const deserializeAws_json1_0ListContributorInsightsCommand = async (output, context)=>{
    if (output.statusCode >= 300) return deserializeAws_json1_0ListContributorInsightsCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_0ListContributorInsightsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_0ListContributorInsightsCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
            throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
            throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, _smithyClient.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: (0, _dynamoDBServiceException.DynamoDBServiceException),
                errorCode
            });
    }
};
const deserializeAws_json1_0ListExportsCommand = async (output, context)=>{
    if (output.statusCode >= 300) return deserializeAws_json1_0ListExportsCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_0ListExportsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_0ListExportsCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
            throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
            throw await deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, _smithyClient.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: (0, _dynamoDBServiceException.DynamoDBServiceException),
                errorCode
            });
    }
};
const deserializeAws_json1_0ListGlobalTablesCommand = async (output, context)=>{
    if (output.statusCode >= 300) return deserializeAws_json1_0ListGlobalTablesCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_0ListGlobalTablesOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_0ListGlobalTablesCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
            throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
            throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, _smithyClient.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: (0, _dynamoDBServiceException.DynamoDBServiceException),
                errorCode
            });
    }
};
const deserializeAws_json1_0ListImportsCommand = async (output, context)=>{
    if (output.statusCode >= 300) return deserializeAws_json1_0ListImportsCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_0ListImportsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_0ListImportsCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
            throw await deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, _smithyClient.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: (0, _dynamoDBServiceException.DynamoDBServiceException),
                errorCode
            });
    }
};
const deserializeAws_json1_0ListTablesCommand = async (output, context)=>{
    if (output.statusCode >= 300) return deserializeAws_json1_0ListTablesCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_0ListTablesOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_0ListTablesCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
            throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
            throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, _smithyClient.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: (0, _dynamoDBServiceException.DynamoDBServiceException),
                errorCode
            });
    }
};
const deserializeAws_json1_0ListTagsOfResourceCommand = async (output, context)=>{
    if (output.statusCode >= 300) return deserializeAws_json1_0ListTagsOfResourceCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_0ListTagsOfResourceOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_0ListTagsOfResourceCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
            throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
            throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
            throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, _smithyClient.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: (0, _dynamoDBServiceException.DynamoDBServiceException),
                errorCode
            });
    }
};
const deserializeAws_json1_0PutItemCommand = async (output, context)=>{
    if (output.statusCode >= 300) return deserializeAws_json1_0PutItemCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_0PutItemOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_0PutItemCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "ConditionalCheckFailedException":
        case "com.amazonaws.dynamodb#ConditionalCheckFailedException":
            throw await deserializeAws_json1_0ConditionalCheckFailedExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
            throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
            throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case "ItemCollectionSizeLimitExceededException":
        case "com.amazonaws.dynamodb#ItemCollectionSizeLimitExceededException":
            throw await deserializeAws_json1_0ItemCollectionSizeLimitExceededExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.dynamodb#ProvisionedThroughputExceededException":
            throw await deserializeAws_json1_0ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "RequestLimitExceeded":
        case "com.amazonaws.dynamodb#RequestLimitExceeded":
            throw await deserializeAws_json1_0RequestLimitExceededResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
            throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TransactionConflictException":
        case "com.amazonaws.dynamodb#TransactionConflictException":
            throw await deserializeAws_json1_0TransactionConflictExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, _smithyClient.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: (0, _dynamoDBServiceException.DynamoDBServiceException),
                errorCode
            });
    }
};
const deserializeAws_json1_0QueryCommand = async (output, context)=>{
    if (output.statusCode >= 300) return deserializeAws_json1_0QueryCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_0QueryOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_0QueryCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
            throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
            throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.dynamodb#ProvisionedThroughputExceededException":
            throw await deserializeAws_json1_0ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "RequestLimitExceeded":
        case "com.amazonaws.dynamodb#RequestLimitExceeded":
            throw await deserializeAws_json1_0RequestLimitExceededResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
            throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, _smithyClient.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: (0, _dynamoDBServiceException.DynamoDBServiceException),
                errorCode
            });
    }
};
const deserializeAws_json1_0RestoreTableFromBackupCommand = async (output, context)=>{
    if (output.statusCode >= 300) return deserializeAws_json1_0RestoreTableFromBackupCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_0RestoreTableFromBackupOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_0RestoreTableFromBackupCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "BackupInUseException":
        case "com.amazonaws.dynamodb#BackupInUseException":
            throw await deserializeAws_json1_0BackupInUseExceptionResponse(parsedOutput, context);
        case "BackupNotFoundException":
        case "com.amazonaws.dynamodb#BackupNotFoundException":
            throw await deserializeAws_json1_0BackupNotFoundExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
            throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
            throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
            throw await deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context);
        case "TableAlreadyExistsException":
        case "com.amazonaws.dynamodb#TableAlreadyExistsException":
            throw await deserializeAws_json1_0TableAlreadyExistsExceptionResponse(parsedOutput, context);
        case "TableInUseException":
        case "com.amazonaws.dynamodb#TableInUseException":
            throw await deserializeAws_json1_0TableInUseExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, _smithyClient.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: (0, _dynamoDBServiceException.DynamoDBServiceException),
                errorCode
            });
    }
};
const deserializeAws_json1_0RestoreTableToPointInTimeCommand = async (output, context)=>{
    if (output.statusCode >= 300) return deserializeAws_json1_0RestoreTableToPointInTimeCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_0RestoreTableToPointInTimeOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_0RestoreTableToPointInTimeCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
            throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
            throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case "InvalidRestoreTimeException":
        case "com.amazonaws.dynamodb#InvalidRestoreTimeException":
            throw await deserializeAws_json1_0InvalidRestoreTimeExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
            throw await deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context);
        case "PointInTimeRecoveryUnavailableException":
        case "com.amazonaws.dynamodb#PointInTimeRecoveryUnavailableException":
            throw await deserializeAws_json1_0PointInTimeRecoveryUnavailableExceptionResponse(parsedOutput, context);
        case "TableAlreadyExistsException":
        case "com.amazonaws.dynamodb#TableAlreadyExistsException":
            throw await deserializeAws_json1_0TableAlreadyExistsExceptionResponse(parsedOutput, context);
        case "TableInUseException":
        case "com.amazonaws.dynamodb#TableInUseException":
            throw await deserializeAws_json1_0TableInUseExceptionResponse(parsedOutput, context);
        case "TableNotFoundException":
        case "com.amazonaws.dynamodb#TableNotFoundException":
            throw await deserializeAws_json1_0TableNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, _smithyClient.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: (0, _dynamoDBServiceException.DynamoDBServiceException),
                errorCode
            });
    }
};
const deserializeAws_json1_0ScanCommand = async (output, context)=>{
    if (output.statusCode >= 300) return deserializeAws_json1_0ScanCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_0ScanOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_0ScanCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
            throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
            throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.dynamodb#ProvisionedThroughputExceededException":
            throw await deserializeAws_json1_0ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "RequestLimitExceeded":
        case "com.amazonaws.dynamodb#RequestLimitExceeded":
            throw await deserializeAws_json1_0RequestLimitExceededResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
            throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, _smithyClient.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: (0, _dynamoDBServiceException.DynamoDBServiceException),
                errorCode
            });
    }
};
const deserializeAws_json1_0TagResourceCommand = async (output, context)=>{
    if (output.statusCode >= 300) return deserializeAws_json1_0TagResourceCommandError(output, context);
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output)
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_0TagResourceCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
            throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
            throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
            throw await deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.dynamodb#ResourceInUseException":
            throw await deserializeAws_json1_0ResourceInUseExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
            throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, _smithyClient.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: (0, _dynamoDBServiceException.DynamoDBServiceException),
                errorCode
            });
    }
};
const deserializeAws_json1_0TransactGetItemsCommand = async (output, context)=>{
    if (output.statusCode >= 300) return deserializeAws_json1_0TransactGetItemsCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_0TransactGetItemsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_0TransactGetItemsCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
            throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
            throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.dynamodb#ProvisionedThroughputExceededException":
            throw await deserializeAws_json1_0ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "RequestLimitExceeded":
        case "com.amazonaws.dynamodb#RequestLimitExceeded":
            throw await deserializeAws_json1_0RequestLimitExceededResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
            throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TransactionCanceledException":
        case "com.amazonaws.dynamodb#TransactionCanceledException":
            throw await deserializeAws_json1_0TransactionCanceledExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, _smithyClient.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: (0, _dynamoDBServiceException.DynamoDBServiceException),
                errorCode
            });
    }
};
const deserializeAws_json1_0TransactWriteItemsCommand = async (output, context)=>{
    if (output.statusCode >= 300) return deserializeAws_json1_0TransactWriteItemsCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_0TransactWriteItemsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_0TransactWriteItemsCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "IdempotentParameterMismatchException":
        case "com.amazonaws.dynamodb#IdempotentParameterMismatchException":
            throw await deserializeAws_json1_0IdempotentParameterMismatchExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
            throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
            throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.dynamodb#ProvisionedThroughputExceededException":
            throw await deserializeAws_json1_0ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "RequestLimitExceeded":
        case "com.amazonaws.dynamodb#RequestLimitExceeded":
            throw await deserializeAws_json1_0RequestLimitExceededResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
            throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TransactionCanceledException":
        case "com.amazonaws.dynamodb#TransactionCanceledException":
            throw await deserializeAws_json1_0TransactionCanceledExceptionResponse(parsedOutput, context);
        case "TransactionInProgressException":
        case "com.amazonaws.dynamodb#TransactionInProgressException":
            throw await deserializeAws_json1_0TransactionInProgressExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, _smithyClient.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: (0, _dynamoDBServiceException.DynamoDBServiceException),
                errorCode
            });
    }
};
const deserializeAws_json1_0UntagResourceCommand = async (output, context)=>{
    if (output.statusCode >= 300) return deserializeAws_json1_0UntagResourceCommandError(output, context);
    await collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output)
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_0UntagResourceCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
            throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
            throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
            throw await deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.dynamodb#ResourceInUseException":
            throw await deserializeAws_json1_0ResourceInUseExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
            throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, _smithyClient.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: (0, _dynamoDBServiceException.DynamoDBServiceException),
                errorCode
            });
    }
};
const deserializeAws_json1_0UpdateContinuousBackupsCommand = async (output, context)=>{
    if (output.statusCode >= 300) return deserializeAws_json1_0UpdateContinuousBackupsCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_0UpdateContinuousBackupsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_0UpdateContinuousBackupsCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "ContinuousBackupsUnavailableException":
        case "com.amazonaws.dynamodb#ContinuousBackupsUnavailableException":
            throw await deserializeAws_json1_0ContinuousBackupsUnavailableExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
            throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
            throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case "TableNotFoundException":
        case "com.amazonaws.dynamodb#TableNotFoundException":
            throw await deserializeAws_json1_0TableNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, _smithyClient.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: (0, _dynamoDBServiceException.DynamoDBServiceException),
                errorCode
            });
    }
};
const deserializeAws_json1_0UpdateContributorInsightsCommand = async (output, context)=>{
    if (output.statusCode >= 300) return deserializeAws_json1_0UpdateContributorInsightsCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_0UpdateContributorInsightsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_0UpdateContributorInsightsCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
            throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
            throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, _smithyClient.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: (0, _dynamoDBServiceException.DynamoDBServiceException),
                errorCode
            });
    }
};
const deserializeAws_json1_0UpdateGlobalTableCommand = async (output, context)=>{
    if (output.statusCode >= 300) return deserializeAws_json1_0UpdateGlobalTableCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_0UpdateGlobalTableOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_0UpdateGlobalTableCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "GlobalTableNotFoundException":
        case "com.amazonaws.dynamodb#GlobalTableNotFoundException":
            throw await deserializeAws_json1_0GlobalTableNotFoundExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
            throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
            throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case "ReplicaAlreadyExistsException":
        case "com.amazonaws.dynamodb#ReplicaAlreadyExistsException":
            throw await deserializeAws_json1_0ReplicaAlreadyExistsExceptionResponse(parsedOutput, context);
        case "ReplicaNotFoundException":
        case "com.amazonaws.dynamodb#ReplicaNotFoundException":
            throw await deserializeAws_json1_0ReplicaNotFoundExceptionResponse(parsedOutput, context);
        case "TableNotFoundException":
        case "com.amazonaws.dynamodb#TableNotFoundException":
            throw await deserializeAws_json1_0TableNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, _smithyClient.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: (0, _dynamoDBServiceException.DynamoDBServiceException),
                errorCode
            });
    }
};
const deserializeAws_json1_0UpdateGlobalTableSettingsCommand = async (output, context)=>{
    if (output.statusCode >= 300) return deserializeAws_json1_0UpdateGlobalTableSettingsCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_0UpdateGlobalTableSettingsOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_0UpdateGlobalTableSettingsCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "GlobalTableNotFoundException":
        case "com.amazonaws.dynamodb#GlobalTableNotFoundException":
            throw await deserializeAws_json1_0GlobalTableNotFoundExceptionResponse(parsedOutput, context);
        case "IndexNotFoundException":
        case "com.amazonaws.dynamodb#IndexNotFoundException":
            throw await deserializeAws_json1_0IndexNotFoundExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
            throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
            throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
            throw await deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context);
        case "ReplicaNotFoundException":
        case "com.amazonaws.dynamodb#ReplicaNotFoundException":
            throw await deserializeAws_json1_0ReplicaNotFoundExceptionResponse(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.dynamodb#ResourceInUseException":
            throw await deserializeAws_json1_0ResourceInUseExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, _smithyClient.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: (0, _dynamoDBServiceException.DynamoDBServiceException),
                errorCode
            });
    }
};
const deserializeAws_json1_0UpdateItemCommand = async (output, context)=>{
    if (output.statusCode >= 300) return deserializeAws_json1_0UpdateItemCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_0UpdateItemOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_0UpdateItemCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "ConditionalCheckFailedException":
        case "com.amazonaws.dynamodb#ConditionalCheckFailedException":
            throw await deserializeAws_json1_0ConditionalCheckFailedExceptionResponse(parsedOutput, context);
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
            throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
            throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case "ItemCollectionSizeLimitExceededException":
        case "com.amazonaws.dynamodb#ItemCollectionSizeLimitExceededException":
            throw await deserializeAws_json1_0ItemCollectionSizeLimitExceededExceptionResponse(parsedOutput, context);
        case "ProvisionedThroughputExceededException":
        case "com.amazonaws.dynamodb#ProvisionedThroughputExceededException":
            throw await deserializeAws_json1_0ProvisionedThroughputExceededExceptionResponse(parsedOutput, context);
        case "RequestLimitExceeded":
        case "com.amazonaws.dynamodb#RequestLimitExceeded":
            throw await deserializeAws_json1_0RequestLimitExceededResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
            throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TransactionConflictException":
        case "com.amazonaws.dynamodb#TransactionConflictException":
            throw await deserializeAws_json1_0TransactionConflictExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, _smithyClient.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: (0, _dynamoDBServiceException.DynamoDBServiceException),
                errorCode
            });
    }
};
const deserializeAws_json1_0UpdateTableCommand = async (output, context)=>{
    if (output.statusCode >= 300) return deserializeAws_json1_0UpdateTableCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_0UpdateTableOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_0UpdateTableCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
            throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
            throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
            throw await deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.dynamodb#ResourceInUseException":
            throw await deserializeAws_json1_0ResourceInUseExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
            throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, _smithyClient.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: (0, _dynamoDBServiceException.DynamoDBServiceException),
                errorCode
            });
    }
};
const deserializeAws_json1_0UpdateTableReplicaAutoScalingCommand = async (output, context)=>{
    if (output.statusCode >= 300) return deserializeAws_json1_0UpdateTableReplicaAutoScalingCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_0UpdateTableReplicaAutoScalingOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_0UpdateTableReplicaAutoScalingCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
            throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
            throw await deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.dynamodb#ResourceInUseException":
            throw await deserializeAws_json1_0ResourceInUseExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
            throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, _smithyClient.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: (0, _dynamoDBServiceException.DynamoDBServiceException),
                errorCode
            });
    }
};
const deserializeAws_json1_0UpdateTimeToLiveCommand = async (output, context)=>{
    if (output.statusCode >= 300) return deserializeAws_json1_0UpdateTimeToLiveCommandError(output, context);
    const data = await parseBody(output.body, context);
    let contents = {};
    contents = deserializeAws_json1_0UpdateTimeToLiveOutput(data, context);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents
    };
    return Promise.resolve(response);
};
const deserializeAws_json1_0UpdateTimeToLiveCommandError = async (output, context)=>{
    const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
    };
    const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
    switch(errorCode){
        case "InternalServerError":
        case "com.amazonaws.dynamodb#InternalServerError":
            throw await deserializeAws_json1_0InternalServerErrorResponse(parsedOutput, context);
        case "InvalidEndpointException":
        case "com.amazonaws.dynamodb#InvalidEndpointException":
            throw await deserializeAws_json1_0InvalidEndpointExceptionResponse(parsedOutput, context);
        case "LimitExceededException":
        case "com.amazonaws.dynamodb#LimitExceededException":
            throw await deserializeAws_json1_0LimitExceededExceptionResponse(parsedOutput, context);
        case "ResourceInUseException":
        case "com.amazonaws.dynamodb#ResourceInUseException":
            throw await deserializeAws_json1_0ResourceInUseExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.dynamodb#ResourceNotFoundException":
            throw await deserializeAws_json1_0ResourceNotFoundExceptionResponse(parsedOutput, context);
        default:
            const parsedBody = parsedOutput.body;
            (0, _smithyClient.throwDefaultError)({
                output,
                parsedBody,
                exceptionCtor: (0, _dynamoDBServiceException.DynamoDBServiceException),
                errorCode
            });
    }
};
const deserializeAws_json1_0BackupInUseExceptionResponse = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_0BackupInUseException(body, context);
    const exception = new (0, _models0.BackupInUseException)({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, _smithyClient.decorateServiceException)(exception, body);
};
const deserializeAws_json1_0BackupNotFoundExceptionResponse = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_0BackupNotFoundException(body, context);
    const exception = new (0, _models0.BackupNotFoundException)({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, _smithyClient.decorateServiceException)(exception, body);
};
const deserializeAws_json1_0ConditionalCheckFailedExceptionResponse = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_0ConditionalCheckFailedException(body, context);
    const exception = new (0, _models0.ConditionalCheckFailedException)({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, _smithyClient.decorateServiceException)(exception, body);
};
const deserializeAws_json1_0ContinuousBackupsUnavailableExceptionResponse = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_0ContinuousBackupsUnavailableException(body, context);
    const exception = new (0, _models0.ContinuousBackupsUnavailableException)({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, _smithyClient.decorateServiceException)(exception, body);
};
const deserializeAws_json1_0DuplicateItemExceptionResponse = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_0DuplicateItemException(body, context);
    const exception = new (0, _models0.DuplicateItemException)({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, _smithyClient.decorateServiceException)(exception, body);
};
const deserializeAws_json1_0ExportConflictExceptionResponse = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_0ExportConflictException(body, context);
    const exception = new (0, _models0.ExportConflictException)({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, _smithyClient.decorateServiceException)(exception, body);
};
const deserializeAws_json1_0ExportNotFoundExceptionResponse = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_0ExportNotFoundException(body, context);
    const exception = new (0, _models0.ExportNotFoundException)({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, _smithyClient.decorateServiceException)(exception, body);
};
const deserializeAws_json1_0GlobalTableAlreadyExistsExceptionResponse = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_0GlobalTableAlreadyExistsException(body, context);
    const exception = new (0, _models0.GlobalTableAlreadyExistsException)({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, _smithyClient.decorateServiceException)(exception, body);
};
const deserializeAws_json1_0GlobalTableNotFoundExceptionResponse = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_0GlobalTableNotFoundException(body, context);
    const exception = new (0, _models0.GlobalTableNotFoundException)({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, _smithyClient.decorateServiceException)(exception, body);
};
const deserializeAws_json1_0IdempotentParameterMismatchExceptionResponse = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_0IdempotentParameterMismatchException(body, context);
    const exception = new (0, _models0.IdempotentParameterMismatchException)({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, _smithyClient.decorateServiceException)(exception, body);
};
const deserializeAws_json1_0ImportConflictExceptionResponse = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_0ImportConflictException(body, context);
    const exception = new (0, _models0.ImportConflictException)({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, _smithyClient.decorateServiceException)(exception, body);
};
const deserializeAws_json1_0ImportNotFoundExceptionResponse = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_0ImportNotFoundException(body, context);
    const exception = new (0, _models0.ImportNotFoundException)({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, _smithyClient.decorateServiceException)(exception, body);
};
const deserializeAws_json1_0IndexNotFoundExceptionResponse = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_0IndexNotFoundException(body, context);
    const exception = new (0, _models0.IndexNotFoundException)({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, _smithyClient.decorateServiceException)(exception, body);
};
const deserializeAws_json1_0InternalServerErrorResponse = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_0InternalServerError(body, context);
    const exception = new (0, _models0.InternalServerError)({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, _smithyClient.decorateServiceException)(exception, body);
};
const deserializeAws_json1_0InvalidEndpointExceptionResponse = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_0InvalidEndpointException(body, context);
    const exception = new (0, _models0.InvalidEndpointException)({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, _smithyClient.decorateServiceException)(exception, body);
};
const deserializeAws_json1_0InvalidExportTimeExceptionResponse = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_0InvalidExportTimeException(body, context);
    const exception = new (0, _models0.InvalidExportTimeException)({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, _smithyClient.decorateServiceException)(exception, body);
};
const deserializeAws_json1_0InvalidRestoreTimeExceptionResponse = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_0InvalidRestoreTimeException(body, context);
    const exception = new (0, _models0.InvalidRestoreTimeException)({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, _smithyClient.decorateServiceException)(exception, body);
};
const deserializeAws_json1_0ItemCollectionSizeLimitExceededExceptionResponse = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_0ItemCollectionSizeLimitExceededException(body, context);
    const exception = new (0, _models0.ItemCollectionSizeLimitExceededException)({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, _smithyClient.decorateServiceException)(exception, body);
};
const deserializeAws_json1_0LimitExceededExceptionResponse = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_0LimitExceededException(body, context);
    const exception = new (0, _models0.LimitExceededException)({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, _smithyClient.decorateServiceException)(exception, body);
};
const deserializeAws_json1_0PointInTimeRecoveryUnavailableExceptionResponse = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_0PointInTimeRecoveryUnavailableException(body, context);
    const exception = new (0, _models0.PointInTimeRecoveryUnavailableException)({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, _smithyClient.decorateServiceException)(exception, body);
};
const deserializeAws_json1_0ProvisionedThroughputExceededExceptionResponse = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_0ProvisionedThroughputExceededException(body, context);
    const exception = new (0, _models0.ProvisionedThroughputExceededException)({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, _smithyClient.decorateServiceException)(exception, body);
};
const deserializeAws_json1_0ReplicaAlreadyExistsExceptionResponse = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_0ReplicaAlreadyExistsException(body, context);
    const exception = new (0, _models0.ReplicaAlreadyExistsException)({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, _smithyClient.decorateServiceException)(exception, body);
};
const deserializeAws_json1_0ReplicaNotFoundExceptionResponse = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_0ReplicaNotFoundException(body, context);
    const exception = new (0, _models0.ReplicaNotFoundException)({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, _smithyClient.decorateServiceException)(exception, body);
};
const deserializeAws_json1_0RequestLimitExceededResponse = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_0RequestLimitExceeded(body, context);
    const exception = new (0, _models0.RequestLimitExceeded)({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, _smithyClient.decorateServiceException)(exception, body);
};
const deserializeAws_json1_0ResourceInUseExceptionResponse = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_0ResourceInUseException(body, context);
    const exception = new (0, _models0.ResourceInUseException)({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, _smithyClient.decorateServiceException)(exception, body);
};
const deserializeAws_json1_0ResourceNotFoundExceptionResponse = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_0ResourceNotFoundException(body, context);
    const exception = new (0, _models0.ResourceNotFoundException)({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, _smithyClient.decorateServiceException)(exception, body);
};
const deserializeAws_json1_0TableAlreadyExistsExceptionResponse = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_0TableAlreadyExistsException(body, context);
    const exception = new (0, _models0.TableAlreadyExistsException)({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, _smithyClient.decorateServiceException)(exception, body);
};
const deserializeAws_json1_0TableInUseExceptionResponse = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_0TableInUseException(body, context);
    const exception = new (0, _models0.TableInUseException)({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, _smithyClient.decorateServiceException)(exception, body);
};
const deserializeAws_json1_0TableNotFoundExceptionResponse = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_0TableNotFoundException(body, context);
    const exception = new (0, _models0.TableNotFoundException)({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, _smithyClient.decorateServiceException)(exception, body);
};
const deserializeAws_json1_0TransactionCanceledExceptionResponse = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_0TransactionCanceledException(body, context);
    const exception = new (0, _models0.TransactionCanceledException)({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, _smithyClient.decorateServiceException)(exception, body);
};
const deserializeAws_json1_0TransactionConflictExceptionResponse = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_0TransactionConflictException(body, context);
    const exception = new (0, _models0.TransactionConflictException)({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, _smithyClient.decorateServiceException)(exception, body);
};
const deserializeAws_json1_0TransactionInProgressExceptionResponse = async (parsedOutput, context)=>{
    const body = parsedOutput.body;
    const deserialized = deserializeAws_json1_0TransactionInProgressException(body, context);
    const exception = new (0, _models0.TransactionInProgressException)({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
    });
    return (0, _smithyClient.decorateServiceException)(exception, body);
};
const serializeAws_json1_0AttributeDefinition = (input, context)=>{
    return {
        ...input.AttributeName != null && {
            AttributeName: input.AttributeName
        },
        ...input.AttributeType != null && {
            AttributeType: input.AttributeType
        }
    };
};
const serializeAws_json1_0AttributeDefinitions = (input, context)=>{
    return input.filter((e)=>e != null).map((entry)=>{
        return serializeAws_json1_0AttributeDefinition(entry, context);
    });
};
const serializeAws_json1_0AttributeNameList = (input, context)=>{
    return input.filter((e)=>e != null).map((entry)=>{
        return entry;
    });
};
const serializeAws_json1_0AttributeUpdates = (input, context)=>{
    return Object.entries(input).reduce((acc, [key, value])=>{
        if (value === null) return acc;
        return {
            ...acc,
            [key]: serializeAws_json1_0AttributeValueUpdate(value, context)
        };
    }, {});
};
const serializeAws_json1_0AttributeValue = (input, context)=>{
    return (0, _models0.AttributeValue).visit(input, {
        B: (value)=>({
                B: context.base64Encoder(value)
            }),
        BOOL: (value)=>({
                BOOL: value
            }),
        BS: (value)=>({
                BS: serializeAws_json1_0BinarySetAttributeValue(value, context)
            }),
        L: (value)=>({
                L: serializeAws_json1_0ListAttributeValue(value, context)
            }),
        M: (value)=>({
                M: serializeAws_json1_0MapAttributeValue(value, context)
            }),
        N: (value)=>({
                N: value
            }),
        NS: (value)=>({
                NS: serializeAws_json1_0NumberSetAttributeValue(value, context)
            }),
        NULL: (value)=>({
                NULL: value
            }),
        S: (value)=>({
                S: value
            }),
        SS: (value)=>({
                SS: serializeAws_json1_0StringSetAttributeValue(value, context)
            }),
        _: (name, value)=>({
                name: value
            })
    });
};
const serializeAws_json1_0AttributeValueList = (input, context)=>{
    return input.filter((e)=>e != null).map((entry)=>{
        return serializeAws_json1_0AttributeValue(entry, context);
    });
};
const serializeAws_json1_0AttributeValueUpdate = (input, context)=>{
    return {
        ...input.Action != null && {
            Action: input.Action
        },
        ...input.Value != null && {
            Value: serializeAws_json1_0AttributeValue(input.Value, context)
        }
    };
};
const serializeAws_json1_0AutoScalingPolicyUpdate = (input, context)=>{
    return {
        ...input.PolicyName != null && {
            PolicyName: input.PolicyName
        },
        ...input.TargetTrackingScalingPolicyConfiguration != null && {
            TargetTrackingScalingPolicyConfiguration: serializeAws_json1_0AutoScalingTargetTrackingScalingPolicyConfigurationUpdate(input.TargetTrackingScalingPolicyConfiguration, context)
        }
    };
};
const serializeAws_json1_0AutoScalingSettingsUpdate = (input, context)=>{
    return {
        ...input.AutoScalingDisabled != null && {
            AutoScalingDisabled: input.AutoScalingDisabled
        },
        ...input.AutoScalingRoleArn != null && {
            AutoScalingRoleArn: input.AutoScalingRoleArn
        },
        ...input.MaximumUnits != null && {
            MaximumUnits: input.MaximumUnits
        },
        ...input.MinimumUnits != null && {
            MinimumUnits: input.MinimumUnits
        },
        ...input.ScalingPolicyUpdate != null && {
            ScalingPolicyUpdate: serializeAws_json1_0AutoScalingPolicyUpdate(input.ScalingPolicyUpdate, context)
        }
    };
};
const serializeAws_json1_0AutoScalingTargetTrackingScalingPolicyConfigurationUpdate = (input, context)=>{
    return {
        ...input.DisableScaleIn != null && {
            DisableScaleIn: input.DisableScaleIn
        },
        ...input.ScaleInCooldown != null && {
            ScaleInCooldown: input.ScaleInCooldown
        },
        ...input.ScaleOutCooldown != null && {
            ScaleOutCooldown: input.ScaleOutCooldown
        },
        ...input.TargetValue != null && {
            TargetValue: (0, _smithyClient.serializeFloat)(input.TargetValue)
        }
    };
};
const serializeAws_json1_0BatchExecuteStatementInput = (input, context)=>{
    return {
        ...input.ReturnConsumedCapacity != null && {
            ReturnConsumedCapacity: input.ReturnConsumedCapacity
        },
        ...input.Statements != null && {
            Statements: serializeAws_json1_0PartiQLBatchRequest(input.Statements, context)
        }
    };
};
const serializeAws_json1_0BatchGetItemInput = (input, context)=>{
    return {
        ...input.RequestItems != null && {
            RequestItems: serializeAws_json1_0BatchGetRequestMap(input.RequestItems, context)
        },
        ...input.ReturnConsumedCapacity != null && {
            ReturnConsumedCapacity: input.ReturnConsumedCapacity
        }
    };
};
const serializeAws_json1_0BatchGetRequestMap = (input, context)=>{
    return Object.entries(input).reduce((acc, [key, value])=>{
        if (value === null) return acc;
        return {
            ...acc,
            [key]: serializeAws_json1_0KeysAndAttributes(value, context)
        };
    }, {});
};
const serializeAws_json1_0BatchStatementRequest = (input, context)=>{
    return {
        ...input.ConsistentRead != null && {
            ConsistentRead: input.ConsistentRead
        },
        ...input.Parameters != null && {
            Parameters: serializeAws_json1_0PreparedStatementParameters(input.Parameters, context)
        },
        ...input.Statement != null && {
            Statement: input.Statement
        }
    };
};
const serializeAws_json1_0BatchWriteItemInput = (input, context)=>{
    return {
        ...input.RequestItems != null && {
            RequestItems: serializeAws_json1_0BatchWriteItemRequestMap(input.RequestItems, context)
        },
        ...input.ReturnConsumedCapacity != null && {
            ReturnConsumedCapacity: input.ReturnConsumedCapacity
        },
        ...input.ReturnItemCollectionMetrics != null && {
            ReturnItemCollectionMetrics: input.ReturnItemCollectionMetrics
        }
    };
};
const serializeAws_json1_0BatchWriteItemRequestMap = (input, context)=>{
    return Object.entries(input).reduce((acc, [key, value])=>{
        if (value === null) return acc;
        return {
            ...acc,
            [key]: serializeAws_json1_0WriteRequests(value, context)
        };
    }, {});
};
const serializeAws_json1_0BinarySetAttributeValue = (input, context)=>{
    return input.filter((e)=>e != null).map((entry)=>{
        return context.base64Encoder(entry);
    });
};
const serializeAws_json1_0Condition = (input, context)=>{
    return {
        ...input.AttributeValueList != null && {
            AttributeValueList: serializeAws_json1_0AttributeValueList(input.AttributeValueList, context)
        },
        ...input.ComparisonOperator != null && {
            ComparisonOperator: input.ComparisonOperator
        }
    };
};
const serializeAws_json1_0ConditionCheck = (input, context)=>{
    return {
        ...input.ConditionExpression != null && {
            ConditionExpression: input.ConditionExpression
        },
        ...input.ExpressionAttributeNames != null && {
            ExpressionAttributeNames: serializeAws_json1_0ExpressionAttributeNameMap(input.ExpressionAttributeNames, context)
        },
        ...input.ExpressionAttributeValues != null && {
            ExpressionAttributeValues: serializeAws_json1_0ExpressionAttributeValueMap(input.ExpressionAttributeValues, context)
        },
        ...input.Key != null && {
            Key: serializeAws_json1_0Key(input.Key, context)
        },
        ...input.ReturnValuesOnConditionCheckFailure != null && {
            ReturnValuesOnConditionCheckFailure: input.ReturnValuesOnConditionCheckFailure
        },
        ...input.TableName != null && {
            TableName: input.TableName
        }
    };
};
const serializeAws_json1_0CreateBackupInput = (input, context)=>{
    return {
        ...input.BackupName != null && {
            BackupName: input.BackupName
        },
        ...input.TableName != null && {
            TableName: input.TableName
        }
    };
};
const serializeAws_json1_0CreateGlobalSecondaryIndexAction = (input, context)=>{
    return {
        ...input.IndexName != null && {
            IndexName: input.IndexName
        },
        ...input.KeySchema != null && {
            KeySchema: serializeAws_json1_0KeySchema(input.KeySchema, context)
        },
        ...input.Projection != null && {
            Projection: serializeAws_json1_0Projection(input.Projection, context)
        },
        ...input.ProvisionedThroughput != null && {
            ProvisionedThroughput: serializeAws_json1_0ProvisionedThroughput(input.ProvisionedThroughput, context)
        }
    };
};
const serializeAws_json1_0CreateGlobalTableInput = (input, context)=>{
    return {
        ...input.GlobalTableName != null && {
            GlobalTableName: input.GlobalTableName
        },
        ...input.ReplicationGroup != null && {
            ReplicationGroup: serializeAws_json1_0ReplicaList(input.ReplicationGroup, context)
        }
    };
};
const serializeAws_json1_0CreateReplicaAction = (input, context)=>{
    return {
        ...input.RegionName != null && {
            RegionName: input.RegionName
        }
    };
};
const serializeAws_json1_0CreateReplicationGroupMemberAction = (input, context)=>{
    return {
        ...input.GlobalSecondaryIndexes != null && {
            GlobalSecondaryIndexes: serializeAws_json1_0ReplicaGlobalSecondaryIndexList(input.GlobalSecondaryIndexes, context)
        },
        ...input.KMSMasterKeyId != null && {
            KMSMasterKeyId: input.KMSMasterKeyId
        },
        ...input.ProvisionedThroughputOverride != null && {
            ProvisionedThroughputOverride: serializeAws_json1_0ProvisionedThroughputOverride(input.ProvisionedThroughputOverride, context)
        },
        ...input.RegionName != null && {
            RegionName: input.RegionName
        },
        ...input.TableClassOverride != null && {
            TableClassOverride: input.TableClassOverride
        }
    };
};
const serializeAws_json1_0CreateTableInput = (input, context)=>{
    return {
        ...input.AttributeDefinitions != null && {
            AttributeDefinitions: serializeAws_json1_0AttributeDefinitions(input.AttributeDefinitions, context)
        },
        ...input.BillingMode != null && {
            BillingMode: input.BillingMode
        },
        ...input.GlobalSecondaryIndexes != null && {
            GlobalSecondaryIndexes: serializeAws_json1_0GlobalSecondaryIndexList(input.GlobalSecondaryIndexes, context)
        },
        ...input.KeySchema != null && {
            KeySchema: serializeAws_json1_0KeySchema(input.KeySchema, context)
        },
        ...input.LocalSecondaryIndexes != null && {
            LocalSecondaryIndexes: serializeAws_json1_0LocalSecondaryIndexList(input.LocalSecondaryIndexes, context)
        },
        ...input.ProvisionedThroughput != null && {
            ProvisionedThroughput: serializeAws_json1_0ProvisionedThroughput(input.ProvisionedThroughput, context)
        },
        ...input.SSESpecification != null && {
            SSESpecification: serializeAws_json1_0SSESpecification(input.SSESpecification, context)
        },
        ...input.StreamSpecification != null && {
            StreamSpecification: serializeAws_json1_0StreamSpecification(input.StreamSpecification, context)
        },
        ...input.TableClass != null && {
            TableClass: input.TableClass
        },
        ...input.TableName != null && {
            TableName: input.TableName
        },
        ...input.Tags != null && {
            Tags: serializeAws_json1_0TagList(input.Tags, context)
        }
    };
};
const serializeAws_json1_0CsvHeaderList = (input, context)=>{
    return input.filter((e)=>e != null).map((entry)=>{
        return entry;
    });
};
const serializeAws_json1_0CsvOptions = (input, context)=>{
    return {
        ...input.Delimiter != null && {
            Delimiter: input.Delimiter
        },
        ...input.HeaderList != null && {
            HeaderList: serializeAws_json1_0CsvHeaderList(input.HeaderList, context)
        }
    };
};
const serializeAws_json1_0Delete = (input, context)=>{
    return {
        ...input.ConditionExpression != null && {
            ConditionExpression: input.ConditionExpression
        },
        ...input.ExpressionAttributeNames != null && {
            ExpressionAttributeNames: serializeAws_json1_0ExpressionAttributeNameMap(input.ExpressionAttributeNames, context)
        },
        ...input.ExpressionAttributeValues != null && {
            ExpressionAttributeValues: serializeAws_json1_0ExpressionAttributeValueMap(input.ExpressionAttributeValues, context)
        },
        ...input.Key != null && {
            Key: serializeAws_json1_0Key(input.Key, context)
        },
        ...input.ReturnValuesOnConditionCheckFailure != null && {
            ReturnValuesOnConditionCheckFailure: input.ReturnValuesOnConditionCheckFailure
        },
        ...input.TableName != null && {
            TableName: input.TableName
        }
    };
};
const serializeAws_json1_0DeleteBackupInput = (input, context)=>{
    return {
        ...input.BackupArn != null && {
            BackupArn: input.BackupArn
        }
    };
};
const serializeAws_json1_0DeleteGlobalSecondaryIndexAction = (input, context)=>{
    return {
        ...input.IndexName != null && {
            IndexName: input.IndexName
        }
    };
};
const serializeAws_json1_0DeleteItemInput = (input, context)=>{
    return {
        ...input.ConditionExpression != null && {
            ConditionExpression: input.ConditionExpression
        },
        ...input.ConditionalOperator != null && {
            ConditionalOperator: input.ConditionalOperator
        },
        ...input.Expected != null && {
            Expected: serializeAws_json1_0ExpectedAttributeMap(input.Expected, context)
        },
        ...input.ExpressionAttributeNames != null && {
            ExpressionAttributeNames: serializeAws_json1_0ExpressionAttributeNameMap(input.ExpressionAttributeNames, context)
        },
        ...input.ExpressionAttributeValues != null && {
            ExpressionAttributeValues: serializeAws_json1_0ExpressionAttributeValueMap(input.ExpressionAttributeValues, context)
        },
        ...input.Key != null && {
            Key: serializeAws_json1_0Key(input.Key, context)
        },
        ...input.ReturnConsumedCapacity != null && {
            ReturnConsumedCapacity: input.ReturnConsumedCapacity
        },
        ...input.ReturnItemCollectionMetrics != null && {
            ReturnItemCollectionMetrics: input.ReturnItemCollectionMetrics
        },
        ...input.ReturnValues != null && {
            ReturnValues: input.ReturnValues
        },
        ...input.TableName != null && {
            TableName: input.TableName
        }
    };
};
const serializeAws_json1_0DeleteReplicaAction = (input, context)=>{
    return {
        ...input.RegionName != null && {
            RegionName: input.RegionName
        }
    };
};
const serializeAws_json1_0DeleteReplicationGroupMemberAction = (input, context)=>{
    return {
        ...input.RegionName != null && {
            RegionName: input.RegionName
        }
    };
};
const serializeAws_json1_0DeleteRequest = (input, context)=>{
    return {
        ...input.Key != null && {
            Key: serializeAws_json1_0Key(input.Key, context)
        }
    };
};
const serializeAws_json1_0DeleteTableInput = (input, context)=>{
    return {
        ...input.TableName != null && {
            TableName: input.TableName
        }
    };
};
const serializeAws_json1_0DescribeBackupInput = (input, context)=>{
    return {
        ...input.BackupArn != null && {
            BackupArn: input.BackupArn
        }
    };
};
const serializeAws_json1_0DescribeContinuousBackupsInput = (input, context)=>{
    return {
        ...input.TableName != null && {
            TableName: input.TableName
        }
    };
};
const serializeAws_json1_0DescribeContributorInsightsInput = (input, context)=>{
    return {
        ...input.IndexName != null && {
            IndexName: input.IndexName
        },
        ...input.TableName != null && {
            TableName: input.TableName
        }
    };
};
const serializeAws_json1_0DescribeEndpointsRequest = (input, context)=>{
    return {};
};
const serializeAws_json1_0DescribeExportInput = (input, context)=>{
    return {
        ...input.ExportArn != null && {
            ExportArn: input.ExportArn
        }
    };
};
const serializeAws_json1_0DescribeGlobalTableInput = (input, context)=>{
    return {
        ...input.GlobalTableName != null && {
            GlobalTableName: input.GlobalTableName
        }
    };
};
const serializeAws_json1_0DescribeGlobalTableSettingsInput = (input, context)=>{
    return {
        ...input.GlobalTableName != null && {
            GlobalTableName: input.GlobalTableName
        }
    };
};
const serializeAws_json1_0DescribeImportInput = (input, context)=>{
    return {
        ...input.ImportArn != null && {
            ImportArn: input.ImportArn
        }
    };
};
const serializeAws_json1_0DescribeKinesisStreamingDestinationInput = (input, context)=>{
    return {
        ...input.TableName != null && {
            TableName: input.TableName
        }
    };
};
const serializeAws_json1_0DescribeLimitsInput = (input, context)=>{
    return {};
};
const serializeAws_json1_0DescribeTableInput = (input, context)=>{
    return {
        ...input.TableName != null && {
            TableName: input.TableName
        }
    };
};
const serializeAws_json1_0DescribeTableReplicaAutoScalingInput = (input, context)=>{
    return {
        ...input.TableName != null && {
            TableName: input.TableName
        }
    };
};
const serializeAws_json1_0DescribeTimeToLiveInput = (input, context)=>{
    return {
        ...input.TableName != null && {
            TableName: input.TableName
        }
    };
};
const serializeAws_json1_0ExecuteStatementInput = (input, context)=>{
    return {
        ...input.ConsistentRead != null && {
            ConsistentRead: input.ConsistentRead
        },
        ...input.Limit != null && {
            Limit: input.Limit
        },
        ...input.NextToken != null && {
            NextToken: input.NextToken
        },
        ...input.Parameters != null && {
            Parameters: serializeAws_json1_0PreparedStatementParameters(input.Parameters, context)
        },
        ...input.ReturnConsumedCapacity != null && {
            ReturnConsumedCapacity: input.ReturnConsumedCapacity
        },
        ...input.Statement != null && {
            Statement: input.Statement
        }
    };
};
const serializeAws_json1_0ExecuteTransactionInput = (input, context)=>{
    return {
        ClientRequestToken: input.ClientRequestToken ?? (0, _uuid.v4)(),
        ...input.ReturnConsumedCapacity != null && {
            ReturnConsumedCapacity: input.ReturnConsumedCapacity
        },
        ...input.TransactStatements != null && {
            TransactStatements: serializeAws_json1_0ParameterizedStatements(input.TransactStatements, context)
        }
    };
};
const serializeAws_json1_0ExpectedAttributeMap = (input, context)=>{
    return Object.entries(input).reduce((acc, [key, value])=>{
        if (value === null) return acc;
        return {
            ...acc,
            [key]: serializeAws_json1_0ExpectedAttributeValue(value, context)
        };
    }, {});
};
const serializeAws_json1_0ExpectedAttributeValue = (input, context)=>{
    return {
        ...input.AttributeValueList != null && {
            AttributeValueList: serializeAws_json1_0AttributeValueList(input.AttributeValueList, context)
        },
        ...input.ComparisonOperator != null && {
            ComparisonOperator: input.ComparisonOperator
        },
        ...input.Exists != null && {
            Exists: input.Exists
        },
        ...input.Value != null && {
            Value: serializeAws_json1_0AttributeValue(input.Value, context)
        }
    };
};
const serializeAws_json1_0ExportTableToPointInTimeInput = (input, context)=>{
    return {
        ClientToken: input.ClientToken ?? (0, _uuid.v4)(),
        ...input.ExportFormat != null && {
            ExportFormat: input.ExportFormat
        },
        ...input.ExportTime != null && {
            ExportTime: Math.round(input.ExportTime.getTime() / 1000)
        },
        ...input.S3Bucket != null && {
            S3Bucket: input.S3Bucket
        },
        ...input.S3BucketOwner != null && {
            S3BucketOwner: input.S3BucketOwner
        },
        ...input.S3Prefix != null && {
            S3Prefix: input.S3Prefix
        },
        ...input.S3SseAlgorithm != null && {
            S3SseAlgorithm: input.S3SseAlgorithm
        },
        ...input.S3SseKmsKeyId != null && {
            S3SseKmsKeyId: input.S3SseKmsKeyId
        },
        ...input.TableArn != null && {
            TableArn: input.TableArn
        }
    };
};
const serializeAws_json1_0ExpressionAttributeNameMap = (input, context)=>{
    return Object.entries(input).reduce((acc, [key, value])=>{
        if (value === null) return acc;
        return {
            ...acc,
            [key]: value
        };
    }, {});
};
const serializeAws_json1_0ExpressionAttributeValueMap = (input, context)=>{
    return Object.entries(input).reduce((acc, [key, value])=>{
        if (value === null) return acc;
        return {
            ...acc,
            [key]: serializeAws_json1_0AttributeValue(value, context)
        };
    }, {});
};
const serializeAws_json1_0FilterConditionMap = (input, context)=>{
    return Object.entries(input).reduce((acc, [key, value])=>{
        if (value === null) return acc;
        return {
            ...acc,
            [key]: serializeAws_json1_0Condition(value, context)
        };
    }, {});
};
const serializeAws_json1_0Get = (input, context)=>{
    return {
        ...input.ExpressionAttributeNames != null && {
            ExpressionAttributeNames: serializeAws_json1_0ExpressionAttributeNameMap(input.ExpressionAttributeNames, context)
        },
        ...input.Key != null && {
            Key: serializeAws_json1_0Key(input.Key, context)
        },
        ...input.ProjectionExpression != null && {
            ProjectionExpression: input.ProjectionExpression
        },
        ...input.TableName != null && {
            TableName: input.TableName
        }
    };
};
const serializeAws_json1_0GetItemInput = (input, context)=>{
    return {
        ...input.AttributesToGet != null && {
            AttributesToGet: serializeAws_json1_0AttributeNameList(input.AttributesToGet, context)
        },
        ...input.ConsistentRead != null && {
            ConsistentRead: input.ConsistentRead
        },
        ...input.ExpressionAttributeNames != null && {
            ExpressionAttributeNames: serializeAws_json1_0ExpressionAttributeNameMap(input.ExpressionAttributeNames, context)
        },
        ...input.Key != null && {
            Key: serializeAws_json1_0Key(input.Key, context)
        },
        ...input.ProjectionExpression != null && {
            ProjectionExpression: input.ProjectionExpression
        },
        ...input.ReturnConsumedCapacity != null && {
            ReturnConsumedCapacity: input.ReturnConsumedCapacity
        },
        ...input.TableName != null && {
            TableName: input.TableName
        }
    };
};
const serializeAws_json1_0GlobalSecondaryIndex = (input, context)=>{
    return {
        ...input.IndexName != null && {
            IndexName: input.IndexName
        },
        ...input.KeySchema != null && {
            KeySchema: serializeAws_json1_0KeySchema(input.KeySchema, context)
        },
        ...input.Projection != null && {
            Projection: serializeAws_json1_0Projection(input.Projection, context)
        },
        ...input.ProvisionedThroughput != null && {
            ProvisionedThroughput: serializeAws_json1_0ProvisionedThroughput(input.ProvisionedThroughput, context)
        }
    };
};
const serializeAws_json1_0GlobalSecondaryIndexAutoScalingUpdate = (input, context)=>{
    return {
        ...input.IndexName != null && {
            IndexName: input.IndexName
        },
        ...input.ProvisionedWriteCapacityAutoScalingUpdate != null && {
            ProvisionedWriteCapacityAutoScalingUpdate: serializeAws_json1_0AutoScalingSettingsUpdate(input.ProvisionedWriteCapacityAutoScalingUpdate, context)
        }
    };
};
const serializeAws_json1_0GlobalSecondaryIndexAutoScalingUpdateList = (input, context)=>{
    return input.filter((e)=>e != null).map((entry)=>{
        return serializeAws_json1_0GlobalSecondaryIndexAutoScalingUpdate(entry, context);
    });
};
const serializeAws_json1_0GlobalSecondaryIndexList = (input, context)=>{
    return input.filter((e)=>e != null).map((entry)=>{
        return serializeAws_json1_0GlobalSecondaryIndex(entry, context);
    });
};
const serializeAws_json1_0GlobalSecondaryIndexUpdate = (input, context)=>{
    return {
        ...input.Create != null && {
            Create: serializeAws_json1_0CreateGlobalSecondaryIndexAction(input.Create, context)
        },
        ...input.Delete != null && {
            Delete: serializeAws_json1_0DeleteGlobalSecondaryIndexAction(input.Delete, context)
        },
        ...input.Update != null && {
            Update: serializeAws_json1_0UpdateGlobalSecondaryIndexAction(input.Update, context)
        }
    };
};
const serializeAws_json1_0GlobalSecondaryIndexUpdateList = (input, context)=>{
    return input.filter((e)=>e != null).map((entry)=>{
        return serializeAws_json1_0GlobalSecondaryIndexUpdate(entry, context);
    });
};
const serializeAws_json1_0GlobalTableGlobalSecondaryIndexSettingsUpdate = (input, context)=>{
    return {
        ...input.IndexName != null && {
            IndexName: input.IndexName
        },
        ...input.ProvisionedWriteCapacityAutoScalingSettingsUpdate != null && {
            ProvisionedWriteCapacityAutoScalingSettingsUpdate: serializeAws_json1_0AutoScalingSettingsUpdate(input.ProvisionedWriteCapacityAutoScalingSettingsUpdate, context)
        },
        ...input.ProvisionedWriteCapacityUnits != null && {
            ProvisionedWriteCapacityUnits: input.ProvisionedWriteCapacityUnits
        }
    };
};
const serializeAws_json1_0GlobalTableGlobalSecondaryIndexSettingsUpdateList = (input, context)=>{
    return input.filter((e)=>e != null).map((entry)=>{
        return serializeAws_json1_0GlobalTableGlobalSecondaryIndexSettingsUpdate(entry, context);
    });
};
const serializeAws_json1_0ImportTableInput = (input, context)=>{
    return {
        ClientToken: input.ClientToken ?? (0, _uuid.v4)(),
        ...input.InputCompressionType != null && {
            InputCompressionType: input.InputCompressionType
        },
        ...input.InputFormat != null && {
            InputFormat: input.InputFormat
        },
        ...input.InputFormatOptions != null && {
            InputFormatOptions: serializeAws_json1_0InputFormatOptions(input.InputFormatOptions, context)
        },
        ...input.S3BucketSource != null && {
            S3BucketSource: serializeAws_json1_0S3BucketSource(input.S3BucketSource, context)
        },
        ...input.TableCreationParameters != null && {
            TableCreationParameters: serializeAws_json1_0TableCreationParameters(input.TableCreationParameters, context)
        }
    };
};
const serializeAws_json1_0InputFormatOptions = (input, context)=>{
    return {
        ...input.Csv != null && {
            Csv: serializeAws_json1_0CsvOptions(input.Csv, context)
        }
    };
};
const serializeAws_json1_0Key = (input, context)=>{
    return Object.entries(input).reduce((acc, [key, value])=>{
        if (value === null) return acc;
        return {
            ...acc,
            [key]: serializeAws_json1_0AttributeValue(value, context)
        };
    }, {});
};
const serializeAws_json1_0KeyConditions = (input, context)=>{
    return Object.entries(input).reduce((acc, [key, value])=>{
        if (value === null) return acc;
        return {
            ...acc,
            [key]: serializeAws_json1_0Condition(value, context)
        };
    }, {});
};
const serializeAws_json1_0KeyList = (input, context)=>{
    return input.filter((e)=>e != null).map((entry)=>{
        return serializeAws_json1_0Key(entry, context);
    });
};
const serializeAws_json1_0KeysAndAttributes = (input, context)=>{
    return {
        ...input.AttributesToGet != null && {
            AttributesToGet: serializeAws_json1_0AttributeNameList(input.AttributesToGet, context)
        },
        ...input.ConsistentRead != null && {
            ConsistentRead: input.ConsistentRead
        },
        ...input.ExpressionAttributeNames != null && {
            ExpressionAttributeNames: serializeAws_json1_0ExpressionAttributeNameMap(input.ExpressionAttributeNames, context)
        },
        ...input.Keys != null && {
            Keys: serializeAws_json1_0KeyList(input.Keys, context)
        },
        ...input.ProjectionExpression != null && {
            ProjectionExpression: input.ProjectionExpression
        }
    };
};
const serializeAws_json1_0KeySchema = (input, context)=>{
    return input.filter((e)=>e != null).map((entry)=>{
        return serializeAws_json1_0KeySchemaElement(entry, context);
    });
};
const serializeAws_json1_0KeySchemaElement = (input, context)=>{
    return {
        ...input.AttributeName != null && {
            AttributeName: input.AttributeName
        },
        ...input.KeyType != null && {
            KeyType: input.KeyType
        }
    };
};
const serializeAws_json1_0KinesisStreamingDestinationInput = (input, context)=>{
    return {
        ...input.StreamArn != null && {
            StreamArn: input.StreamArn
        },
        ...input.TableName != null && {
            TableName: input.TableName
        }
    };
};
const serializeAws_json1_0ListAttributeValue = (input, context)=>{
    return input.filter((e)=>e != null).map((entry)=>{
        return serializeAws_json1_0AttributeValue(entry, context);
    });
};
const serializeAws_json1_0ListBackupsInput = (input, context)=>{
    return {
        ...input.BackupType != null && {
            BackupType: input.BackupType
        },
        ...input.ExclusiveStartBackupArn != null && {
            ExclusiveStartBackupArn: input.ExclusiveStartBackupArn
        },
        ...input.Limit != null && {
            Limit: input.Limit
        },
        ...input.TableName != null && {
            TableName: input.TableName
        },
        ...input.TimeRangeLowerBound != null && {
            TimeRangeLowerBound: Math.round(input.TimeRangeLowerBound.getTime() / 1000)
        },
        ...input.TimeRangeUpperBound != null && {
            TimeRangeUpperBound: Math.round(input.TimeRangeUpperBound.getTime() / 1000)
        }
    };
};
const serializeAws_json1_0ListContributorInsightsInput = (input, context)=>{
    return {
        ...input.MaxResults != null && {
            MaxResults: input.MaxResults
        },
        ...input.NextToken != null && {
            NextToken: input.NextToken
        },
        ...input.TableName != null && {
            TableName: input.TableName
        }
    };
};
const serializeAws_json1_0ListExportsInput = (input, context)=>{
    return {
        ...input.MaxResults != null && {
            MaxResults: input.MaxResults
        },
        ...input.NextToken != null && {
            NextToken: input.NextToken
        },
        ...input.TableArn != null && {
            TableArn: input.TableArn
        }
    };
};
const serializeAws_json1_0ListGlobalTablesInput = (input, context)=>{
    return {
        ...input.ExclusiveStartGlobalTableName != null && {
            ExclusiveStartGlobalTableName: input.ExclusiveStartGlobalTableName
        },
        ...input.Limit != null && {
            Limit: input.Limit
        },
        ...input.RegionName != null && {
            RegionName: input.RegionName
        }
    };
};
const serializeAws_json1_0ListImportsInput = (input, context)=>{
    return {
        ...input.NextToken != null && {
            NextToken: input.NextToken
        },
        ...input.PageSize != null && {
            PageSize: input.PageSize
        },
        ...input.TableArn != null && {
            TableArn: input.TableArn
        }
    };
};
const serializeAws_json1_0ListTablesInput = (input, context)=>{
    return {
        ...input.ExclusiveStartTableName != null && {
            ExclusiveStartTableName: input.ExclusiveStartTableName
        },
        ...input.Limit != null && {
            Limit: input.Limit
        }
    };
};
const serializeAws_json1_0ListTagsOfResourceInput = (input, context)=>{
    return {
        ...input.NextToken != null && {
            NextToken: input.NextToken
        },
        ...input.ResourceArn != null && {
            ResourceArn: input.ResourceArn
        }
    };
};
const serializeAws_json1_0LocalSecondaryIndex = (input, context)=>{
    return {
        ...input.IndexName != null && {
            IndexName: input.IndexName
        },
        ...input.KeySchema != null && {
            KeySchema: serializeAws_json1_0KeySchema(input.KeySchema, context)
        },
        ...input.Projection != null && {
            Projection: serializeAws_json1_0Projection(input.Projection, context)
        }
    };
};
const serializeAws_json1_0LocalSecondaryIndexList = (input, context)=>{
    return input.filter((e)=>e != null).map((entry)=>{
        return serializeAws_json1_0LocalSecondaryIndex(entry, context);
    });
};
const serializeAws_json1_0MapAttributeValue = (input, context)=>{
    return Object.entries(input).reduce((acc, [key, value])=>{
        if (value === null) return acc;
        return {
            ...acc,
            [key]: serializeAws_json1_0AttributeValue(value, context)
        };
    }, {});
};
const serializeAws_json1_0NonKeyAttributeNameList = (input, context)=>{
    return input.filter((e)=>e != null).map((entry)=>{
        return entry;
    });
};
const serializeAws_json1_0NumberSetAttributeValue = (input, context)=>{
    return input.filter((e)=>e != null).map((entry)=>{
        return entry;
    });
};
const serializeAws_json1_0ParameterizedStatement = (input, context)=>{
    return {
        ...input.Parameters != null && {
            Parameters: serializeAws_json1_0PreparedStatementParameters(input.Parameters, context)
        },
        ...input.Statement != null && {
            Statement: input.Statement
        }
    };
};
const serializeAws_json1_0ParameterizedStatements = (input, context)=>{
    return input.filter((e)=>e != null).map((entry)=>{
        return serializeAws_json1_0ParameterizedStatement(entry, context);
    });
};
const serializeAws_json1_0PartiQLBatchRequest = (input, context)=>{
    return input.filter((e)=>e != null).map((entry)=>{
        return serializeAws_json1_0BatchStatementRequest(entry, context);
    });
};
const serializeAws_json1_0PointInTimeRecoverySpecification = (input, context)=>{
    return {
        ...input.PointInTimeRecoveryEnabled != null && {
            PointInTimeRecoveryEnabled: input.PointInTimeRecoveryEnabled
        }
    };
};
const serializeAws_json1_0PreparedStatementParameters = (input, context)=>{
    return input.filter((e)=>e != null).map((entry)=>{
        return serializeAws_json1_0AttributeValue(entry, context);
    });
};
const serializeAws_json1_0Projection = (input, context)=>{
    return {
        ...input.NonKeyAttributes != null && {
            NonKeyAttributes: serializeAws_json1_0NonKeyAttributeNameList(input.NonKeyAttributes, context)
        },
        ...input.ProjectionType != null && {
            ProjectionType: input.ProjectionType
        }
    };
};
const serializeAws_json1_0ProvisionedThroughput = (input, context)=>{
    return {
        ...input.ReadCapacityUnits != null && {
            ReadCapacityUnits: input.ReadCapacityUnits
        },
        ...input.WriteCapacityUnits != null && {
            WriteCapacityUnits: input.WriteCapacityUnits
        }
    };
};
const serializeAws_json1_0ProvisionedThroughputOverride = (input, context)=>{
    return {
        ...input.ReadCapacityUnits != null && {
            ReadCapacityUnits: input.ReadCapacityUnits
        }
    };
};
const serializeAws_json1_0Put = (input, context)=>{
    return {
        ...input.ConditionExpression != null && {
            ConditionExpression: input.ConditionExpression
        },
        ...input.ExpressionAttributeNames != null && {
            ExpressionAttributeNames: serializeAws_json1_0ExpressionAttributeNameMap(input.ExpressionAttributeNames, context)
        },
        ...input.ExpressionAttributeValues != null && {
            ExpressionAttributeValues: serializeAws_json1_0ExpressionAttributeValueMap(input.ExpressionAttributeValues, context)
        },
        ...input.Item != null && {
            Item: serializeAws_json1_0PutItemInputAttributeMap(input.Item, context)
        },
        ...input.ReturnValuesOnConditionCheckFailure != null && {
            ReturnValuesOnConditionCheckFailure: input.ReturnValuesOnConditionCheckFailure
        },
        ...input.TableName != null && {
            TableName: input.TableName
        }
    };
};
const serializeAws_json1_0PutItemInput = (input, context)=>{
    return {
        ...input.ConditionExpression != null && {
            ConditionExpression: input.ConditionExpression
        },
        ...input.ConditionalOperator != null && {
            ConditionalOperator: input.ConditionalOperator
        },
        ...input.Expected != null && {
            Expected: serializeAws_json1_0ExpectedAttributeMap(input.Expected, context)
        },
        ...input.ExpressionAttributeNames != null && {
            ExpressionAttributeNames: serializeAws_json1_0ExpressionAttributeNameMap(input.ExpressionAttributeNames, context)
        },
        ...input.ExpressionAttributeValues != null && {
            ExpressionAttributeValues: serializeAws_json1_0ExpressionAttributeValueMap(input.ExpressionAttributeValues, context)
        },
        ...input.Item != null && {
            Item: serializeAws_json1_0PutItemInputAttributeMap(input.Item, context)
        },
        ...input.ReturnConsumedCapacity != null && {
            ReturnConsumedCapacity: input.ReturnConsumedCapacity
        },
        ...input.ReturnItemCollectionMetrics != null && {
            ReturnItemCollectionMetrics: input.ReturnItemCollectionMetrics
        },
        ...input.ReturnValues != null && {
            ReturnValues: input.ReturnValues
        },
        ...input.TableName != null && {
            TableName: input.TableName
        }
    };
};
const serializeAws_json1_0PutItemInputAttributeMap = (input, context)=>{
    return Object.entries(input).reduce((acc, [key, value])=>{
        if (value === null) return acc;
        return {
            ...acc,
            [key]: serializeAws_json1_0AttributeValue(value, context)
        };
    }, {});
};
const serializeAws_json1_0PutRequest = (input, context)=>{
    return {
        ...input.Item != null && {
            Item: serializeAws_json1_0PutItemInputAttributeMap(input.Item, context)
        }
    };
};
const serializeAws_json1_0QueryInput = (input, context)=>{
    return {
        ...input.AttributesToGet != null && {
            AttributesToGet: serializeAws_json1_0AttributeNameList(input.AttributesToGet, context)
        },
        ...input.ConditionalOperator != null && {
            ConditionalOperator: input.ConditionalOperator
        },
        ...input.ConsistentRead != null && {
            ConsistentRead: input.ConsistentRead
        },
        ...input.ExclusiveStartKey != null && {
            ExclusiveStartKey: serializeAws_json1_0Key(input.ExclusiveStartKey, context)
        },
        ...input.ExpressionAttributeNames != null && {
            ExpressionAttributeNames: serializeAws_json1_0ExpressionAttributeNameMap(input.ExpressionAttributeNames, context)
        },
        ...input.ExpressionAttributeValues != null && {
            ExpressionAttributeValues: serializeAws_json1_0ExpressionAttributeValueMap(input.ExpressionAttributeValues, context)
        },
        ...input.FilterExpression != null && {
            FilterExpression: input.FilterExpression
        },
        ...input.IndexName != null && {
            IndexName: input.IndexName
        },
        ...input.KeyConditionExpression != null && {
            KeyConditionExpression: input.KeyConditionExpression
        },
        ...input.KeyConditions != null && {
            KeyConditions: serializeAws_json1_0KeyConditions(input.KeyConditions, context)
        },
        ...input.Limit != null && {
            Limit: input.Limit
        },
        ...input.ProjectionExpression != null && {
            ProjectionExpression: input.ProjectionExpression
        },
        ...input.QueryFilter != null && {
            QueryFilter: serializeAws_json1_0FilterConditionMap(input.QueryFilter, context)
        },
        ...input.ReturnConsumedCapacity != null && {
            ReturnConsumedCapacity: input.ReturnConsumedCapacity
        },
        ...input.ScanIndexForward != null && {
            ScanIndexForward: input.ScanIndexForward
        },
        ...input.Select != null && {
            Select: input.Select
        },
        ...input.TableName != null && {
            TableName: input.TableName
        }
    };
};
const serializeAws_json1_0Replica = (input, context)=>{
    return {
        ...input.RegionName != null && {
            RegionName: input.RegionName
        }
    };
};
const serializeAws_json1_0ReplicaAutoScalingUpdate = (input, context)=>{
    return {
        ...input.RegionName != null && {
            RegionName: input.RegionName
        },
        ...input.ReplicaGlobalSecondaryIndexUpdates != null && {
            ReplicaGlobalSecondaryIndexUpdates: serializeAws_json1_0ReplicaGlobalSecondaryIndexAutoScalingUpdateList(input.ReplicaGlobalSecondaryIndexUpdates, context)
        },
        ...input.ReplicaProvisionedReadCapacityAutoScalingUpdate != null && {
            ReplicaProvisionedReadCapacityAutoScalingUpdate: serializeAws_json1_0AutoScalingSettingsUpdate(input.ReplicaProvisionedReadCapacityAutoScalingUpdate, context)
        }
    };
};
const serializeAws_json1_0ReplicaAutoScalingUpdateList = (input, context)=>{
    return input.filter((e)=>e != null).map((entry)=>{
        return serializeAws_json1_0ReplicaAutoScalingUpdate(entry, context);
    });
};
const serializeAws_json1_0ReplicaGlobalSecondaryIndex = (input, context)=>{
    return {
        ...input.IndexName != null && {
            IndexName: input.IndexName
        },
        ...input.ProvisionedThroughputOverride != null && {
            ProvisionedThroughputOverride: serializeAws_json1_0ProvisionedThroughputOverride(input.ProvisionedThroughputOverride, context)
        }
    };
};
const serializeAws_json1_0ReplicaGlobalSecondaryIndexAutoScalingUpdate = (input, context)=>{
    return {
        ...input.IndexName != null && {
            IndexName: input.IndexName
        },
        ...input.ProvisionedReadCapacityAutoScalingUpdate != null && {
            ProvisionedReadCapacityAutoScalingUpdate: serializeAws_json1_0AutoScalingSettingsUpdate(input.ProvisionedReadCapacityAutoScalingUpdate, context)
        }
    };
};
const serializeAws_json1_0ReplicaGlobalSecondaryIndexAutoScalingUpdateList = (input, context)=>{
    return input.filter((e)=>e != null).map((entry)=>{
        return serializeAws_json1_0ReplicaGlobalSecondaryIndexAutoScalingUpdate(entry, context);
    });
};
const serializeAws_json1_0ReplicaGlobalSecondaryIndexList = (input, context)=>{
    return input.filter((e)=>e != null).map((entry)=>{
        return serializeAws_json1_0ReplicaGlobalSecondaryIndex(entry, context);
    });
};
const serializeAws_json1_0ReplicaGlobalSecondaryIndexSettingsUpdate = (input, context)=>{
    return {
        ...input.IndexName != null && {
            IndexName: input.IndexName
        },
        ...input.ProvisionedReadCapacityAutoScalingSettingsUpdate != null && {
            ProvisionedReadCapacityAutoScalingSettingsUpdate: serializeAws_json1_0AutoScalingSettingsUpdate(input.ProvisionedReadCapacityAutoScalingSettingsUpdate, context)
        },
        ...input.ProvisionedReadCapacityUnits != null && {
            ProvisionedReadCapacityUnits: input.ProvisionedReadCapacityUnits
        }
    };
};
const serializeAws_json1_0ReplicaGlobalSecondaryIndexSettingsUpdateList = (input, context)=>{
    return input.filter((e)=>e != null).map((entry)=>{
        return serializeAws_json1_0ReplicaGlobalSecondaryIndexSettingsUpdate(entry, context);
    });
};
const serializeAws_json1_0ReplicaList = (input, context)=>{
    return input.filter((e)=>e != null).map((entry)=>{
        return serializeAws_json1_0Replica(entry, context);
    });
};
const serializeAws_json1_0ReplicaSettingsUpdate = (input, context)=>{
    return {
        ...input.RegionName != null && {
            RegionName: input.RegionName
        },
        ...input.ReplicaGlobalSecondaryIndexSettingsUpdate != null && {
            ReplicaGlobalSecondaryIndexSettingsUpdate: serializeAws_json1_0ReplicaGlobalSecondaryIndexSettingsUpdateList(input.ReplicaGlobalSecondaryIndexSettingsUpdate, context)
        },
        ...input.ReplicaProvisionedReadCapacityAutoScalingSettingsUpdate != null && {
            ReplicaProvisionedReadCapacityAutoScalingSettingsUpdate: serializeAws_json1_0AutoScalingSettingsUpdate(input.ReplicaProvisionedReadCapacityAutoScalingSettingsUpdate, context)
        },
        ...input.ReplicaProvisionedReadCapacityUnits != null && {
            ReplicaProvisionedReadCapacityUnits: input.ReplicaProvisionedReadCapacityUnits
        },
        ...input.ReplicaTableClass != null && {
            ReplicaTableClass: input.ReplicaTableClass
        }
    };
};
const serializeAws_json1_0ReplicaSettingsUpdateList = (input, context)=>{
    return input.filter((e)=>e != null).map((entry)=>{
        return serializeAws_json1_0ReplicaSettingsUpdate(entry, context);
    });
};
const serializeAws_json1_0ReplicationGroupUpdate = (input, context)=>{
    return {
        ...input.Create != null && {
            Create: serializeAws_json1_0CreateReplicationGroupMemberAction(input.Create, context)
        },
        ...input.Delete != null && {
            Delete: serializeAws_json1_0DeleteReplicationGroupMemberAction(input.Delete, context)
        },
        ...input.Update != null && {
            Update: serializeAws_json1_0UpdateReplicationGroupMemberAction(input.Update, context)
        }
    };
};
const serializeAws_json1_0ReplicationGroupUpdateList = (input, context)=>{
    return input.filter((e)=>e != null).map((entry)=>{
        return serializeAws_json1_0ReplicationGroupUpdate(entry, context);
    });
};
const serializeAws_json1_0ReplicaUpdate = (input, context)=>{
    return {
        ...input.Create != null && {
            Create: serializeAws_json1_0CreateReplicaAction(input.Create, context)
        },
        ...input.Delete != null && {
            Delete: serializeAws_json1_0DeleteReplicaAction(input.Delete, context)
        }
    };
};
const serializeAws_json1_0ReplicaUpdateList = (input, context)=>{
    return input.filter((e)=>e != null).map((entry)=>{
        return serializeAws_json1_0ReplicaUpdate(entry, context);
    });
};
const serializeAws_json1_0RestoreTableFromBackupInput = (input, context)=>{
    return {
        ...input.BackupArn != null && {
            BackupArn: input.BackupArn
        },
        ...input.BillingModeOverride != null && {
            BillingModeOverride: input.BillingModeOverride
        },
        ...input.GlobalSecondaryIndexOverride != null && {
            GlobalSecondaryIndexOverride: serializeAws_json1_0GlobalSecondaryIndexList(input.GlobalSecondaryIndexOverride, context)
        },
        ...input.LocalSecondaryIndexOverride != null && {
            LocalSecondaryIndexOverride: serializeAws_json1_0LocalSecondaryIndexList(input.LocalSecondaryIndexOverride, context)
        },
        ...input.ProvisionedThroughputOverride != null && {
            ProvisionedThroughputOverride: serializeAws_json1_0ProvisionedThroughput(input.ProvisionedThroughputOverride, context)
        },
        ...input.SSESpecificationOverride != null && {
            SSESpecificationOverride: serializeAws_json1_0SSESpecification(input.SSESpecificationOverride, context)
        },
        ...input.TargetTableName != null && {
            TargetTableName: input.TargetTableName
        }
    };
};
const serializeAws_json1_0RestoreTableToPointInTimeInput = (input, context)=>{
    return {
        ...input.BillingModeOverride != null && {
            BillingModeOverride: input.BillingModeOverride
        },
        ...input.GlobalSecondaryIndexOverride != null && {
            GlobalSecondaryIndexOverride: serializeAws_json1_0GlobalSecondaryIndexList(input.GlobalSecondaryIndexOverride, context)
        },
        ...input.LocalSecondaryIndexOverride != null && {
            LocalSecondaryIndexOverride: serializeAws_json1_0LocalSecondaryIndexList(input.LocalSecondaryIndexOverride, context)
        },
        ...input.ProvisionedThroughputOverride != null && {
            ProvisionedThroughputOverride: serializeAws_json1_0ProvisionedThroughput(input.ProvisionedThroughputOverride, context)
        },
        ...input.RestoreDateTime != null && {
            RestoreDateTime: Math.round(input.RestoreDateTime.getTime() / 1000)
        },
        ...input.SSESpecificationOverride != null && {
            SSESpecificationOverride: serializeAws_json1_0SSESpecification(input.SSESpecificationOverride, context)
        },
        ...input.SourceTableArn != null && {
            SourceTableArn: input.SourceTableArn
        },
        ...input.SourceTableName != null && {
            SourceTableName: input.SourceTableName
        },
        ...input.TargetTableName != null && {
            TargetTableName: input.TargetTableName
        },
        ...input.UseLatestRestorableTime != null && {
            UseLatestRestorableTime: input.UseLatestRestorableTime
        }
    };
};
const serializeAws_json1_0S3BucketSource = (input, context)=>{
    return {
        ...input.S3Bucket != null && {
            S3Bucket: input.S3Bucket
        },
        ...input.S3BucketOwner != null && {
            S3BucketOwner: input.S3BucketOwner
        },
        ...input.S3KeyPrefix != null && {
            S3KeyPrefix: input.S3KeyPrefix
        }
    };
};
const serializeAws_json1_0ScanInput = (input, context)=>{
    return {
        ...input.AttributesToGet != null && {
            AttributesToGet: serializeAws_json1_0AttributeNameList(input.AttributesToGet, context)
        },
        ...input.ConditionalOperator != null && {
            ConditionalOperator: input.ConditionalOperator
        },
        ...input.ConsistentRead != null && {
            ConsistentRead: input.ConsistentRead
        },
        ...input.ExclusiveStartKey != null && {
            ExclusiveStartKey: serializeAws_json1_0Key(input.ExclusiveStartKey, context)
        },
        ...input.ExpressionAttributeNames != null && {
            ExpressionAttributeNames: serializeAws_json1_0ExpressionAttributeNameMap(input.ExpressionAttributeNames, context)
        },
        ...input.ExpressionAttributeValues != null && {
            ExpressionAttributeValues: serializeAws_json1_0ExpressionAttributeValueMap(input.ExpressionAttributeValues, context)
        },
        ...input.FilterExpression != null && {
            FilterExpression: input.FilterExpression
        },
        ...input.IndexName != null && {
            IndexName: input.IndexName
        },
        ...input.Limit != null && {
            Limit: input.Limit
        },
        ...input.ProjectionExpression != null && {
            ProjectionExpression: input.ProjectionExpression
        },
        ...input.ReturnConsumedCapacity != null && {
            ReturnConsumedCapacity: input.ReturnConsumedCapacity
        },
        ...input.ScanFilter != null && {
            ScanFilter: serializeAws_json1_0FilterConditionMap(input.ScanFilter, context)
        },
        ...input.Segment != null && {
            Segment: input.Segment
        },
        ...input.Select != null && {
            Select: input.Select
        },
        ...input.TableName != null && {
            TableName: input.TableName
        },
        ...input.TotalSegments != null && {
            TotalSegments: input.TotalSegments
        }
    };
};
const serializeAws_json1_0SSESpecification = (input, context)=>{
    return {
        ...input.Enabled != null && {
            Enabled: input.Enabled
        },
        ...input.KMSMasterKeyId != null && {
            KMSMasterKeyId: input.KMSMasterKeyId
        },
        ...input.SSEType != null && {
            SSEType: input.SSEType
        }
    };
};
const serializeAws_json1_0StreamSpecification = (input, context)=>{
    return {
        ...input.StreamEnabled != null && {
            StreamEnabled: input.StreamEnabled
        },
        ...input.StreamViewType != null && {
            StreamViewType: input.StreamViewType
        }
    };
};
const serializeAws_json1_0StringSetAttributeValue = (input, context)=>{
    return input.filter((e)=>e != null).map((entry)=>{
        return entry;
    });
};
const serializeAws_json1_0TableCreationParameters = (input, context)=>{
    return {
        ...input.AttributeDefinitions != null && {
            AttributeDefinitions: serializeAws_json1_0AttributeDefinitions(input.AttributeDefinitions, context)
        },
        ...input.BillingMode != null && {
            BillingMode: input.BillingMode
        },
        ...input.GlobalSecondaryIndexes != null && {
            GlobalSecondaryIndexes: serializeAws_json1_0GlobalSecondaryIndexList(input.GlobalSecondaryIndexes, context)
        },
        ...input.KeySchema != null && {
            KeySchema: serializeAws_json1_0KeySchema(input.KeySchema, context)
        },
        ...input.ProvisionedThroughput != null && {
            ProvisionedThroughput: serializeAws_json1_0ProvisionedThroughput(input.ProvisionedThroughput, context)
        },
        ...input.SSESpecification != null && {
            SSESpecification: serializeAws_json1_0SSESpecification(input.SSESpecification, context)
        },
        ...input.TableName != null && {
            TableName: input.TableName
        }
    };
};
const serializeAws_json1_0Tag = (input, context)=>{
    return {
        ...input.Key != null && {
            Key: input.Key
        },
        ...input.Value != null && {
            Value: input.Value
        }
    };
};
const serializeAws_json1_0TagKeyList = (input, context)=>{
    return input.filter((e)=>e != null).map((entry)=>{
        return entry;
    });
};
const serializeAws_json1_0TagList = (input, context)=>{
    return input.filter((e)=>e != null).map((entry)=>{
        return serializeAws_json1_0Tag(entry, context);
    });
};
const serializeAws_json1_0TagResourceInput = (input, context)=>{
    return {
        ...input.ResourceArn != null && {
            ResourceArn: input.ResourceArn
        },
        ...input.Tags != null && {
            Tags: serializeAws_json1_0TagList(input.Tags, context)
        }
    };
};
const serializeAws_json1_0TimeToLiveSpecification = (input, context)=>{
    return {
        ...input.AttributeName != null && {
            AttributeName: input.AttributeName
        },
        ...input.Enabled != null && {
            Enabled: input.Enabled
        }
    };
};
const serializeAws_json1_0TransactGetItem = (input, context)=>{
    return {
        ...input.Get != null && {
            Get: serializeAws_json1_0Get(input.Get, context)
        }
    };
};
const serializeAws_json1_0TransactGetItemList = (input, context)=>{
    return input.filter((e)=>e != null).map((entry)=>{
        return serializeAws_json1_0TransactGetItem(entry, context);
    });
};
const serializeAws_json1_0TransactGetItemsInput = (input, context)=>{
    return {
        ...input.ReturnConsumedCapacity != null && {
            ReturnConsumedCapacity: input.ReturnConsumedCapacity
        },
        ...input.TransactItems != null && {
            TransactItems: serializeAws_json1_0TransactGetItemList(input.TransactItems, context)
        }
    };
};
const serializeAws_json1_0TransactWriteItem = (input, context)=>{
    return {
        ...input.ConditionCheck != null && {
            ConditionCheck: serializeAws_json1_0ConditionCheck(input.ConditionCheck, context)
        },
        ...input.Delete != null && {
            Delete: serializeAws_json1_0Delete(input.Delete, context)
        },
        ...input.Put != null && {
            Put: serializeAws_json1_0Put(input.Put, context)
        },
        ...input.Update != null && {
            Update: serializeAws_json1_0Update(input.Update, context)
        }
    };
};
const serializeAws_json1_0TransactWriteItemList = (input, context)=>{
    return input.filter((e)=>e != null).map((entry)=>{
        return serializeAws_json1_0TransactWriteItem(entry, context);
    });
};
const serializeAws_json1_0TransactWriteItemsInput = (input, context)=>{
    return {
        ClientRequestToken: input.ClientRequestToken ?? (0, _uuid.v4)(),
        ...input.ReturnConsumedCapacity != null && {
            ReturnConsumedCapacity: input.ReturnConsumedCapacity
        },
        ...input.ReturnItemCollectionMetrics != null && {
            ReturnItemCollectionMetrics: input.ReturnItemCollectionMetrics
        },
        ...input.TransactItems != null && {
            TransactItems: serializeAws_json1_0TransactWriteItemList(input.TransactItems, context)
        }
    };
};
const serializeAws_json1_0UntagResourceInput = (input, context)=>{
    return {
        ...input.ResourceArn != null && {
            ResourceArn: input.ResourceArn
        },
        ...input.TagKeys != null && {
            TagKeys: serializeAws_json1_0TagKeyList(input.TagKeys, context)
        }
    };
};
const serializeAws_json1_0Update = (input, context)=>{
    return {
        ...input.ConditionExpression != null && {
            ConditionExpression: input.ConditionExpression
        },
        ...input.ExpressionAttributeNames != null && {
            ExpressionAttributeNames: serializeAws_json1_0ExpressionAttributeNameMap(input.ExpressionAttributeNames, context)
        },
        ...input.ExpressionAttributeValues != null && {
            ExpressionAttributeValues: serializeAws_json1_0ExpressionAttributeValueMap(input.ExpressionAttributeValues, context)
        },
        ...input.Key != null && {
            Key: serializeAws_json1_0Key(input.Key, context)
        },
        ...input.ReturnValuesOnConditionCheckFailure != null && {
            ReturnValuesOnConditionCheckFailure: input.ReturnValuesOnConditionCheckFailure
        },
        ...input.TableName != null && {
            TableName: input.TableName
        },
        ...input.UpdateExpression != null && {
            UpdateExpression: input.UpdateExpression
        }
    };
};
const serializeAws_json1_0UpdateContinuousBackupsInput = (input, context)=>{
    return {
        ...input.PointInTimeRecoverySpecification != null && {
            PointInTimeRecoverySpecification: serializeAws_json1_0PointInTimeRecoverySpecification(input.PointInTimeRecoverySpecification, context)
        },
        ...input.TableName != null && {
            TableName: input.TableName
        }
    };
};
const serializeAws_json1_0UpdateContributorInsightsInput = (input, context)=>{
    return {
        ...input.ContributorInsightsAction != null && {
            ContributorInsightsAction: input.ContributorInsightsAction
        },
        ...input.IndexName != null && {
            IndexName: input.IndexName
        },
        ...input.TableName != null && {
            TableName: input.TableName
        }
    };
};
const serializeAws_json1_0UpdateGlobalSecondaryIndexAction = (input, context)=>{
    return {
        ...input.IndexName != null && {
            IndexName: input.IndexName
        },
        ...input.ProvisionedThroughput != null && {
            ProvisionedThroughput: serializeAws_json1_0ProvisionedThroughput(input.ProvisionedThroughput, context)
        }
    };
};
const serializeAws_json1_0UpdateGlobalTableInput = (input, context)=>{
    return {
        ...input.GlobalTableName != null && {
            GlobalTableName: input.GlobalTableName
        },
        ...input.ReplicaUpdates != null && {
            ReplicaUpdates: serializeAws_json1_0ReplicaUpdateList(input.ReplicaUpdates, context)
        }
    };
};
const serializeAws_json1_0UpdateGlobalTableSettingsInput = (input, context)=>{
    return {
        ...input.GlobalTableBillingMode != null && {
            GlobalTableBillingMode: input.GlobalTableBillingMode
        },
        ...input.GlobalTableGlobalSecondaryIndexSettingsUpdate != null && {
            GlobalTableGlobalSecondaryIndexSettingsUpdate: serializeAws_json1_0GlobalTableGlobalSecondaryIndexSettingsUpdateList(input.GlobalTableGlobalSecondaryIndexSettingsUpdate, context)
        },
        ...input.GlobalTableName != null && {
            GlobalTableName: input.GlobalTableName
        },
        ...input.GlobalTableProvisionedWriteCapacityAutoScalingSettingsUpdate != null && {
            GlobalTableProvisionedWriteCapacityAutoScalingSettingsUpdate: serializeAws_json1_0AutoScalingSettingsUpdate(input.GlobalTableProvisionedWriteCapacityAutoScalingSettingsUpdate, context)
        },
        ...input.GlobalTableProvisionedWriteCapacityUnits != null && {
            GlobalTableProvisionedWriteCapacityUnits: input.GlobalTableProvisionedWriteCapacityUnits
        },
        ...input.ReplicaSettingsUpdate != null && {
            ReplicaSettingsUpdate: serializeAws_json1_0ReplicaSettingsUpdateList(input.ReplicaSettingsUpdate, context)
        }
    };
};
const serializeAws_json1_0UpdateItemInput = (input, context)=>{
    return {
        ...input.AttributeUpdates != null && {
            AttributeUpdates: serializeAws_json1_0AttributeUpdates(input.AttributeUpdates, context)
        },
        ...input.ConditionExpression != null && {
            ConditionExpression: input.ConditionExpression
        },
        ...input.ConditionalOperator != null && {
            ConditionalOperator: input.ConditionalOperator
        },
        ...input.Expected != null && {
            Expected: serializeAws_json1_0ExpectedAttributeMap(input.Expected, context)
        },
        ...input.ExpressionAttributeNames != null && {
            ExpressionAttributeNames: serializeAws_json1_0ExpressionAttributeNameMap(input.ExpressionAttributeNames, context)
        },
        ...input.ExpressionAttributeValues != null && {
            ExpressionAttributeValues: serializeAws_json1_0ExpressionAttributeValueMap(input.ExpressionAttributeValues, context)
        },
        ...input.Key != null && {
            Key: serializeAws_json1_0Key(input.Key, context)
        },
        ...input.ReturnConsumedCapacity != null && {
            ReturnConsumedCapacity: input.ReturnConsumedCapacity
        },
        ...input.ReturnItemCollectionMetrics != null && {
            ReturnItemCollectionMetrics: input.ReturnItemCollectionMetrics
        },
        ...input.ReturnValues != null && {
            ReturnValues: input.ReturnValues
        },
        ...input.TableName != null && {
            TableName: input.TableName
        },
        ...input.UpdateExpression != null && {
            UpdateExpression: input.UpdateExpression
        }
    };
};
const serializeAws_json1_0UpdateReplicationGroupMemberAction = (input, context)=>{
    return {
        ...input.GlobalSecondaryIndexes != null && {
            GlobalSecondaryIndexes: serializeAws_json1_0ReplicaGlobalSecondaryIndexList(input.GlobalSecondaryIndexes, context)
        },
        ...input.KMSMasterKeyId != null && {
            KMSMasterKeyId: input.KMSMasterKeyId
        },
        ...input.ProvisionedThroughputOverride != null && {
            ProvisionedThroughputOverride: serializeAws_json1_0ProvisionedThroughputOverride(input.ProvisionedThroughputOverride, context)
        },
        ...input.RegionName != null && {
            RegionName: input.RegionName
        },
        ...input.TableClassOverride != null && {
            TableClassOverride: input.TableClassOverride
        }
    };
};
const serializeAws_json1_0UpdateTableInput = (input, context)=>{
    return {
        ...input.AttributeDefinitions != null && {
            AttributeDefinitions: serializeAws_json1_0AttributeDefinitions(input.AttributeDefinitions, context)
        },
        ...input.BillingMode != null && {
            BillingMode: input.BillingMode
        },
        ...input.GlobalSecondaryIndexUpdates != null && {
            GlobalSecondaryIndexUpdates: serializeAws_json1_0GlobalSecondaryIndexUpdateList(input.GlobalSecondaryIndexUpdates, context)
        },
        ...input.ProvisionedThroughput != null && {
            ProvisionedThroughput: serializeAws_json1_0ProvisionedThroughput(input.ProvisionedThroughput, context)
        },
        ...input.ReplicaUpdates != null && {
            ReplicaUpdates: serializeAws_json1_0ReplicationGroupUpdateList(input.ReplicaUpdates, context)
        },
        ...input.SSESpecification != null && {
            SSESpecification: serializeAws_json1_0SSESpecification(input.SSESpecification, context)
        },
        ...input.StreamSpecification != null && {
            StreamSpecification: serializeAws_json1_0StreamSpecification(input.StreamSpecification, context)
        },
        ...input.TableClass != null && {
            TableClass: input.TableClass
        },
        ...input.TableName != null && {
            TableName: input.TableName
        }
    };
};
const serializeAws_json1_0UpdateTableReplicaAutoScalingInput = (input, context)=>{
    return {
        ...input.GlobalSecondaryIndexUpdates != null && {
            GlobalSecondaryIndexUpdates: serializeAws_json1_0GlobalSecondaryIndexAutoScalingUpdateList(input.GlobalSecondaryIndexUpdates, context)
        },
        ...input.ProvisionedWriteCapacityAutoScalingUpdate != null && {
            ProvisionedWriteCapacityAutoScalingUpdate: serializeAws_json1_0AutoScalingSettingsUpdate(input.ProvisionedWriteCapacityAutoScalingUpdate, context)
        },
        ...input.ReplicaUpdates != null && {
            ReplicaUpdates: serializeAws_json1_0ReplicaAutoScalingUpdateList(input.ReplicaUpdates, context)
        },
        ...input.TableName != null && {
            TableName: input.TableName
        }
    };
};
const serializeAws_json1_0UpdateTimeToLiveInput = (input, context)=>{
    return {
        ...input.TableName != null && {
            TableName: input.TableName
        },
        ...input.TimeToLiveSpecification != null && {
            TimeToLiveSpecification: serializeAws_json1_0TimeToLiveSpecification(input.TimeToLiveSpecification, context)
        }
    };
};
const serializeAws_json1_0WriteRequest = (input, context)=>{
    return {
        ...input.DeleteRequest != null && {
            DeleteRequest: serializeAws_json1_0DeleteRequest(input.DeleteRequest, context)
        },
        ...input.PutRequest != null && {
            PutRequest: serializeAws_json1_0PutRequest(input.PutRequest, context)
        }
    };
};
const serializeAws_json1_0WriteRequests = (input, context)=>{
    return input.filter((e)=>e != null).map((entry)=>{
        return serializeAws_json1_0WriteRequest(entry, context);
    });
};
const deserializeAws_json1_0ArchivalSummary = (output, context)=>{
    return {
        ArchivalBackupArn: (0, _smithyClient.expectString)(output.ArchivalBackupArn),
        ArchivalDateTime: output.ArchivalDateTime != null ? (0, _smithyClient.expectNonNull)((0, _smithyClient.parseEpochTimestamp)((0, _smithyClient.expectNumber)(output.ArchivalDateTime))) : undefined,
        ArchivalReason: (0, _smithyClient.expectString)(output.ArchivalReason)
    };
};
const deserializeAws_json1_0AttributeDefinition = (output, context)=>{
    return {
        AttributeName: (0, _smithyClient.expectString)(output.AttributeName),
        AttributeType: (0, _smithyClient.expectString)(output.AttributeType)
    };
};
const deserializeAws_json1_0AttributeDefinitions = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        if (entry === null) return null;
        return deserializeAws_json1_0AttributeDefinition(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_0AttributeMap = (output, context)=>{
    return Object.entries(output).reduce((acc, [key, value])=>{
        if (value === null) return acc;
        return {
            ...acc,
            [key]: deserializeAws_json1_0AttributeValue((0, _smithyClient.expectUnion)(value), context)
        };
    }, {});
};
const deserializeAws_json1_0AttributeNameList = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        if (entry === null) return null;
        return (0, _smithyClient.expectString)(entry);
    });
    return retVal;
};
const deserializeAws_json1_0AttributeValue = (output, context)=>{
    if (output.B != null) return {
        B: context.base64Decoder(output.B)
    };
    if ((0, _smithyClient.expectBoolean)(output.BOOL) !== undefined) return {
        BOOL: (0, _smithyClient.expectBoolean)(output.BOOL)
    };
    if (output.BS != null) return {
        BS: deserializeAws_json1_0BinarySetAttributeValue(output.BS, context)
    };
    if (output.L != null) return {
        L: deserializeAws_json1_0ListAttributeValue(output.L, context)
    };
    if (output.M != null) return {
        M: deserializeAws_json1_0MapAttributeValue(output.M, context)
    };
    if ((0, _smithyClient.expectString)(output.N) !== undefined) return {
        N: (0, _smithyClient.expectString)(output.N)
    };
    if (output.NS != null) return {
        NS: deserializeAws_json1_0NumberSetAttributeValue(output.NS, context)
    };
    if ((0, _smithyClient.expectBoolean)(output.NULL) !== undefined) return {
        NULL: (0, _smithyClient.expectBoolean)(output.NULL)
    };
    if ((0, _smithyClient.expectString)(output.S) !== undefined) return {
        S: (0, _smithyClient.expectString)(output.S)
    };
    if (output.SS != null) return {
        SS: deserializeAws_json1_0StringSetAttributeValue(output.SS, context)
    };
    return {
        $unknown: Object.entries(output)[0]
    };
};
const deserializeAws_json1_0AutoScalingPolicyDescription = (output, context)=>{
    return {
        PolicyName: (0, _smithyClient.expectString)(output.PolicyName),
        TargetTrackingScalingPolicyConfiguration: output.TargetTrackingScalingPolicyConfiguration != null ? deserializeAws_json1_0AutoScalingTargetTrackingScalingPolicyConfigurationDescription(output.TargetTrackingScalingPolicyConfiguration, context) : undefined
    };
};
const deserializeAws_json1_0AutoScalingPolicyDescriptionList = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        if (entry === null) return null;
        return deserializeAws_json1_0AutoScalingPolicyDescription(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_0AutoScalingSettingsDescription = (output, context)=>{
    return {
        AutoScalingDisabled: (0, _smithyClient.expectBoolean)(output.AutoScalingDisabled),
        AutoScalingRoleArn: (0, _smithyClient.expectString)(output.AutoScalingRoleArn),
        MaximumUnits: (0, _smithyClient.expectLong)(output.MaximumUnits),
        MinimumUnits: (0, _smithyClient.expectLong)(output.MinimumUnits),
        ScalingPolicies: output.ScalingPolicies != null ? deserializeAws_json1_0AutoScalingPolicyDescriptionList(output.ScalingPolicies, context) : undefined
    };
};
const deserializeAws_json1_0AutoScalingTargetTrackingScalingPolicyConfigurationDescription = (output, context)=>{
    return {
        DisableScaleIn: (0, _smithyClient.expectBoolean)(output.DisableScaleIn),
        ScaleInCooldown: (0, _smithyClient.expectInt32)(output.ScaleInCooldown),
        ScaleOutCooldown: (0, _smithyClient.expectInt32)(output.ScaleOutCooldown),
        TargetValue: (0, _smithyClient.limitedParseDouble)(output.TargetValue)
    };
};
const deserializeAws_json1_0BackupDescription = (output, context)=>{
    return {
        BackupDetails: output.BackupDetails != null ? deserializeAws_json1_0BackupDetails(output.BackupDetails, context) : undefined,
        SourceTableDetails: output.SourceTableDetails != null ? deserializeAws_json1_0SourceTableDetails(output.SourceTableDetails, context) : undefined,
        SourceTableFeatureDetails: output.SourceTableFeatureDetails != null ? deserializeAws_json1_0SourceTableFeatureDetails(output.SourceTableFeatureDetails, context) : undefined
    };
};
const deserializeAws_json1_0BackupDetails = (output, context)=>{
    return {
        BackupArn: (0, _smithyClient.expectString)(output.BackupArn),
        BackupCreationDateTime: output.BackupCreationDateTime != null ? (0, _smithyClient.expectNonNull)((0, _smithyClient.parseEpochTimestamp)((0, _smithyClient.expectNumber)(output.BackupCreationDateTime))) : undefined,
        BackupExpiryDateTime: output.BackupExpiryDateTime != null ? (0, _smithyClient.expectNonNull)((0, _smithyClient.parseEpochTimestamp)((0, _smithyClient.expectNumber)(output.BackupExpiryDateTime))) : undefined,
        BackupName: (0, _smithyClient.expectString)(output.BackupName),
        BackupSizeBytes: (0, _smithyClient.expectLong)(output.BackupSizeBytes),
        BackupStatus: (0, _smithyClient.expectString)(output.BackupStatus),
        BackupType: (0, _smithyClient.expectString)(output.BackupType)
    };
};
const deserializeAws_json1_0BackupInUseException = (output, context)=>{
    return {
        message: (0, _smithyClient.expectString)(output.message)
    };
};
const deserializeAws_json1_0BackupNotFoundException = (output, context)=>{
    return {
        message: (0, _smithyClient.expectString)(output.message)
    };
};
const deserializeAws_json1_0BackupSummaries = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        if (entry === null) return null;
        return deserializeAws_json1_0BackupSummary(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_0BackupSummary = (output, context)=>{
    return {
        BackupArn: (0, _smithyClient.expectString)(output.BackupArn),
        BackupCreationDateTime: output.BackupCreationDateTime != null ? (0, _smithyClient.expectNonNull)((0, _smithyClient.parseEpochTimestamp)((0, _smithyClient.expectNumber)(output.BackupCreationDateTime))) : undefined,
        BackupExpiryDateTime: output.BackupExpiryDateTime != null ? (0, _smithyClient.expectNonNull)((0, _smithyClient.parseEpochTimestamp)((0, _smithyClient.expectNumber)(output.BackupExpiryDateTime))) : undefined,
        BackupName: (0, _smithyClient.expectString)(output.BackupName),
        BackupSizeBytes: (0, _smithyClient.expectLong)(output.BackupSizeBytes),
        BackupStatus: (0, _smithyClient.expectString)(output.BackupStatus),
        BackupType: (0, _smithyClient.expectString)(output.BackupType),
        TableArn: (0, _smithyClient.expectString)(output.TableArn),
        TableId: (0, _smithyClient.expectString)(output.TableId),
        TableName: (0, _smithyClient.expectString)(output.TableName)
    };
};
const deserializeAws_json1_0BatchExecuteStatementOutput = (output, context)=>{
    return {
        ConsumedCapacity: output.ConsumedCapacity != null ? deserializeAws_json1_0ConsumedCapacityMultiple(output.ConsumedCapacity, context) : undefined,
        Responses: output.Responses != null ? deserializeAws_json1_0PartiQLBatchResponse(output.Responses, context) : undefined
    };
};
const deserializeAws_json1_0BatchGetItemOutput = (output, context)=>{
    return {
        ConsumedCapacity: output.ConsumedCapacity != null ? deserializeAws_json1_0ConsumedCapacityMultiple(output.ConsumedCapacity, context) : undefined,
        Responses: output.Responses != null ? deserializeAws_json1_0BatchGetResponseMap(output.Responses, context) : undefined,
        UnprocessedKeys: output.UnprocessedKeys != null ? deserializeAws_json1_0BatchGetRequestMap(output.UnprocessedKeys, context) : undefined
    };
};
const deserializeAws_json1_0BatchGetRequestMap = (output, context)=>{
    return Object.entries(output).reduce((acc, [key, value])=>{
        if (value === null) return acc;
        return {
            ...acc,
            [key]: deserializeAws_json1_0KeysAndAttributes(value, context)
        };
    }, {});
};
const deserializeAws_json1_0BatchGetResponseMap = (output, context)=>{
    return Object.entries(output).reduce((acc, [key, value])=>{
        if (value === null) return acc;
        return {
            ...acc,
            [key]: deserializeAws_json1_0ItemList(value, context)
        };
    }, {});
};
const deserializeAws_json1_0BatchStatementError = (output, context)=>{
    return {
        Code: (0, _smithyClient.expectString)(output.Code),
        Message: (0, _smithyClient.expectString)(output.Message)
    };
};
const deserializeAws_json1_0BatchStatementResponse = (output, context)=>{
    return {
        Error: output.Error != null ? deserializeAws_json1_0BatchStatementError(output.Error, context) : undefined,
        Item: output.Item != null ? deserializeAws_json1_0AttributeMap(output.Item, context) : undefined,
        TableName: (0, _smithyClient.expectString)(output.TableName)
    };
};
const deserializeAws_json1_0BatchWriteItemOutput = (output, context)=>{
    return {
        ConsumedCapacity: output.ConsumedCapacity != null ? deserializeAws_json1_0ConsumedCapacityMultiple(output.ConsumedCapacity, context) : undefined,
        ItemCollectionMetrics: output.ItemCollectionMetrics != null ? deserializeAws_json1_0ItemCollectionMetricsPerTable(output.ItemCollectionMetrics, context) : undefined,
        UnprocessedItems: output.UnprocessedItems != null ? deserializeAws_json1_0BatchWriteItemRequestMap(output.UnprocessedItems, context) : undefined
    };
};
const deserializeAws_json1_0BatchWriteItemRequestMap = (output, context)=>{
    return Object.entries(output).reduce((acc, [key, value])=>{
        if (value === null) return acc;
        return {
            ...acc,
            [key]: deserializeAws_json1_0WriteRequests(value, context)
        };
    }, {});
};
const deserializeAws_json1_0BillingModeSummary = (output, context)=>{
    return {
        BillingMode: (0, _smithyClient.expectString)(output.BillingMode),
        LastUpdateToPayPerRequestDateTime: output.LastUpdateToPayPerRequestDateTime != null ? (0, _smithyClient.expectNonNull)((0, _smithyClient.parseEpochTimestamp)((0, _smithyClient.expectNumber)(output.LastUpdateToPayPerRequestDateTime))) : undefined
    };
};
const deserializeAws_json1_0BinarySetAttributeValue = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        if (entry === null) return null;
        return context.base64Decoder(entry);
    });
    return retVal;
};
const deserializeAws_json1_0CancellationReason = (output, context)=>{
    return {
        Code: (0, _smithyClient.expectString)(output.Code),
        Item: output.Item != null ? deserializeAws_json1_0AttributeMap(output.Item, context) : undefined,
        Message: (0, _smithyClient.expectString)(output.Message)
    };
};
const deserializeAws_json1_0CancellationReasonList = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        if (entry === null) return null;
        return deserializeAws_json1_0CancellationReason(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_0Capacity = (output, context)=>{
    return {
        CapacityUnits: (0, _smithyClient.limitedParseDouble)(output.CapacityUnits),
        ReadCapacityUnits: (0, _smithyClient.limitedParseDouble)(output.ReadCapacityUnits),
        WriteCapacityUnits: (0, _smithyClient.limitedParseDouble)(output.WriteCapacityUnits)
    };
};
const deserializeAws_json1_0ConditionalCheckFailedException = (output, context)=>{
    return {
        message: (0, _smithyClient.expectString)(output.message)
    };
};
const deserializeAws_json1_0ConsumedCapacity = (output, context)=>{
    return {
        CapacityUnits: (0, _smithyClient.limitedParseDouble)(output.CapacityUnits),
        GlobalSecondaryIndexes: output.GlobalSecondaryIndexes != null ? deserializeAws_json1_0SecondaryIndexesCapacityMap(output.GlobalSecondaryIndexes, context) : undefined,
        LocalSecondaryIndexes: output.LocalSecondaryIndexes != null ? deserializeAws_json1_0SecondaryIndexesCapacityMap(output.LocalSecondaryIndexes, context) : undefined,
        ReadCapacityUnits: (0, _smithyClient.limitedParseDouble)(output.ReadCapacityUnits),
        Table: output.Table != null ? deserializeAws_json1_0Capacity(output.Table, context) : undefined,
        TableName: (0, _smithyClient.expectString)(output.TableName),
        WriteCapacityUnits: (0, _smithyClient.limitedParseDouble)(output.WriteCapacityUnits)
    };
};
const deserializeAws_json1_0ConsumedCapacityMultiple = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        if (entry === null) return null;
        return deserializeAws_json1_0ConsumedCapacity(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_0ContinuousBackupsDescription = (output, context)=>{
    return {
        ContinuousBackupsStatus: (0, _smithyClient.expectString)(output.ContinuousBackupsStatus),
        PointInTimeRecoveryDescription: output.PointInTimeRecoveryDescription != null ? deserializeAws_json1_0PointInTimeRecoveryDescription(output.PointInTimeRecoveryDescription, context) : undefined
    };
};
const deserializeAws_json1_0ContinuousBackupsUnavailableException = (output, context)=>{
    return {
        message: (0, _smithyClient.expectString)(output.message)
    };
};
const deserializeAws_json1_0ContributorInsightsRuleList = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        if (entry === null) return null;
        return (0, _smithyClient.expectString)(entry);
    });
    return retVal;
};
const deserializeAws_json1_0ContributorInsightsSummaries = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        if (entry === null) return null;
        return deserializeAws_json1_0ContributorInsightsSummary(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_0ContributorInsightsSummary = (output, context)=>{
    return {
        ContributorInsightsStatus: (0, _smithyClient.expectString)(output.ContributorInsightsStatus),
        IndexName: (0, _smithyClient.expectString)(output.IndexName),
        TableName: (0, _smithyClient.expectString)(output.TableName)
    };
};
const deserializeAws_json1_0CreateBackupOutput = (output, context)=>{
    return {
        BackupDetails: output.BackupDetails != null ? deserializeAws_json1_0BackupDetails(output.BackupDetails, context) : undefined
    };
};
const deserializeAws_json1_0CreateGlobalTableOutput = (output, context)=>{
    return {
        GlobalTableDescription: output.GlobalTableDescription != null ? deserializeAws_json1_0GlobalTableDescription(output.GlobalTableDescription, context) : undefined
    };
};
const deserializeAws_json1_0CreateTableOutput = (output, context)=>{
    return {
        TableDescription: output.TableDescription != null ? deserializeAws_json1_0TableDescription(output.TableDescription, context) : undefined
    };
};
const deserializeAws_json1_0CsvHeaderList = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        if (entry === null) return null;
        return (0, _smithyClient.expectString)(entry);
    });
    return retVal;
};
const deserializeAws_json1_0CsvOptions = (output, context)=>{
    return {
        Delimiter: (0, _smithyClient.expectString)(output.Delimiter),
        HeaderList: output.HeaderList != null ? deserializeAws_json1_0CsvHeaderList(output.HeaderList, context) : undefined
    };
};
const deserializeAws_json1_0DeleteBackupOutput = (output, context)=>{
    return {
        BackupDescription: output.BackupDescription != null ? deserializeAws_json1_0BackupDescription(output.BackupDescription, context) : undefined
    };
};
const deserializeAws_json1_0DeleteItemOutput = (output, context)=>{
    return {
        Attributes: output.Attributes != null ? deserializeAws_json1_0AttributeMap(output.Attributes, context) : undefined,
        ConsumedCapacity: output.ConsumedCapacity != null ? deserializeAws_json1_0ConsumedCapacity(output.ConsumedCapacity, context) : undefined,
        ItemCollectionMetrics: output.ItemCollectionMetrics != null ? deserializeAws_json1_0ItemCollectionMetrics(output.ItemCollectionMetrics, context) : undefined
    };
};
const deserializeAws_json1_0DeleteRequest = (output, context)=>{
    return {
        Key: output.Key != null ? deserializeAws_json1_0Key(output.Key, context) : undefined
    };
};
const deserializeAws_json1_0DeleteTableOutput = (output, context)=>{
    return {
        TableDescription: output.TableDescription != null ? deserializeAws_json1_0TableDescription(output.TableDescription, context) : undefined
    };
};
const deserializeAws_json1_0DescribeBackupOutput = (output, context)=>{
    return {
        BackupDescription: output.BackupDescription != null ? deserializeAws_json1_0BackupDescription(output.BackupDescription, context) : undefined
    };
};
const deserializeAws_json1_0DescribeContinuousBackupsOutput = (output, context)=>{
    return {
        ContinuousBackupsDescription: output.ContinuousBackupsDescription != null ? deserializeAws_json1_0ContinuousBackupsDescription(output.ContinuousBackupsDescription, context) : undefined
    };
};
const deserializeAws_json1_0DescribeContributorInsightsOutput = (output, context)=>{
    return {
        ContributorInsightsRuleList: output.ContributorInsightsRuleList != null ? deserializeAws_json1_0ContributorInsightsRuleList(output.ContributorInsightsRuleList, context) : undefined,
        ContributorInsightsStatus: (0, _smithyClient.expectString)(output.ContributorInsightsStatus),
        FailureException: output.FailureException != null ? deserializeAws_json1_0FailureException(output.FailureException, context) : undefined,
        IndexName: (0, _smithyClient.expectString)(output.IndexName),
        LastUpdateDateTime: output.LastUpdateDateTime != null ? (0, _smithyClient.expectNonNull)((0, _smithyClient.parseEpochTimestamp)((0, _smithyClient.expectNumber)(output.LastUpdateDateTime))) : undefined,
        TableName: (0, _smithyClient.expectString)(output.TableName)
    };
};
const deserializeAws_json1_0DescribeEndpointsResponse = (output, context)=>{
    return {
        Endpoints: output.Endpoints != null ? deserializeAws_json1_0Endpoints(output.Endpoints, context) : undefined
    };
};
const deserializeAws_json1_0DescribeExportOutput = (output, context)=>{
    return {
        ExportDescription: output.ExportDescription != null ? deserializeAws_json1_0ExportDescription(output.ExportDescription, context) : undefined
    };
};
const deserializeAws_json1_0DescribeGlobalTableOutput = (output, context)=>{
    return {
        GlobalTableDescription: output.GlobalTableDescription != null ? deserializeAws_json1_0GlobalTableDescription(output.GlobalTableDescription, context) : undefined
    };
};
const deserializeAws_json1_0DescribeGlobalTableSettingsOutput = (output, context)=>{
    return {
        GlobalTableName: (0, _smithyClient.expectString)(output.GlobalTableName),
        ReplicaSettings: output.ReplicaSettings != null ? deserializeAws_json1_0ReplicaSettingsDescriptionList(output.ReplicaSettings, context) : undefined
    };
};
const deserializeAws_json1_0DescribeImportOutput = (output, context)=>{
    return {
        ImportTableDescription: output.ImportTableDescription != null ? deserializeAws_json1_0ImportTableDescription(output.ImportTableDescription, context) : undefined
    };
};
const deserializeAws_json1_0DescribeKinesisStreamingDestinationOutput = (output, context)=>{
    return {
        KinesisDataStreamDestinations: output.KinesisDataStreamDestinations != null ? deserializeAws_json1_0KinesisDataStreamDestinations(output.KinesisDataStreamDestinations, context) : undefined,
        TableName: (0, _smithyClient.expectString)(output.TableName)
    };
};
const deserializeAws_json1_0DescribeLimitsOutput = (output, context)=>{
    return {
        AccountMaxReadCapacityUnits: (0, _smithyClient.expectLong)(output.AccountMaxReadCapacityUnits),
        AccountMaxWriteCapacityUnits: (0, _smithyClient.expectLong)(output.AccountMaxWriteCapacityUnits),
        TableMaxReadCapacityUnits: (0, _smithyClient.expectLong)(output.TableMaxReadCapacityUnits),
        TableMaxWriteCapacityUnits: (0, _smithyClient.expectLong)(output.TableMaxWriteCapacityUnits)
    };
};
const deserializeAws_json1_0DescribeTableOutput = (output, context)=>{
    return {
        Table: output.Table != null ? deserializeAws_json1_0TableDescription(output.Table, context) : undefined
    };
};
const deserializeAws_json1_0DescribeTableReplicaAutoScalingOutput = (output, context)=>{
    return {
        TableAutoScalingDescription: output.TableAutoScalingDescription != null ? deserializeAws_json1_0TableAutoScalingDescription(output.TableAutoScalingDescription, context) : undefined
    };
};
const deserializeAws_json1_0DescribeTimeToLiveOutput = (output, context)=>{
    return {
        TimeToLiveDescription: output.TimeToLiveDescription != null ? deserializeAws_json1_0TimeToLiveDescription(output.TimeToLiveDescription, context) : undefined
    };
};
const deserializeAws_json1_0DuplicateItemException = (output, context)=>{
    return {
        message: (0, _smithyClient.expectString)(output.message)
    };
};
const deserializeAws_json1_0Endpoint = (output, context)=>{
    return {
        Address: (0, _smithyClient.expectString)(output.Address),
        CachePeriodInMinutes: (0, _smithyClient.expectLong)(output.CachePeriodInMinutes)
    };
};
const deserializeAws_json1_0Endpoints = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        if (entry === null) return null;
        return deserializeAws_json1_0Endpoint(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_0ExecuteStatementOutput = (output, context)=>{
    return {
        ConsumedCapacity: output.ConsumedCapacity != null ? deserializeAws_json1_0ConsumedCapacity(output.ConsumedCapacity, context) : undefined,
        Items: output.Items != null ? deserializeAws_json1_0ItemList(output.Items, context) : undefined,
        LastEvaluatedKey: output.LastEvaluatedKey != null ? deserializeAws_json1_0Key(output.LastEvaluatedKey, context) : undefined,
        NextToken: (0, _smithyClient.expectString)(output.NextToken)
    };
};
const deserializeAws_json1_0ExecuteTransactionOutput = (output, context)=>{
    return {
        ConsumedCapacity: output.ConsumedCapacity != null ? deserializeAws_json1_0ConsumedCapacityMultiple(output.ConsumedCapacity, context) : undefined,
        Responses: output.Responses != null ? deserializeAws_json1_0ItemResponseList(output.Responses, context) : undefined
    };
};
const deserializeAws_json1_0ExportConflictException = (output, context)=>{
    return {
        message: (0, _smithyClient.expectString)(output.message)
    };
};
const deserializeAws_json1_0ExportDescription = (output, context)=>{
    return {
        BilledSizeBytes: (0, _smithyClient.expectLong)(output.BilledSizeBytes),
        ClientToken: (0, _smithyClient.expectString)(output.ClientToken),
        EndTime: output.EndTime != null ? (0, _smithyClient.expectNonNull)((0, _smithyClient.parseEpochTimestamp)((0, _smithyClient.expectNumber)(output.EndTime))) : undefined,
        ExportArn: (0, _smithyClient.expectString)(output.ExportArn),
        ExportFormat: (0, _smithyClient.expectString)(output.ExportFormat),
        ExportManifest: (0, _smithyClient.expectString)(output.ExportManifest),
        ExportStatus: (0, _smithyClient.expectString)(output.ExportStatus),
        ExportTime: output.ExportTime != null ? (0, _smithyClient.expectNonNull)((0, _smithyClient.parseEpochTimestamp)((0, _smithyClient.expectNumber)(output.ExportTime))) : undefined,
        FailureCode: (0, _smithyClient.expectString)(output.FailureCode),
        FailureMessage: (0, _smithyClient.expectString)(output.FailureMessage),
        ItemCount: (0, _smithyClient.expectLong)(output.ItemCount),
        S3Bucket: (0, _smithyClient.expectString)(output.S3Bucket),
        S3BucketOwner: (0, _smithyClient.expectString)(output.S3BucketOwner),
        S3Prefix: (0, _smithyClient.expectString)(output.S3Prefix),
        S3SseAlgorithm: (0, _smithyClient.expectString)(output.S3SseAlgorithm),
        S3SseKmsKeyId: (0, _smithyClient.expectString)(output.S3SseKmsKeyId),
        StartTime: output.StartTime != null ? (0, _smithyClient.expectNonNull)((0, _smithyClient.parseEpochTimestamp)((0, _smithyClient.expectNumber)(output.StartTime))) : undefined,
        TableArn: (0, _smithyClient.expectString)(output.TableArn),
        TableId: (0, _smithyClient.expectString)(output.TableId)
    };
};
const deserializeAws_json1_0ExportNotFoundException = (output, context)=>{
    return {
        message: (0, _smithyClient.expectString)(output.message)
    };
};
const deserializeAws_json1_0ExportSummaries = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        if (entry === null) return null;
        return deserializeAws_json1_0ExportSummary(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_0ExportSummary = (output, context)=>{
    return {
        ExportArn: (0, _smithyClient.expectString)(output.ExportArn),
        ExportStatus: (0, _smithyClient.expectString)(output.ExportStatus)
    };
};
const deserializeAws_json1_0ExportTableToPointInTimeOutput = (output, context)=>{
    return {
        ExportDescription: output.ExportDescription != null ? deserializeAws_json1_0ExportDescription(output.ExportDescription, context) : undefined
    };
};
const deserializeAws_json1_0ExpressionAttributeNameMap = (output, context)=>{
    return Object.entries(output).reduce((acc, [key, value])=>{
        if (value === null) return acc;
        return {
            ...acc,
            [key]: (0, _smithyClient.expectString)(value)
        };
    }, {});
};
const deserializeAws_json1_0FailureException = (output, context)=>{
    return {
        ExceptionDescription: (0, _smithyClient.expectString)(output.ExceptionDescription),
        ExceptionName: (0, _smithyClient.expectString)(output.ExceptionName)
    };
};
const deserializeAws_json1_0GetItemOutput = (output, context)=>{
    return {
        ConsumedCapacity: output.ConsumedCapacity != null ? deserializeAws_json1_0ConsumedCapacity(output.ConsumedCapacity, context) : undefined,
        Item: output.Item != null ? deserializeAws_json1_0AttributeMap(output.Item, context) : undefined
    };
};
const deserializeAws_json1_0GlobalSecondaryIndex = (output, context)=>{
    return {
        IndexName: (0, _smithyClient.expectString)(output.IndexName),
        KeySchema: output.KeySchema != null ? deserializeAws_json1_0KeySchema(output.KeySchema, context) : undefined,
        Projection: output.Projection != null ? deserializeAws_json1_0Projection(output.Projection, context) : undefined,
        ProvisionedThroughput: output.ProvisionedThroughput != null ? deserializeAws_json1_0ProvisionedThroughput(output.ProvisionedThroughput, context) : undefined
    };
};
const deserializeAws_json1_0GlobalSecondaryIndexDescription = (output, context)=>{
    return {
        Backfilling: (0, _smithyClient.expectBoolean)(output.Backfilling),
        IndexArn: (0, _smithyClient.expectString)(output.IndexArn),
        IndexName: (0, _smithyClient.expectString)(output.IndexName),
        IndexSizeBytes: (0, _smithyClient.expectLong)(output.IndexSizeBytes),
        IndexStatus: (0, _smithyClient.expectString)(output.IndexStatus),
        ItemCount: (0, _smithyClient.expectLong)(output.ItemCount),
        KeySchema: output.KeySchema != null ? deserializeAws_json1_0KeySchema(output.KeySchema, context) : undefined,
        Projection: output.Projection != null ? deserializeAws_json1_0Projection(output.Projection, context) : undefined,
        ProvisionedThroughput: output.ProvisionedThroughput != null ? deserializeAws_json1_0ProvisionedThroughputDescription(output.ProvisionedThroughput, context) : undefined
    };
};
const deserializeAws_json1_0GlobalSecondaryIndexDescriptionList = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        if (entry === null) return null;
        return deserializeAws_json1_0GlobalSecondaryIndexDescription(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_0GlobalSecondaryIndexes = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        if (entry === null) return null;
        return deserializeAws_json1_0GlobalSecondaryIndexInfo(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_0GlobalSecondaryIndexInfo = (output, context)=>{
    return {
        IndexName: (0, _smithyClient.expectString)(output.IndexName),
        KeySchema: output.KeySchema != null ? deserializeAws_json1_0KeySchema(output.KeySchema, context) : undefined,
        Projection: output.Projection != null ? deserializeAws_json1_0Projection(output.Projection, context) : undefined,
        ProvisionedThroughput: output.ProvisionedThroughput != null ? deserializeAws_json1_0ProvisionedThroughput(output.ProvisionedThroughput, context) : undefined
    };
};
const deserializeAws_json1_0GlobalSecondaryIndexList = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        if (entry === null) return null;
        return deserializeAws_json1_0GlobalSecondaryIndex(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_0GlobalTable = (output, context)=>{
    return {
        GlobalTableName: (0, _smithyClient.expectString)(output.GlobalTableName),
        ReplicationGroup: output.ReplicationGroup != null ? deserializeAws_json1_0ReplicaList(output.ReplicationGroup, context) : undefined
    };
};
const deserializeAws_json1_0GlobalTableAlreadyExistsException = (output, context)=>{
    return {
        message: (0, _smithyClient.expectString)(output.message)
    };
};
const deserializeAws_json1_0GlobalTableDescription = (output, context)=>{
    return {
        CreationDateTime: output.CreationDateTime != null ? (0, _smithyClient.expectNonNull)((0, _smithyClient.parseEpochTimestamp)((0, _smithyClient.expectNumber)(output.CreationDateTime))) : undefined,
        GlobalTableArn: (0, _smithyClient.expectString)(output.GlobalTableArn),
        GlobalTableName: (0, _smithyClient.expectString)(output.GlobalTableName),
        GlobalTableStatus: (0, _smithyClient.expectString)(output.GlobalTableStatus),
        ReplicationGroup: output.ReplicationGroup != null ? deserializeAws_json1_0ReplicaDescriptionList(output.ReplicationGroup, context) : undefined
    };
};
const deserializeAws_json1_0GlobalTableList = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        if (entry === null) return null;
        return deserializeAws_json1_0GlobalTable(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_0GlobalTableNotFoundException = (output, context)=>{
    return {
        message: (0, _smithyClient.expectString)(output.message)
    };
};
const deserializeAws_json1_0IdempotentParameterMismatchException = (output, context)=>{
    return {
        Message: (0, _smithyClient.expectString)(output.Message)
    };
};
const deserializeAws_json1_0ImportConflictException = (output, context)=>{
    return {
        message: (0, _smithyClient.expectString)(output.message)
    };
};
const deserializeAws_json1_0ImportNotFoundException = (output, context)=>{
    return {
        message: (0, _smithyClient.expectString)(output.message)
    };
};
const deserializeAws_json1_0ImportSummary = (output, context)=>{
    return {
        CloudWatchLogGroupArn: (0, _smithyClient.expectString)(output.CloudWatchLogGroupArn),
        EndTime: output.EndTime != null ? (0, _smithyClient.expectNonNull)((0, _smithyClient.parseEpochTimestamp)((0, _smithyClient.expectNumber)(output.EndTime))) : undefined,
        ImportArn: (0, _smithyClient.expectString)(output.ImportArn),
        ImportStatus: (0, _smithyClient.expectString)(output.ImportStatus),
        InputFormat: (0, _smithyClient.expectString)(output.InputFormat),
        S3BucketSource: output.S3BucketSource != null ? deserializeAws_json1_0S3BucketSource(output.S3BucketSource, context) : undefined,
        StartTime: output.StartTime != null ? (0, _smithyClient.expectNonNull)((0, _smithyClient.parseEpochTimestamp)((0, _smithyClient.expectNumber)(output.StartTime))) : undefined,
        TableArn: (0, _smithyClient.expectString)(output.TableArn)
    };
};
const deserializeAws_json1_0ImportSummaryList = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        if (entry === null) return null;
        return deserializeAws_json1_0ImportSummary(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_0ImportTableDescription = (output, context)=>{
    return {
        ClientToken: (0, _smithyClient.expectString)(output.ClientToken),
        CloudWatchLogGroupArn: (0, _smithyClient.expectString)(output.CloudWatchLogGroupArn),
        EndTime: output.EndTime != null ? (0, _smithyClient.expectNonNull)((0, _smithyClient.parseEpochTimestamp)((0, _smithyClient.expectNumber)(output.EndTime))) : undefined,
        ErrorCount: (0, _smithyClient.expectLong)(output.ErrorCount),
        FailureCode: (0, _smithyClient.expectString)(output.FailureCode),
        FailureMessage: (0, _smithyClient.expectString)(output.FailureMessage),
        ImportArn: (0, _smithyClient.expectString)(output.ImportArn),
        ImportStatus: (0, _smithyClient.expectString)(output.ImportStatus),
        ImportedItemCount: (0, _smithyClient.expectLong)(output.ImportedItemCount),
        InputCompressionType: (0, _smithyClient.expectString)(output.InputCompressionType),
        InputFormat: (0, _smithyClient.expectString)(output.InputFormat),
        InputFormatOptions: output.InputFormatOptions != null ? deserializeAws_json1_0InputFormatOptions(output.InputFormatOptions, context) : undefined,
        ProcessedItemCount: (0, _smithyClient.expectLong)(output.ProcessedItemCount),
        ProcessedSizeBytes: (0, _smithyClient.expectLong)(output.ProcessedSizeBytes),
        S3BucketSource: output.S3BucketSource != null ? deserializeAws_json1_0S3BucketSource(output.S3BucketSource, context) : undefined,
        StartTime: output.StartTime != null ? (0, _smithyClient.expectNonNull)((0, _smithyClient.parseEpochTimestamp)((0, _smithyClient.expectNumber)(output.StartTime))) : undefined,
        TableArn: (0, _smithyClient.expectString)(output.TableArn),
        TableCreationParameters: output.TableCreationParameters != null ? deserializeAws_json1_0TableCreationParameters(output.TableCreationParameters, context) : undefined,
        TableId: (0, _smithyClient.expectString)(output.TableId)
    };
};
const deserializeAws_json1_0ImportTableOutput = (output, context)=>{
    return {
        ImportTableDescription: output.ImportTableDescription != null ? deserializeAws_json1_0ImportTableDescription(output.ImportTableDescription, context) : undefined
    };
};
const deserializeAws_json1_0IndexNotFoundException = (output, context)=>{
    return {
        message: (0, _smithyClient.expectString)(output.message)
    };
};
const deserializeAws_json1_0InputFormatOptions = (output, context)=>{
    return {
        Csv: output.Csv != null ? deserializeAws_json1_0CsvOptions(output.Csv, context) : undefined
    };
};
const deserializeAws_json1_0InternalServerError = (output, context)=>{
    return {
        message: (0, _smithyClient.expectString)(output.message)
    };
};
const deserializeAws_json1_0InvalidEndpointException = (output, context)=>{
    return {
        Message: (0, _smithyClient.expectString)(output.Message)
    };
};
const deserializeAws_json1_0InvalidExportTimeException = (output, context)=>{
    return {
        message: (0, _smithyClient.expectString)(output.message)
    };
};
const deserializeAws_json1_0InvalidRestoreTimeException = (output, context)=>{
    return {
        message: (0, _smithyClient.expectString)(output.message)
    };
};
const deserializeAws_json1_0ItemCollectionKeyAttributeMap = (output, context)=>{
    return Object.entries(output).reduce((acc, [key, value])=>{
        if (value === null) return acc;
        return {
            ...acc,
            [key]: deserializeAws_json1_0AttributeValue((0, _smithyClient.expectUnion)(value), context)
        };
    }, {});
};
const deserializeAws_json1_0ItemCollectionMetrics = (output, context)=>{
    return {
        ItemCollectionKey: output.ItemCollectionKey != null ? deserializeAws_json1_0ItemCollectionKeyAttributeMap(output.ItemCollectionKey, context) : undefined,
        SizeEstimateRangeGB: output.SizeEstimateRangeGB != null ? deserializeAws_json1_0ItemCollectionSizeEstimateRange(output.SizeEstimateRangeGB, context) : undefined
    };
};
const deserializeAws_json1_0ItemCollectionMetricsMultiple = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        if (entry === null) return null;
        return deserializeAws_json1_0ItemCollectionMetrics(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_0ItemCollectionMetricsPerTable = (output, context)=>{
    return Object.entries(output).reduce((acc, [key, value])=>{
        if (value === null) return acc;
        return {
            ...acc,
            [key]: deserializeAws_json1_0ItemCollectionMetricsMultiple(value, context)
        };
    }, {});
};
const deserializeAws_json1_0ItemCollectionSizeEstimateRange = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        if (entry === null) return null;
        return (0, _smithyClient.limitedParseDouble)(entry);
    });
    return retVal;
};
const deserializeAws_json1_0ItemCollectionSizeLimitExceededException = (output, context)=>{
    return {
        message: (0, _smithyClient.expectString)(output.message)
    };
};
const deserializeAws_json1_0ItemList = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        if (entry === null) return null;
        return deserializeAws_json1_0AttributeMap(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_0ItemResponse = (output, context)=>{
    return {
        Item: output.Item != null ? deserializeAws_json1_0AttributeMap(output.Item, context) : undefined
    };
};
const deserializeAws_json1_0ItemResponseList = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        if (entry === null) return null;
        return deserializeAws_json1_0ItemResponse(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_0Key = (output, context)=>{
    return Object.entries(output).reduce((acc, [key, value])=>{
        if (value === null) return acc;
        return {
            ...acc,
            [key]: deserializeAws_json1_0AttributeValue((0, _smithyClient.expectUnion)(value), context)
        };
    }, {});
};
const deserializeAws_json1_0KeyList = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        if (entry === null) return null;
        return deserializeAws_json1_0Key(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_0KeysAndAttributes = (output, context)=>{
    return {
        AttributesToGet: output.AttributesToGet != null ? deserializeAws_json1_0AttributeNameList(output.AttributesToGet, context) : undefined,
        ConsistentRead: (0, _smithyClient.expectBoolean)(output.ConsistentRead),
        ExpressionAttributeNames: output.ExpressionAttributeNames != null ? deserializeAws_json1_0ExpressionAttributeNameMap(output.ExpressionAttributeNames, context) : undefined,
        Keys: output.Keys != null ? deserializeAws_json1_0KeyList(output.Keys, context) : undefined,
        ProjectionExpression: (0, _smithyClient.expectString)(output.ProjectionExpression)
    };
};
const deserializeAws_json1_0KeySchema = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        if (entry === null) return null;
        return deserializeAws_json1_0KeySchemaElement(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_0KeySchemaElement = (output, context)=>{
    return {
        AttributeName: (0, _smithyClient.expectString)(output.AttributeName),
        KeyType: (0, _smithyClient.expectString)(output.KeyType)
    };
};
const deserializeAws_json1_0KinesisDataStreamDestination = (output, context)=>{
    return {
        DestinationStatus: (0, _smithyClient.expectString)(output.DestinationStatus),
        DestinationStatusDescription: (0, _smithyClient.expectString)(output.DestinationStatusDescription),
        StreamArn: (0, _smithyClient.expectString)(output.StreamArn)
    };
};
const deserializeAws_json1_0KinesisDataStreamDestinations = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        if (entry === null) return null;
        return deserializeAws_json1_0KinesisDataStreamDestination(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_0KinesisStreamingDestinationOutput = (output, context)=>{
    return {
        DestinationStatus: (0, _smithyClient.expectString)(output.DestinationStatus),
        StreamArn: (0, _smithyClient.expectString)(output.StreamArn),
        TableName: (0, _smithyClient.expectString)(output.TableName)
    };
};
const deserializeAws_json1_0LimitExceededException = (output, context)=>{
    return {
        message: (0, _smithyClient.expectString)(output.message)
    };
};
const deserializeAws_json1_0ListAttributeValue = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        if (entry === null) return null;
        return deserializeAws_json1_0AttributeValue((0, _smithyClient.expectUnion)(entry), context);
    });
    return retVal;
};
const deserializeAws_json1_0ListBackupsOutput = (output, context)=>{
    return {
        BackupSummaries: output.BackupSummaries != null ? deserializeAws_json1_0BackupSummaries(output.BackupSummaries, context) : undefined,
        LastEvaluatedBackupArn: (0, _smithyClient.expectString)(output.LastEvaluatedBackupArn)
    };
};
const deserializeAws_json1_0ListContributorInsightsOutput = (output, context)=>{
    return {
        ContributorInsightsSummaries: output.ContributorInsightsSummaries != null ? deserializeAws_json1_0ContributorInsightsSummaries(output.ContributorInsightsSummaries, context) : undefined,
        NextToken: (0, _smithyClient.expectString)(output.NextToken)
    };
};
const deserializeAws_json1_0ListExportsOutput = (output, context)=>{
    return {
        ExportSummaries: output.ExportSummaries != null ? deserializeAws_json1_0ExportSummaries(output.ExportSummaries, context) : undefined,
        NextToken: (0, _smithyClient.expectString)(output.NextToken)
    };
};
const deserializeAws_json1_0ListGlobalTablesOutput = (output, context)=>{
    return {
        GlobalTables: output.GlobalTables != null ? deserializeAws_json1_0GlobalTableList(output.GlobalTables, context) : undefined,
        LastEvaluatedGlobalTableName: (0, _smithyClient.expectString)(output.LastEvaluatedGlobalTableName)
    };
};
const deserializeAws_json1_0ListImportsOutput = (output, context)=>{
    return {
        ImportSummaryList: output.ImportSummaryList != null ? deserializeAws_json1_0ImportSummaryList(output.ImportSummaryList, context) : undefined,
        NextToken: (0, _smithyClient.expectString)(output.NextToken)
    };
};
const deserializeAws_json1_0ListTablesOutput = (output, context)=>{
    return {
        LastEvaluatedTableName: (0, _smithyClient.expectString)(output.LastEvaluatedTableName),
        TableNames: output.TableNames != null ? deserializeAws_json1_0TableNameList(output.TableNames, context) : undefined
    };
};
const deserializeAws_json1_0ListTagsOfResourceOutput = (output, context)=>{
    return {
        NextToken: (0, _smithyClient.expectString)(output.NextToken),
        Tags: output.Tags != null ? deserializeAws_json1_0TagList(output.Tags, context) : undefined
    };
};
const deserializeAws_json1_0LocalSecondaryIndexDescription = (output, context)=>{
    return {
        IndexArn: (0, _smithyClient.expectString)(output.IndexArn),
        IndexName: (0, _smithyClient.expectString)(output.IndexName),
        IndexSizeBytes: (0, _smithyClient.expectLong)(output.IndexSizeBytes),
        ItemCount: (0, _smithyClient.expectLong)(output.ItemCount),
        KeySchema: output.KeySchema != null ? deserializeAws_json1_0KeySchema(output.KeySchema, context) : undefined,
        Projection: output.Projection != null ? deserializeAws_json1_0Projection(output.Projection, context) : undefined
    };
};
const deserializeAws_json1_0LocalSecondaryIndexDescriptionList = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        if (entry === null) return null;
        return deserializeAws_json1_0LocalSecondaryIndexDescription(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_0LocalSecondaryIndexes = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        if (entry === null) return null;
        return deserializeAws_json1_0LocalSecondaryIndexInfo(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_0LocalSecondaryIndexInfo = (output, context)=>{
    return {
        IndexName: (0, _smithyClient.expectString)(output.IndexName),
        KeySchema: output.KeySchema != null ? deserializeAws_json1_0KeySchema(output.KeySchema, context) : undefined,
        Projection: output.Projection != null ? deserializeAws_json1_0Projection(output.Projection, context) : undefined
    };
};
const deserializeAws_json1_0MapAttributeValue = (output, context)=>{
    return Object.entries(output).reduce((acc, [key, value])=>{
        if (value === null) return acc;
        return {
            ...acc,
            [key]: deserializeAws_json1_0AttributeValue((0, _smithyClient.expectUnion)(value), context)
        };
    }, {});
};
const deserializeAws_json1_0NonKeyAttributeNameList = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        if (entry === null) return null;
        return (0, _smithyClient.expectString)(entry);
    });
    return retVal;
};
const deserializeAws_json1_0NumberSetAttributeValue = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        if (entry === null) return null;
        return (0, _smithyClient.expectString)(entry);
    });
    return retVal;
};
const deserializeAws_json1_0PartiQLBatchResponse = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        if (entry === null) return null;
        return deserializeAws_json1_0BatchStatementResponse(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_0PointInTimeRecoveryDescription = (output, context)=>{
    return {
        EarliestRestorableDateTime: output.EarliestRestorableDateTime != null ? (0, _smithyClient.expectNonNull)((0, _smithyClient.parseEpochTimestamp)((0, _smithyClient.expectNumber)(output.EarliestRestorableDateTime))) : undefined,
        LatestRestorableDateTime: output.LatestRestorableDateTime != null ? (0, _smithyClient.expectNonNull)((0, _smithyClient.parseEpochTimestamp)((0, _smithyClient.expectNumber)(output.LatestRestorableDateTime))) : undefined,
        PointInTimeRecoveryStatus: (0, _smithyClient.expectString)(output.PointInTimeRecoveryStatus)
    };
};
const deserializeAws_json1_0PointInTimeRecoveryUnavailableException = (output, context)=>{
    return {
        message: (0, _smithyClient.expectString)(output.message)
    };
};
const deserializeAws_json1_0Projection = (output, context)=>{
    return {
        NonKeyAttributes: output.NonKeyAttributes != null ? deserializeAws_json1_0NonKeyAttributeNameList(output.NonKeyAttributes, context) : undefined,
        ProjectionType: (0, _smithyClient.expectString)(output.ProjectionType)
    };
};
const deserializeAws_json1_0ProvisionedThroughput = (output, context)=>{
    return {
        ReadCapacityUnits: (0, _smithyClient.expectLong)(output.ReadCapacityUnits),
        WriteCapacityUnits: (0, _smithyClient.expectLong)(output.WriteCapacityUnits)
    };
};
const deserializeAws_json1_0ProvisionedThroughputDescription = (output, context)=>{
    return {
        LastDecreaseDateTime: output.LastDecreaseDateTime != null ? (0, _smithyClient.expectNonNull)((0, _smithyClient.parseEpochTimestamp)((0, _smithyClient.expectNumber)(output.LastDecreaseDateTime))) : undefined,
        LastIncreaseDateTime: output.LastIncreaseDateTime != null ? (0, _smithyClient.expectNonNull)((0, _smithyClient.parseEpochTimestamp)((0, _smithyClient.expectNumber)(output.LastIncreaseDateTime))) : undefined,
        NumberOfDecreasesToday: (0, _smithyClient.expectLong)(output.NumberOfDecreasesToday),
        ReadCapacityUnits: (0, _smithyClient.expectLong)(output.ReadCapacityUnits),
        WriteCapacityUnits: (0, _smithyClient.expectLong)(output.WriteCapacityUnits)
    };
};
const deserializeAws_json1_0ProvisionedThroughputExceededException = (output, context)=>{
    return {
        message: (0, _smithyClient.expectString)(output.message)
    };
};
const deserializeAws_json1_0ProvisionedThroughputOverride = (output, context)=>{
    return {
        ReadCapacityUnits: (0, _smithyClient.expectLong)(output.ReadCapacityUnits)
    };
};
const deserializeAws_json1_0PutItemInputAttributeMap = (output, context)=>{
    return Object.entries(output).reduce((acc, [key, value])=>{
        if (value === null) return acc;
        return {
            ...acc,
            [key]: deserializeAws_json1_0AttributeValue((0, _smithyClient.expectUnion)(value), context)
        };
    }, {});
};
const deserializeAws_json1_0PutItemOutput = (output, context)=>{
    return {
        Attributes: output.Attributes != null ? deserializeAws_json1_0AttributeMap(output.Attributes, context) : undefined,
        ConsumedCapacity: output.ConsumedCapacity != null ? deserializeAws_json1_0ConsumedCapacity(output.ConsumedCapacity, context) : undefined,
        ItemCollectionMetrics: output.ItemCollectionMetrics != null ? deserializeAws_json1_0ItemCollectionMetrics(output.ItemCollectionMetrics, context) : undefined
    };
};
const deserializeAws_json1_0PutRequest = (output, context)=>{
    return {
        Item: output.Item != null ? deserializeAws_json1_0PutItemInputAttributeMap(output.Item, context) : undefined
    };
};
const deserializeAws_json1_0QueryOutput = (output, context)=>{
    return {
        ConsumedCapacity: output.ConsumedCapacity != null ? deserializeAws_json1_0ConsumedCapacity(output.ConsumedCapacity, context) : undefined,
        Count: (0, _smithyClient.expectInt32)(output.Count),
        Items: output.Items != null ? deserializeAws_json1_0ItemList(output.Items, context) : undefined,
        LastEvaluatedKey: output.LastEvaluatedKey != null ? deserializeAws_json1_0Key(output.LastEvaluatedKey, context) : undefined,
        ScannedCount: (0, _smithyClient.expectInt32)(output.ScannedCount)
    };
};
const deserializeAws_json1_0Replica = (output, context)=>{
    return {
        RegionName: (0, _smithyClient.expectString)(output.RegionName)
    };
};
const deserializeAws_json1_0ReplicaAlreadyExistsException = (output, context)=>{
    return {
        message: (0, _smithyClient.expectString)(output.message)
    };
};
const deserializeAws_json1_0ReplicaAutoScalingDescription = (output, context)=>{
    return {
        GlobalSecondaryIndexes: output.GlobalSecondaryIndexes != null ? deserializeAws_json1_0ReplicaGlobalSecondaryIndexAutoScalingDescriptionList(output.GlobalSecondaryIndexes, context) : undefined,
        RegionName: (0, _smithyClient.expectString)(output.RegionName),
        ReplicaProvisionedReadCapacityAutoScalingSettings: output.ReplicaProvisionedReadCapacityAutoScalingSettings != null ? deserializeAws_json1_0AutoScalingSettingsDescription(output.ReplicaProvisionedReadCapacityAutoScalingSettings, context) : undefined,
        ReplicaProvisionedWriteCapacityAutoScalingSettings: output.ReplicaProvisionedWriteCapacityAutoScalingSettings != null ? deserializeAws_json1_0AutoScalingSettingsDescription(output.ReplicaProvisionedWriteCapacityAutoScalingSettings, context) : undefined,
        ReplicaStatus: (0, _smithyClient.expectString)(output.ReplicaStatus)
    };
};
const deserializeAws_json1_0ReplicaAutoScalingDescriptionList = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        if (entry === null) return null;
        return deserializeAws_json1_0ReplicaAutoScalingDescription(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_0ReplicaDescription = (output, context)=>{
    return {
        GlobalSecondaryIndexes: output.GlobalSecondaryIndexes != null ? deserializeAws_json1_0ReplicaGlobalSecondaryIndexDescriptionList(output.GlobalSecondaryIndexes, context) : undefined,
        KMSMasterKeyId: (0, _smithyClient.expectString)(output.KMSMasterKeyId),
        ProvisionedThroughputOverride: output.ProvisionedThroughputOverride != null ? deserializeAws_json1_0ProvisionedThroughputOverride(output.ProvisionedThroughputOverride, context) : undefined,
        RegionName: (0, _smithyClient.expectString)(output.RegionName),
        ReplicaInaccessibleDateTime: output.ReplicaInaccessibleDateTime != null ? (0, _smithyClient.expectNonNull)((0, _smithyClient.parseEpochTimestamp)((0, _smithyClient.expectNumber)(output.ReplicaInaccessibleDateTime))) : undefined,
        ReplicaStatus: (0, _smithyClient.expectString)(output.ReplicaStatus),
        ReplicaStatusDescription: (0, _smithyClient.expectString)(output.ReplicaStatusDescription),
        ReplicaStatusPercentProgress: (0, _smithyClient.expectString)(output.ReplicaStatusPercentProgress),
        ReplicaTableClassSummary: output.ReplicaTableClassSummary != null ? deserializeAws_json1_0TableClassSummary(output.ReplicaTableClassSummary, context) : undefined
    };
};
const deserializeAws_json1_0ReplicaDescriptionList = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        if (entry === null) return null;
        return deserializeAws_json1_0ReplicaDescription(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_0ReplicaGlobalSecondaryIndexAutoScalingDescription = (output, context)=>{
    return {
        IndexName: (0, _smithyClient.expectString)(output.IndexName),
        IndexStatus: (0, _smithyClient.expectString)(output.IndexStatus),
        ProvisionedReadCapacityAutoScalingSettings: output.ProvisionedReadCapacityAutoScalingSettings != null ? deserializeAws_json1_0AutoScalingSettingsDescription(output.ProvisionedReadCapacityAutoScalingSettings, context) : undefined,
        ProvisionedWriteCapacityAutoScalingSettings: output.ProvisionedWriteCapacityAutoScalingSettings != null ? deserializeAws_json1_0AutoScalingSettingsDescription(output.ProvisionedWriteCapacityAutoScalingSettings, context) : undefined
    };
};
const deserializeAws_json1_0ReplicaGlobalSecondaryIndexAutoScalingDescriptionList = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        if (entry === null) return null;
        return deserializeAws_json1_0ReplicaGlobalSecondaryIndexAutoScalingDescription(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_0ReplicaGlobalSecondaryIndexDescription = (output, context)=>{
    return {
        IndexName: (0, _smithyClient.expectString)(output.IndexName),
        ProvisionedThroughputOverride: output.ProvisionedThroughputOverride != null ? deserializeAws_json1_0ProvisionedThroughputOverride(output.ProvisionedThroughputOverride, context) : undefined
    };
};
const deserializeAws_json1_0ReplicaGlobalSecondaryIndexDescriptionList = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        if (entry === null) return null;
        return deserializeAws_json1_0ReplicaGlobalSecondaryIndexDescription(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_0ReplicaGlobalSecondaryIndexSettingsDescription = (output, context)=>{
    return {
        IndexName: (0, _smithyClient.expectString)(output.IndexName),
        IndexStatus: (0, _smithyClient.expectString)(output.IndexStatus),
        ProvisionedReadCapacityAutoScalingSettings: output.ProvisionedReadCapacityAutoScalingSettings != null ? deserializeAws_json1_0AutoScalingSettingsDescription(output.ProvisionedReadCapacityAutoScalingSettings, context) : undefined,
        ProvisionedReadCapacityUnits: (0, _smithyClient.expectLong)(output.ProvisionedReadCapacityUnits),
        ProvisionedWriteCapacityAutoScalingSettings: output.ProvisionedWriteCapacityAutoScalingSettings != null ? deserializeAws_json1_0AutoScalingSettingsDescription(output.ProvisionedWriteCapacityAutoScalingSettings, context) : undefined,
        ProvisionedWriteCapacityUnits: (0, _smithyClient.expectLong)(output.ProvisionedWriteCapacityUnits)
    };
};
const deserializeAws_json1_0ReplicaGlobalSecondaryIndexSettingsDescriptionList = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        if (entry === null) return null;
        return deserializeAws_json1_0ReplicaGlobalSecondaryIndexSettingsDescription(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_0ReplicaList = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        if (entry === null) return null;
        return deserializeAws_json1_0Replica(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_0ReplicaNotFoundException = (output, context)=>{
    return {
        message: (0, _smithyClient.expectString)(output.message)
    };
};
const deserializeAws_json1_0ReplicaSettingsDescription = (output, context)=>{
    return {
        RegionName: (0, _smithyClient.expectString)(output.RegionName),
        ReplicaBillingModeSummary: output.ReplicaBillingModeSummary != null ? deserializeAws_json1_0BillingModeSummary(output.ReplicaBillingModeSummary, context) : undefined,
        ReplicaGlobalSecondaryIndexSettings: output.ReplicaGlobalSecondaryIndexSettings != null ? deserializeAws_json1_0ReplicaGlobalSecondaryIndexSettingsDescriptionList(output.ReplicaGlobalSecondaryIndexSettings, context) : undefined,
        ReplicaProvisionedReadCapacityAutoScalingSettings: output.ReplicaProvisionedReadCapacityAutoScalingSettings != null ? deserializeAws_json1_0AutoScalingSettingsDescription(output.ReplicaProvisionedReadCapacityAutoScalingSettings, context) : undefined,
        ReplicaProvisionedReadCapacityUnits: (0, _smithyClient.expectLong)(output.ReplicaProvisionedReadCapacityUnits),
        ReplicaProvisionedWriteCapacityAutoScalingSettings: output.ReplicaProvisionedWriteCapacityAutoScalingSettings != null ? deserializeAws_json1_0AutoScalingSettingsDescription(output.ReplicaProvisionedWriteCapacityAutoScalingSettings, context) : undefined,
        ReplicaProvisionedWriteCapacityUnits: (0, _smithyClient.expectLong)(output.ReplicaProvisionedWriteCapacityUnits),
        ReplicaStatus: (0, _smithyClient.expectString)(output.ReplicaStatus),
        ReplicaTableClassSummary: output.ReplicaTableClassSummary != null ? deserializeAws_json1_0TableClassSummary(output.ReplicaTableClassSummary, context) : undefined
    };
};
const deserializeAws_json1_0ReplicaSettingsDescriptionList = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        if (entry === null) return null;
        return deserializeAws_json1_0ReplicaSettingsDescription(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_0RequestLimitExceeded = (output, context)=>{
    return {
        message: (0, _smithyClient.expectString)(output.message)
    };
};
const deserializeAws_json1_0ResourceInUseException = (output, context)=>{
    return {
        message: (0, _smithyClient.expectString)(output.message)
    };
};
const deserializeAws_json1_0ResourceNotFoundException = (output, context)=>{
    return {
        message: (0, _smithyClient.expectString)(output.message)
    };
};
const deserializeAws_json1_0RestoreSummary = (output, context)=>{
    return {
        RestoreDateTime: output.RestoreDateTime != null ? (0, _smithyClient.expectNonNull)((0, _smithyClient.parseEpochTimestamp)((0, _smithyClient.expectNumber)(output.RestoreDateTime))) : undefined,
        RestoreInProgress: (0, _smithyClient.expectBoolean)(output.RestoreInProgress),
        SourceBackupArn: (0, _smithyClient.expectString)(output.SourceBackupArn),
        SourceTableArn: (0, _smithyClient.expectString)(output.SourceTableArn)
    };
};
const deserializeAws_json1_0RestoreTableFromBackupOutput = (output, context)=>{
    return {
        TableDescription: output.TableDescription != null ? deserializeAws_json1_0TableDescription(output.TableDescription, context) : undefined
    };
};
const deserializeAws_json1_0RestoreTableToPointInTimeOutput = (output, context)=>{
    return {
        TableDescription: output.TableDescription != null ? deserializeAws_json1_0TableDescription(output.TableDescription, context) : undefined
    };
};
const deserializeAws_json1_0S3BucketSource = (output, context)=>{
    return {
        S3Bucket: (0, _smithyClient.expectString)(output.S3Bucket),
        S3BucketOwner: (0, _smithyClient.expectString)(output.S3BucketOwner),
        S3KeyPrefix: (0, _smithyClient.expectString)(output.S3KeyPrefix)
    };
};
const deserializeAws_json1_0ScanOutput = (output, context)=>{
    return {
        ConsumedCapacity: output.ConsumedCapacity != null ? deserializeAws_json1_0ConsumedCapacity(output.ConsumedCapacity, context) : undefined,
        Count: (0, _smithyClient.expectInt32)(output.Count),
        Items: output.Items != null ? deserializeAws_json1_0ItemList(output.Items, context) : undefined,
        LastEvaluatedKey: output.LastEvaluatedKey != null ? deserializeAws_json1_0Key(output.LastEvaluatedKey, context) : undefined,
        ScannedCount: (0, _smithyClient.expectInt32)(output.ScannedCount)
    };
};
const deserializeAws_json1_0SecondaryIndexesCapacityMap = (output, context)=>{
    return Object.entries(output).reduce((acc, [key, value])=>{
        if (value === null) return acc;
        return {
            ...acc,
            [key]: deserializeAws_json1_0Capacity(value, context)
        };
    }, {});
};
const deserializeAws_json1_0SourceTableDetails = (output, context)=>{
    return {
        BillingMode: (0, _smithyClient.expectString)(output.BillingMode),
        ItemCount: (0, _smithyClient.expectLong)(output.ItemCount),
        KeySchema: output.KeySchema != null ? deserializeAws_json1_0KeySchema(output.KeySchema, context) : undefined,
        ProvisionedThroughput: output.ProvisionedThroughput != null ? deserializeAws_json1_0ProvisionedThroughput(output.ProvisionedThroughput, context) : undefined,
        TableArn: (0, _smithyClient.expectString)(output.TableArn),
        TableCreationDateTime: output.TableCreationDateTime != null ? (0, _smithyClient.expectNonNull)((0, _smithyClient.parseEpochTimestamp)((0, _smithyClient.expectNumber)(output.TableCreationDateTime))) : undefined,
        TableId: (0, _smithyClient.expectString)(output.TableId),
        TableName: (0, _smithyClient.expectString)(output.TableName),
        TableSizeBytes: (0, _smithyClient.expectLong)(output.TableSizeBytes)
    };
};
const deserializeAws_json1_0SourceTableFeatureDetails = (output, context)=>{
    return {
        GlobalSecondaryIndexes: output.GlobalSecondaryIndexes != null ? deserializeAws_json1_0GlobalSecondaryIndexes(output.GlobalSecondaryIndexes, context) : undefined,
        LocalSecondaryIndexes: output.LocalSecondaryIndexes != null ? deserializeAws_json1_0LocalSecondaryIndexes(output.LocalSecondaryIndexes, context) : undefined,
        SSEDescription: output.SSEDescription != null ? deserializeAws_json1_0SSEDescription(output.SSEDescription, context) : undefined,
        StreamDescription: output.StreamDescription != null ? deserializeAws_json1_0StreamSpecification(output.StreamDescription, context) : undefined,
        TimeToLiveDescription: output.TimeToLiveDescription != null ? deserializeAws_json1_0TimeToLiveDescription(output.TimeToLiveDescription, context) : undefined
    };
};
const deserializeAws_json1_0SSEDescription = (output, context)=>{
    return {
        InaccessibleEncryptionDateTime: output.InaccessibleEncryptionDateTime != null ? (0, _smithyClient.expectNonNull)((0, _smithyClient.parseEpochTimestamp)((0, _smithyClient.expectNumber)(output.InaccessibleEncryptionDateTime))) : undefined,
        KMSMasterKeyArn: (0, _smithyClient.expectString)(output.KMSMasterKeyArn),
        SSEType: (0, _smithyClient.expectString)(output.SSEType),
        Status: (0, _smithyClient.expectString)(output.Status)
    };
};
const deserializeAws_json1_0SSESpecification = (output, context)=>{
    return {
        Enabled: (0, _smithyClient.expectBoolean)(output.Enabled),
        KMSMasterKeyId: (0, _smithyClient.expectString)(output.KMSMasterKeyId),
        SSEType: (0, _smithyClient.expectString)(output.SSEType)
    };
};
const deserializeAws_json1_0StreamSpecification = (output, context)=>{
    return {
        StreamEnabled: (0, _smithyClient.expectBoolean)(output.StreamEnabled),
        StreamViewType: (0, _smithyClient.expectString)(output.StreamViewType)
    };
};
const deserializeAws_json1_0StringSetAttributeValue = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        if (entry === null) return null;
        return (0, _smithyClient.expectString)(entry);
    });
    return retVal;
};
const deserializeAws_json1_0TableAlreadyExistsException = (output, context)=>{
    return {
        message: (0, _smithyClient.expectString)(output.message)
    };
};
const deserializeAws_json1_0TableAutoScalingDescription = (output, context)=>{
    return {
        Replicas: output.Replicas != null ? deserializeAws_json1_0ReplicaAutoScalingDescriptionList(output.Replicas, context) : undefined,
        TableName: (0, _smithyClient.expectString)(output.TableName),
        TableStatus: (0, _smithyClient.expectString)(output.TableStatus)
    };
};
const deserializeAws_json1_0TableClassSummary = (output, context)=>{
    return {
        LastUpdateDateTime: output.LastUpdateDateTime != null ? (0, _smithyClient.expectNonNull)((0, _smithyClient.parseEpochTimestamp)((0, _smithyClient.expectNumber)(output.LastUpdateDateTime))) : undefined,
        TableClass: (0, _smithyClient.expectString)(output.TableClass)
    };
};
const deserializeAws_json1_0TableCreationParameters = (output, context)=>{
    return {
        AttributeDefinitions: output.AttributeDefinitions != null ? deserializeAws_json1_0AttributeDefinitions(output.AttributeDefinitions, context) : undefined,
        BillingMode: (0, _smithyClient.expectString)(output.BillingMode),
        GlobalSecondaryIndexes: output.GlobalSecondaryIndexes != null ? deserializeAws_json1_0GlobalSecondaryIndexList(output.GlobalSecondaryIndexes, context) : undefined,
        KeySchema: output.KeySchema != null ? deserializeAws_json1_0KeySchema(output.KeySchema, context) : undefined,
        ProvisionedThroughput: output.ProvisionedThroughput != null ? deserializeAws_json1_0ProvisionedThroughput(output.ProvisionedThroughput, context) : undefined,
        SSESpecification: output.SSESpecification != null ? deserializeAws_json1_0SSESpecification(output.SSESpecification, context) : undefined,
        TableName: (0, _smithyClient.expectString)(output.TableName)
    };
};
const deserializeAws_json1_0TableDescription = (output, context)=>{
    return {
        ArchivalSummary: output.ArchivalSummary != null ? deserializeAws_json1_0ArchivalSummary(output.ArchivalSummary, context) : undefined,
        AttributeDefinitions: output.AttributeDefinitions != null ? deserializeAws_json1_0AttributeDefinitions(output.AttributeDefinitions, context) : undefined,
        BillingModeSummary: output.BillingModeSummary != null ? deserializeAws_json1_0BillingModeSummary(output.BillingModeSummary, context) : undefined,
        CreationDateTime: output.CreationDateTime != null ? (0, _smithyClient.expectNonNull)((0, _smithyClient.parseEpochTimestamp)((0, _smithyClient.expectNumber)(output.CreationDateTime))) : undefined,
        GlobalSecondaryIndexes: output.GlobalSecondaryIndexes != null ? deserializeAws_json1_0GlobalSecondaryIndexDescriptionList(output.GlobalSecondaryIndexes, context) : undefined,
        GlobalTableVersion: (0, _smithyClient.expectString)(output.GlobalTableVersion),
        ItemCount: (0, _smithyClient.expectLong)(output.ItemCount),
        KeySchema: output.KeySchema != null ? deserializeAws_json1_0KeySchema(output.KeySchema, context) : undefined,
        LatestStreamArn: (0, _smithyClient.expectString)(output.LatestStreamArn),
        LatestStreamLabel: (0, _smithyClient.expectString)(output.LatestStreamLabel),
        LocalSecondaryIndexes: output.LocalSecondaryIndexes != null ? deserializeAws_json1_0LocalSecondaryIndexDescriptionList(output.LocalSecondaryIndexes, context) : undefined,
        ProvisionedThroughput: output.ProvisionedThroughput != null ? deserializeAws_json1_0ProvisionedThroughputDescription(output.ProvisionedThroughput, context) : undefined,
        Replicas: output.Replicas != null ? deserializeAws_json1_0ReplicaDescriptionList(output.Replicas, context) : undefined,
        RestoreSummary: output.RestoreSummary != null ? deserializeAws_json1_0RestoreSummary(output.RestoreSummary, context) : undefined,
        SSEDescription: output.SSEDescription != null ? deserializeAws_json1_0SSEDescription(output.SSEDescription, context) : undefined,
        StreamSpecification: output.StreamSpecification != null ? deserializeAws_json1_0StreamSpecification(output.StreamSpecification, context) : undefined,
        TableArn: (0, _smithyClient.expectString)(output.TableArn),
        TableClassSummary: output.TableClassSummary != null ? deserializeAws_json1_0TableClassSummary(output.TableClassSummary, context) : undefined,
        TableId: (0, _smithyClient.expectString)(output.TableId),
        TableName: (0, _smithyClient.expectString)(output.TableName),
        TableSizeBytes: (0, _smithyClient.expectLong)(output.TableSizeBytes),
        TableStatus: (0, _smithyClient.expectString)(output.TableStatus)
    };
};
const deserializeAws_json1_0TableInUseException = (output, context)=>{
    return {
        message: (0, _smithyClient.expectString)(output.message)
    };
};
const deserializeAws_json1_0TableNameList = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        if (entry === null) return null;
        return (0, _smithyClient.expectString)(entry);
    });
    return retVal;
};
const deserializeAws_json1_0TableNotFoundException = (output, context)=>{
    return {
        message: (0, _smithyClient.expectString)(output.message)
    };
};
const deserializeAws_json1_0Tag = (output, context)=>{
    return {
        Key: (0, _smithyClient.expectString)(output.Key),
        Value: (0, _smithyClient.expectString)(output.Value)
    };
};
const deserializeAws_json1_0TagList = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        if (entry === null) return null;
        return deserializeAws_json1_0Tag(entry, context);
    });
    return retVal;
};
const deserializeAws_json1_0TimeToLiveDescription = (output, context)=>{
    return {
        AttributeName: (0, _smithyClient.expectString)(output.AttributeName),
        TimeToLiveStatus: (0, _smithyClient.expectString)(output.TimeToLiveStatus)
    };
};
const deserializeAws_json1_0TimeToLiveSpecification = (output, context)=>{
    return {
        AttributeName: (0, _smithyClient.expectString)(output.AttributeName),
        Enabled: (0, _smithyClient.expectBoolean)(output.Enabled)
    };
};
const deserializeAws_json1_0TransactGetItemsOutput = (output, context)=>{
    return {
        ConsumedCapacity: output.ConsumedCapacity != null ? deserializeAws_json1_0ConsumedCapacityMultiple(output.ConsumedCapacity, context) : undefined,
        Responses: output.Responses != null ? deserializeAws_json1_0ItemResponseList(output.Responses, context) : undefined
    };
};
const deserializeAws_json1_0TransactionCanceledException = (output, context)=>{
    return {
        CancellationReasons: output.CancellationReasons != null ? deserializeAws_json1_0CancellationReasonList(output.CancellationReasons, context) : undefined,
        Message: (0, _smithyClient.expectString)(output.Message)
    };
};
const deserializeAws_json1_0TransactionConflictException = (output, context)=>{
    return {
        message: (0, _smithyClient.expectString)(output.message)
    };
};
const deserializeAws_json1_0TransactionInProgressException = (output, context)=>{
    return {
        Message: (0, _smithyClient.expectString)(output.Message)
    };
};
const deserializeAws_json1_0TransactWriteItemsOutput = (output, context)=>{
    return {
        ConsumedCapacity: output.ConsumedCapacity != null ? deserializeAws_json1_0ConsumedCapacityMultiple(output.ConsumedCapacity, context) : undefined,
        ItemCollectionMetrics: output.ItemCollectionMetrics != null ? deserializeAws_json1_0ItemCollectionMetricsPerTable(output.ItemCollectionMetrics, context) : undefined
    };
};
const deserializeAws_json1_0UpdateContinuousBackupsOutput = (output, context)=>{
    return {
        ContinuousBackupsDescription: output.ContinuousBackupsDescription != null ? deserializeAws_json1_0ContinuousBackupsDescription(output.ContinuousBackupsDescription, context) : undefined
    };
};
const deserializeAws_json1_0UpdateContributorInsightsOutput = (output, context)=>{
    return {
        ContributorInsightsStatus: (0, _smithyClient.expectString)(output.ContributorInsightsStatus),
        IndexName: (0, _smithyClient.expectString)(output.IndexName),
        TableName: (0, _smithyClient.expectString)(output.TableName)
    };
};
const deserializeAws_json1_0UpdateGlobalTableOutput = (output, context)=>{
    return {
        GlobalTableDescription: output.GlobalTableDescription != null ? deserializeAws_json1_0GlobalTableDescription(output.GlobalTableDescription, context) : undefined
    };
};
const deserializeAws_json1_0UpdateGlobalTableSettingsOutput = (output, context)=>{
    return {
        GlobalTableName: (0, _smithyClient.expectString)(output.GlobalTableName),
        ReplicaSettings: output.ReplicaSettings != null ? deserializeAws_json1_0ReplicaSettingsDescriptionList(output.ReplicaSettings, context) : undefined
    };
};
const deserializeAws_json1_0UpdateItemOutput = (output, context)=>{
    return {
        Attributes: output.Attributes != null ? deserializeAws_json1_0AttributeMap(output.Attributes, context) : undefined,
        ConsumedCapacity: output.ConsumedCapacity != null ? deserializeAws_json1_0ConsumedCapacity(output.ConsumedCapacity, context) : undefined,
        ItemCollectionMetrics: output.ItemCollectionMetrics != null ? deserializeAws_json1_0ItemCollectionMetrics(output.ItemCollectionMetrics, context) : undefined
    };
};
const deserializeAws_json1_0UpdateTableOutput = (output, context)=>{
    return {
        TableDescription: output.TableDescription != null ? deserializeAws_json1_0TableDescription(output.TableDescription, context) : undefined
    };
};
const deserializeAws_json1_0UpdateTableReplicaAutoScalingOutput = (output, context)=>{
    return {
        TableAutoScalingDescription: output.TableAutoScalingDescription != null ? deserializeAws_json1_0TableAutoScalingDescription(output.TableAutoScalingDescription, context) : undefined
    };
};
const deserializeAws_json1_0UpdateTimeToLiveOutput = (output, context)=>{
    return {
        TimeToLiveSpecification: output.TimeToLiveSpecification != null ? deserializeAws_json1_0TimeToLiveSpecification(output.TimeToLiveSpecification, context) : undefined
    };
};
const deserializeAws_json1_0WriteRequest = (output, context)=>{
    return {
        DeleteRequest: output.DeleteRequest != null ? deserializeAws_json1_0DeleteRequest(output.DeleteRequest, context) : undefined,
        PutRequest: output.PutRequest != null ? deserializeAws_json1_0PutRequest(output.PutRequest, context) : undefined
    };
};
const deserializeAws_json1_0WriteRequests = (output, context)=>{
    const retVal = (output || []).filter((e)=>e != null).map((entry)=>{
        if (entry === null) return null;
        return deserializeAws_json1_0WriteRequest(entry, context);
    });
    return retVal;
};
const deserializeMetadata = (output)=>({
        httpStatusCode: output.statusCode,
        requestId: (output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"]) ?? output.headers["x-amz-request-id"],
        extendedRequestId: output.headers["x-amz-id-2"],
        cfId: output.headers["x-amz-cf-id"]
    });
const collectBody = (streamBody = new Uint8Array(), context)=>{
    if (streamBody instanceof Uint8Array) return Promise.resolve(streamBody);
    return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
};
const collectBodyString = (streamBody, context)=>collectBody(streamBody, context).then((body)=>context.utf8Encoder(body));
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body)=>{
    const { hostname , protocol ="https" , port , path: basePath  } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers
    };
    if (resolvedHostname !== undefined) contents.hostname = resolvedHostname;
    if (body !== undefined) contents.body = body;
    return new (0, _protocolHttp.HttpRequest)(contents);
};
const parseBody = (streamBody, context)=>collectBodyString(streamBody, context).then((encoded)=>{
        if (encoded.length) return JSON.parse(encoded);
        return {};
    });
const parseErrorBody = async (errorBody, context)=>{
    const value = await parseBody(errorBody, context);
    value.message = value.message ?? value.Message;
    return value;
};
const loadRestJsonErrorCode = (output, data)=>{
    const findKey = (object, key)=>Object.keys(object).find((k)=>k.toLowerCase() === key.toLowerCase());
    const sanitizeErrorCode = (rawValue)=>{
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") cleanValue = cleanValue.toString();
        if (cleanValue.indexOf(",") >= 0) cleanValue = cleanValue.split(",")[0];
        if (cleanValue.indexOf(":") >= 0) cleanValue = cleanValue.split(":")[0];
        if (cleanValue.indexOf("#") >= 0) cleanValue = cleanValue.split("#")[1];
        return cleanValue;
    };
    const headerKey = findKey(output.headers, "x-amzn-errortype");
    if (headerKey !== undefined) return sanitizeErrorCode(output.headers[headerKey]);
    if (data.code !== undefined) return sanitizeErrorCode(data.code);
    if (data["__type"] !== undefined) return sanitizeErrorCode(data["__type"]);
};

},{"@aws-sdk/protocol-http":"lkWtc","@aws-sdk/smithy-client":"ats0l","uuid":"j4KJi","../models/DynamoDBServiceException":"fNTX9","../models/models_0":"6OiVg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jbco9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BatchGetItemCommand", ()=>BatchGetItemCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsJson10 = require("../protocols/Aws_json1_0");
class BatchGetItemCommand extends (0, _smithyClient.Command) {
    constructor(input){
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, BatchGetItemCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "BatchGetItemCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.BatchGetItemInputFilterSensitiveLog),
            outputFilterSensitiveLog: (0, _models0.BatchGetItemOutputFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsJson10.serializeAws_json1_0BatchGetItemCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsJson10.deserializeAws_json1_0BatchGetItemCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../models/models_0":"6OiVg","../protocols/Aws_json1_0":"2MtWi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fjdm8":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "BatchWriteItemCommand", ()=>BatchWriteItemCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsJson10 = require("../protocols/Aws_json1_0");
class BatchWriteItemCommand extends (0, _smithyClient.Command) {
    constructor(input){
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, BatchWriteItemCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "BatchWriteItemCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.BatchWriteItemInputFilterSensitiveLog),
            outputFilterSensitiveLog: (0, _models0.BatchWriteItemOutputFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsJson10.serializeAws_json1_0BatchWriteItemCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsJson10.deserializeAws_json1_0BatchWriteItemCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../models/models_0":"6OiVg","../protocols/Aws_json1_0":"2MtWi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ffw2W":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CreateBackupCommand", ()=>CreateBackupCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsJson10 = require("../protocols/Aws_json1_0");
class CreateBackupCommand extends (0, _smithyClient.Command) {
    constructor(input){
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, CreateBackupCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "CreateBackupCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.CreateBackupInputFilterSensitiveLog),
            outputFilterSensitiveLog: (0, _models0.CreateBackupOutputFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsJson10.serializeAws_json1_0CreateBackupCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsJson10.deserializeAws_json1_0CreateBackupCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../models/models_0":"6OiVg","../protocols/Aws_json1_0":"2MtWi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9m7Rs":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CreateGlobalTableCommand", ()=>CreateGlobalTableCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsJson10 = require("../protocols/Aws_json1_0");
class CreateGlobalTableCommand extends (0, _smithyClient.Command) {
    constructor(input){
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, CreateGlobalTableCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "CreateGlobalTableCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.CreateGlobalTableInputFilterSensitiveLog),
            outputFilterSensitiveLog: (0, _models0.CreateGlobalTableOutputFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsJson10.serializeAws_json1_0CreateGlobalTableCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsJson10.deserializeAws_json1_0CreateGlobalTableCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../models/models_0":"6OiVg","../protocols/Aws_json1_0":"2MtWi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5rbEF":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "CreateTableCommand", ()=>CreateTableCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsJson10 = require("../protocols/Aws_json1_0");
class CreateTableCommand extends (0, _smithyClient.Command) {
    constructor(input){
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, CreateTableCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "CreateTableCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.CreateTableInputFilterSensitiveLog),
            outputFilterSensitiveLog: (0, _models0.CreateTableOutputFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsJson10.serializeAws_json1_0CreateTableCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsJson10.deserializeAws_json1_0CreateTableCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../models/models_0":"6OiVg","../protocols/Aws_json1_0":"2MtWi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1VuvK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DeleteBackupCommand", ()=>DeleteBackupCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsJson10 = require("../protocols/Aws_json1_0");
class DeleteBackupCommand extends (0, _smithyClient.Command) {
    constructor(input){
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, DeleteBackupCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "DeleteBackupCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.DeleteBackupInputFilterSensitiveLog),
            outputFilterSensitiveLog: (0, _models0.DeleteBackupOutputFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsJson10.serializeAws_json1_0DeleteBackupCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsJson10.deserializeAws_json1_0DeleteBackupCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../models/models_0":"6OiVg","../protocols/Aws_json1_0":"2MtWi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dNZgc":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DeleteItemCommand", ()=>DeleteItemCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsJson10 = require("../protocols/Aws_json1_0");
class DeleteItemCommand extends (0, _smithyClient.Command) {
    constructor(input){
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, DeleteItemCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "DeleteItemCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.DeleteItemInputFilterSensitiveLog),
            outputFilterSensitiveLog: (0, _models0.DeleteItemOutputFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsJson10.serializeAws_json1_0DeleteItemCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsJson10.deserializeAws_json1_0DeleteItemCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../models/models_0":"6OiVg","../protocols/Aws_json1_0":"2MtWi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iDQo0":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DeleteTableCommand", ()=>DeleteTableCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsJson10 = require("../protocols/Aws_json1_0");
class DeleteTableCommand extends (0, _smithyClient.Command) {
    constructor(input){
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, DeleteTableCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "DeleteTableCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.DeleteTableInputFilterSensitiveLog),
            outputFilterSensitiveLog: (0, _models0.DeleteTableOutputFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsJson10.serializeAws_json1_0DeleteTableCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsJson10.deserializeAws_json1_0DeleteTableCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../models/models_0":"6OiVg","../protocols/Aws_json1_0":"2MtWi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"k9eTA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DescribeBackupCommand", ()=>DescribeBackupCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsJson10 = require("../protocols/Aws_json1_0");
class DescribeBackupCommand extends (0, _smithyClient.Command) {
    constructor(input){
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, DescribeBackupCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "DescribeBackupCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.DescribeBackupInputFilterSensitiveLog),
            outputFilterSensitiveLog: (0, _models0.DescribeBackupOutputFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsJson10.serializeAws_json1_0DescribeBackupCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsJson10.deserializeAws_json1_0DescribeBackupCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../models/models_0":"6OiVg","../protocols/Aws_json1_0":"2MtWi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"23EB3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DescribeContinuousBackupsCommand", ()=>DescribeContinuousBackupsCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsJson10 = require("../protocols/Aws_json1_0");
class DescribeContinuousBackupsCommand extends (0, _smithyClient.Command) {
    constructor(input){
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, DescribeContinuousBackupsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "DescribeContinuousBackupsCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.DescribeContinuousBackupsInputFilterSensitiveLog),
            outputFilterSensitiveLog: (0, _models0.DescribeContinuousBackupsOutputFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsJson10.serializeAws_json1_0DescribeContinuousBackupsCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsJson10.deserializeAws_json1_0DescribeContinuousBackupsCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../models/models_0":"6OiVg","../protocols/Aws_json1_0":"2MtWi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4Ohfm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DescribeContributorInsightsCommand", ()=>DescribeContributorInsightsCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsJson10 = require("../protocols/Aws_json1_0");
class DescribeContributorInsightsCommand extends (0, _smithyClient.Command) {
    constructor(input){
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, DescribeContributorInsightsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "DescribeContributorInsightsCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.DescribeContributorInsightsInputFilterSensitiveLog),
            outputFilterSensitiveLog: (0, _models0.DescribeContributorInsightsOutputFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsJson10.serializeAws_json1_0DescribeContributorInsightsCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsJson10.deserializeAws_json1_0DescribeContributorInsightsCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../models/models_0":"6OiVg","../protocols/Aws_json1_0":"2MtWi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dlVBr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DescribeEndpointsCommand", ()=>DescribeEndpointsCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsJson10 = require("../protocols/Aws_json1_0");
class DescribeEndpointsCommand extends (0, _smithyClient.Command) {
    constructor(input){
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, DescribeEndpointsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "DescribeEndpointsCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.DescribeEndpointsRequestFilterSensitiveLog),
            outputFilterSensitiveLog: (0, _models0.DescribeEndpointsResponseFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsJson10.serializeAws_json1_0DescribeEndpointsCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsJson10.deserializeAws_json1_0DescribeEndpointsCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../models/models_0":"6OiVg","../protocols/Aws_json1_0":"2MtWi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8mC4P":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DescribeExportCommand", ()=>DescribeExportCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsJson10 = require("../protocols/Aws_json1_0");
class DescribeExportCommand extends (0, _smithyClient.Command) {
    constructor(input){
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, DescribeExportCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "DescribeExportCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.DescribeExportInputFilterSensitiveLog),
            outputFilterSensitiveLog: (0, _models0.DescribeExportOutputFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsJson10.serializeAws_json1_0DescribeExportCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsJson10.deserializeAws_json1_0DescribeExportCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../models/models_0":"6OiVg","../protocols/Aws_json1_0":"2MtWi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"q8RCi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DescribeGlobalTableCommand", ()=>DescribeGlobalTableCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsJson10 = require("../protocols/Aws_json1_0");
class DescribeGlobalTableCommand extends (0, _smithyClient.Command) {
    constructor(input){
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, DescribeGlobalTableCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "DescribeGlobalTableCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.DescribeGlobalTableInputFilterSensitiveLog),
            outputFilterSensitiveLog: (0, _models0.DescribeGlobalTableOutputFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsJson10.serializeAws_json1_0DescribeGlobalTableCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsJson10.deserializeAws_json1_0DescribeGlobalTableCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../models/models_0":"6OiVg","../protocols/Aws_json1_0":"2MtWi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"a75QM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DescribeGlobalTableSettingsCommand", ()=>DescribeGlobalTableSettingsCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsJson10 = require("../protocols/Aws_json1_0");
class DescribeGlobalTableSettingsCommand extends (0, _smithyClient.Command) {
    constructor(input){
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, DescribeGlobalTableSettingsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "DescribeGlobalTableSettingsCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.DescribeGlobalTableSettingsInputFilterSensitiveLog),
            outputFilterSensitiveLog: (0, _models0.DescribeGlobalTableSettingsOutputFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsJson10.serializeAws_json1_0DescribeGlobalTableSettingsCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsJson10.deserializeAws_json1_0DescribeGlobalTableSettingsCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../models/models_0":"6OiVg","../protocols/Aws_json1_0":"2MtWi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"b7hlV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DescribeImportCommand", ()=>DescribeImportCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsJson10 = require("../protocols/Aws_json1_0");
class DescribeImportCommand extends (0, _smithyClient.Command) {
    constructor(input){
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, DescribeImportCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "DescribeImportCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.DescribeImportInputFilterSensitiveLog),
            outputFilterSensitiveLog: (0, _models0.DescribeImportOutputFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsJson10.serializeAws_json1_0DescribeImportCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsJson10.deserializeAws_json1_0DescribeImportCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../models/models_0":"6OiVg","../protocols/Aws_json1_0":"2MtWi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lto8R":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DescribeKinesisStreamingDestinationCommand", ()=>DescribeKinesisStreamingDestinationCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsJson10 = require("../protocols/Aws_json1_0");
class DescribeKinesisStreamingDestinationCommand extends (0, _smithyClient.Command) {
    constructor(input){
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, DescribeKinesisStreamingDestinationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "DescribeKinesisStreamingDestinationCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.DescribeKinesisStreamingDestinationInputFilterSensitiveLog),
            outputFilterSensitiveLog: (0, _models0.DescribeKinesisStreamingDestinationOutputFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsJson10.serializeAws_json1_0DescribeKinesisStreamingDestinationCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsJson10.deserializeAws_json1_0DescribeKinesisStreamingDestinationCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../models/models_0":"6OiVg","../protocols/Aws_json1_0":"2MtWi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4BVng":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DescribeLimitsCommand", ()=>DescribeLimitsCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsJson10 = require("../protocols/Aws_json1_0");
class DescribeLimitsCommand extends (0, _smithyClient.Command) {
    constructor(input){
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, DescribeLimitsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "DescribeLimitsCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.DescribeLimitsInputFilterSensitiveLog),
            outputFilterSensitiveLog: (0, _models0.DescribeLimitsOutputFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsJson10.serializeAws_json1_0DescribeLimitsCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsJson10.deserializeAws_json1_0DescribeLimitsCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../models/models_0":"6OiVg","../protocols/Aws_json1_0":"2MtWi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kVY8e":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DescribeTableCommand", ()=>DescribeTableCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsJson10 = require("../protocols/Aws_json1_0");
class DescribeTableCommand extends (0, _smithyClient.Command) {
    constructor(input){
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, DescribeTableCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "DescribeTableCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.DescribeTableInputFilterSensitiveLog),
            outputFilterSensitiveLog: (0, _models0.DescribeTableOutputFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsJson10.serializeAws_json1_0DescribeTableCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsJson10.deserializeAws_json1_0DescribeTableCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../models/models_0":"6OiVg","../protocols/Aws_json1_0":"2MtWi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dQqXy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DescribeTableReplicaAutoScalingCommand", ()=>DescribeTableReplicaAutoScalingCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsJson10 = require("../protocols/Aws_json1_0");
class DescribeTableReplicaAutoScalingCommand extends (0, _smithyClient.Command) {
    constructor(input){
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, DescribeTableReplicaAutoScalingCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "DescribeTableReplicaAutoScalingCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.DescribeTableReplicaAutoScalingInputFilterSensitiveLog),
            outputFilterSensitiveLog: (0, _models0.DescribeTableReplicaAutoScalingOutputFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsJson10.serializeAws_json1_0DescribeTableReplicaAutoScalingCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsJson10.deserializeAws_json1_0DescribeTableReplicaAutoScalingCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../models/models_0":"6OiVg","../protocols/Aws_json1_0":"2MtWi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eK0Cx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DescribeTimeToLiveCommand", ()=>DescribeTimeToLiveCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsJson10 = require("../protocols/Aws_json1_0");
class DescribeTimeToLiveCommand extends (0, _smithyClient.Command) {
    constructor(input){
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, DescribeTimeToLiveCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "DescribeTimeToLiveCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.DescribeTimeToLiveInputFilterSensitiveLog),
            outputFilterSensitiveLog: (0, _models0.DescribeTimeToLiveOutputFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsJson10.serializeAws_json1_0DescribeTimeToLiveCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsJson10.deserializeAws_json1_0DescribeTimeToLiveCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../models/models_0":"6OiVg","../protocols/Aws_json1_0":"2MtWi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hRQXM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DisableKinesisStreamingDestinationCommand", ()=>DisableKinesisStreamingDestinationCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsJson10 = require("../protocols/Aws_json1_0");
class DisableKinesisStreamingDestinationCommand extends (0, _smithyClient.Command) {
    constructor(input){
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, DisableKinesisStreamingDestinationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "DisableKinesisStreamingDestinationCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.KinesisStreamingDestinationInputFilterSensitiveLog),
            outputFilterSensitiveLog: (0, _models0.KinesisStreamingDestinationOutputFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsJson10.serializeAws_json1_0DisableKinesisStreamingDestinationCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsJson10.deserializeAws_json1_0DisableKinesisStreamingDestinationCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../models/models_0":"6OiVg","../protocols/Aws_json1_0":"2MtWi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iCptj":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "EnableKinesisStreamingDestinationCommand", ()=>EnableKinesisStreamingDestinationCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsJson10 = require("../protocols/Aws_json1_0");
class EnableKinesisStreamingDestinationCommand extends (0, _smithyClient.Command) {
    constructor(input){
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, EnableKinesisStreamingDestinationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "EnableKinesisStreamingDestinationCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.KinesisStreamingDestinationInputFilterSensitiveLog),
            outputFilterSensitiveLog: (0, _models0.KinesisStreamingDestinationOutputFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsJson10.serializeAws_json1_0EnableKinesisStreamingDestinationCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsJson10.deserializeAws_json1_0EnableKinesisStreamingDestinationCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../models/models_0":"6OiVg","../protocols/Aws_json1_0":"2MtWi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"drbaG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ExecuteStatementCommand", ()=>ExecuteStatementCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsJson10 = require("../protocols/Aws_json1_0");
class ExecuteStatementCommand extends (0, _smithyClient.Command) {
    constructor(input){
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, ExecuteStatementCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "ExecuteStatementCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.ExecuteStatementInputFilterSensitiveLog),
            outputFilterSensitiveLog: (0, _models0.ExecuteStatementOutputFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsJson10.serializeAws_json1_0ExecuteStatementCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsJson10.deserializeAws_json1_0ExecuteStatementCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../models/models_0":"6OiVg","../protocols/Aws_json1_0":"2MtWi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"kKuz4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ExecuteTransactionCommand", ()=>ExecuteTransactionCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsJson10 = require("../protocols/Aws_json1_0");
class ExecuteTransactionCommand extends (0, _smithyClient.Command) {
    constructor(input){
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, ExecuteTransactionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "ExecuteTransactionCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.ExecuteTransactionInputFilterSensitiveLog),
            outputFilterSensitiveLog: (0, _models0.ExecuteTransactionOutputFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsJson10.serializeAws_json1_0ExecuteTransactionCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsJson10.deserializeAws_json1_0ExecuteTransactionCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../models/models_0":"6OiVg","../protocols/Aws_json1_0":"2MtWi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"c1KeZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ExportTableToPointInTimeCommand", ()=>ExportTableToPointInTimeCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsJson10 = require("../protocols/Aws_json1_0");
class ExportTableToPointInTimeCommand extends (0, _smithyClient.Command) {
    constructor(input){
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, ExportTableToPointInTimeCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "ExportTableToPointInTimeCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.ExportTableToPointInTimeInputFilterSensitiveLog),
            outputFilterSensitiveLog: (0, _models0.ExportTableToPointInTimeOutputFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsJson10.serializeAws_json1_0ExportTableToPointInTimeCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsJson10.deserializeAws_json1_0ExportTableToPointInTimeCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../models/models_0":"6OiVg","../protocols/Aws_json1_0":"2MtWi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2nDTS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "GetItemCommand", ()=>GetItemCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsJson10 = require("../protocols/Aws_json1_0");
class GetItemCommand extends (0, _smithyClient.Command) {
    constructor(input){
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, GetItemCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "GetItemCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.GetItemInputFilterSensitiveLog),
            outputFilterSensitiveLog: (0, _models0.GetItemOutputFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsJson10.serializeAws_json1_0GetItemCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsJson10.deserializeAws_json1_0GetItemCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../models/models_0":"6OiVg","../protocols/Aws_json1_0":"2MtWi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fMp66":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ImportTableCommand", ()=>ImportTableCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsJson10 = require("../protocols/Aws_json1_0");
class ImportTableCommand extends (0, _smithyClient.Command) {
    constructor(input){
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, ImportTableCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "ImportTableCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.ImportTableInputFilterSensitiveLog),
            outputFilterSensitiveLog: (0, _models0.ImportTableOutputFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsJson10.serializeAws_json1_0ImportTableCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsJson10.deserializeAws_json1_0ImportTableCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../models/models_0":"6OiVg","../protocols/Aws_json1_0":"2MtWi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"bqSzJ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ListBackupsCommand", ()=>ListBackupsCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsJson10 = require("../protocols/Aws_json1_0");
class ListBackupsCommand extends (0, _smithyClient.Command) {
    constructor(input){
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, ListBackupsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "ListBackupsCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.ListBackupsInputFilterSensitiveLog),
            outputFilterSensitiveLog: (0, _models0.ListBackupsOutputFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsJson10.serializeAws_json1_0ListBackupsCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsJson10.deserializeAws_json1_0ListBackupsCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../models/models_0":"6OiVg","../protocols/Aws_json1_0":"2MtWi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2d7jp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ListContributorInsightsCommand", ()=>ListContributorInsightsCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsJson10 = require("../protocols/Aws_json1_0");
class ListContributorInsightsCommand extends (0, _smithyClient.Command) {
    constructor(input){
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, ListContributorInsightsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "ListContributorInsightsCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.ListContributorInsightsInputFilterSensitiveLog),
            outputFilterSensitiveLog: (0, _models0.ListContributorInsightsOutputFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsJson10.serializeAws_json1_0ListContributorInsightsCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsJson10.deserializeAws_json1_0ListContributorInsightsCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../models/models_0":"6OiVg","../protocols/Aws_json1_0":"2MtWi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3HosE":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ListExportsCommand", ()=>ListExportsCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsJson10 = require("../protocols/Aws_json1_0");
class ListExportsCommand extends (0, _smithyClient.Command) {
    constructor(input){
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, ListExportsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "ListExportsCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.ListExportsInputFilterSensitiveLog),
            outputFilterSensitiveLog: (0, _models0.ListExportsOutputFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsJson10.serializeAws_json1_0ListExportsCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsJson10.deserializeAws_json1_0ListExportsCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../models/models_0":"6OiVg","../protocols/Aws_json1_0":"2MtWi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"48EtG":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ListGlobalTablesCommand", ()=>ListGlobalTablesCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsJson10 = require("../protocols/Aws_json1_0");
class ListGlobalTablesCommand extends (0, _smithyClient.Command) {
    constructor(input){
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, ListGlobalTablesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "ListGlobalTablesCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.ListGlobalTablesInputFilterSensitiveLog),
            outputFilterSensitiveLog: (0, _models0.ListGlobalTablesOutputFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsJson10.serializeAws_json1_0ListGlobalTablesCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsJson10.deserializeAws_json1_0ListGlobalTablesCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../models/models_0":"6OiVg","../protocols/Aws_json1_0":"2MtWi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cNJcg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ListImportsCommand", ()=>ListImportsCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsJson10 = require("../protocols/Aws_json1_0");
class ListImportsCommand extends (0, _smithyClient.Command) {
    constructor(input){
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, ListImportsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "ListImportsCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.ListImportsInputFilterSensitiveLog),
            outputFilterSensitiveLog: (0, _models0.ListImportsOutputFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsJson10.serializeAws_json1_0ListImportsCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsJson10.deserializeAws_json1_0ListImportsCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../models/models_0":"6OiVg","../protocols/Aws_json1_0":"2MtWi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7dYH2":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ListTablesCommand", ()=>ListTablesCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsJson10 = require("../protocols/Aws_json1_0");
class ListTablesCommand extends (0, _smithyClient.Command) {
    constructor(input){
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, ListTablesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "ListTablesCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.ListTablesInputFilterSensitiveLog),
            outputFilterSensitiveLog: (0, _models0.ListTablesOutputFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsJson10.serializeAws_json1_0ListTablesCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsJson10.deserializeAws_json1_0ListTablesCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../models/models_0":"6OiVg","../protocols/Aws_json1_0":"2MtWi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"enYXb":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ListTagsOfResourceCommand", ()=>ListTagsOfResourceCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsJson10 = require("../protocols/Aws_json1_0");
class ListTagsOfResourceCommand extends (0, _smithyClient.Command) {
    constructor(input){
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, ListTagsOfResourceCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "ListTagsOfResourceCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.ListTagsOfResourceInputFilterSensitiveLog),
            outputFilterSensitiveLog: (0, _models0.ListTagsOfResourceOutputFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsJson10.serializeAws_json1_0ListTagsOfResourceCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsJson10.deserializeAws_json1_0ListTagsOfResourceCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../models/models_0":"6OiVg","../protocols/Aws_json1_0":"2MtWi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7Hj9z":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "PutItemCommand", ()=>PutItemCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsJson10 = require("../protocols/Aws_json1_0");
class PutItemCommand extends (0, _smithyClient.Command) {
    constructor(input){
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, PutItemCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "PutItemCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.PutItemInputFilterSensitiveLog),
            outputFilterSensitiveLog: (0, _models0.PutItemOutputFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsJson10.serializeAws_json1_0PutItemCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsJson10.deserializeAws_json1_0PutItemCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../models/models_0":"6OiVg","../protocols/Aws_json1_0":"2MtWi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1Y7ez":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "QueryCommand", ()=>QueryCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsJson10 = require("../protocols/Aws_json1_0");
class QueryCommand extends (0, _smithyClient.Command) {
    constructor(input){
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, QueryCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "QueryCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.QueryInputFilterSensitiveLog),
            outputFilterSensitiveLog: (0, _models0.QueryOutputFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsJson10.serializeAws_json1_0QueryCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsJson10.deserializeAws_json1_0QueryCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../models/models_0":"6OiVg","../protocols/Aws_json1_0":"2MtWi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"21gyH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "RestoreTableFromBackupCommand", ()=>RestoreTableFromBackupCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsJson10 = require("../protocols/Aws_json1_0");
class RestoreTableFromBackupCommand extends (0, _smithyClient.Command) {
    constructor(input){
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, RestoreTableFromBackupCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "RestoreTableFromBackupCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.RestoreTableFromBackupInputFilterSensitiveLog),
            outputFilterSensitiveLog: (0, _models0.RestoreTableFromBackupOutputFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsJson10.serializeAws_json1_0RestoreTableFromBackupCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsJson10.deserializeAws_json1_0RestoreTableFromBackupCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../models/models_0":"6OiVg","../protocols/Aws_json1_0":"2MtWi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"1dkoT":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "RestoreTableToPointInTimeCommand", ()=>RestoreTableToPointInTimeCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsJson10 = require("../protocols/Aws_json1_0");
class RestoreTableToPointInTimeCommand extends (0, _smithyClient.Command) {
    constructor(input){
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, RestoreTableToPointInTimeCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "RestoreTableToPointInTimeCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.RestoreTableToPointInTimeInputFilterSensitiveLog),
            outputFilterSensitiveLog: (0, _models0.RestoreTableToPointInTimeOutputFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsJson10.serializeAws_json1_0RestoreTableToPointInTimeCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsJson10.deserializeAws_json1_0RestoreTableToPointInTimeCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../models/models_0":"6OiVg","../protocols/Aws_json1_0":"2MtWi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"klZUL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ScanCommand", ()=>ScanCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsJson10 = require("../protocols/Aws_json1_0");
class ScanCommand extends (0, _smithyClient.Command) {
    constructor(input){
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, ScanCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "ScanCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.ScanInputFilterSensitiveLog),
            outputFilterSensitiveLog: (0, _models0.ScanOutputFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsJson10.serializeAws_json1_0ScanCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsJson10.deserializeAws_json1_0ScanCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../models/models_0":"6OiVg","../protocols/Aws_json1_0":"2MtWi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5Mq51":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TagResourceCommand", ()=>TagResourceCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsJson10 = require("../protocols/Aws_json1_0");
class TagResourceCommand extends (0, _smithyClient.Command) {
    constructor(input){
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, TagResourceCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "TagResourceCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.TagResourceInputFilterSensitiveLog),
            outputFilterSensitiveLog: (output)=>output
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsJson10.serializeAws_json1_0TagResourceCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsJson10.deserializeAws_json1_0TagResourceCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../models/models_0":"6OiVg","../protocols/Aws_json1_0":"2MtWi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"22zCR":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TransactGetItemsCommand", ()=>TransactGetItemsCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsJson10 = require("../protocols/Aws_json1_0");
class TransactGetItemsCommand extends (0, _smithyClient.Command) {
    constructor(input){
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, TransactGetItemsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "TransactGetItemsCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.TransactGetItemsInputFilterSensitiveLog),
            outputFilterSensitiveLog: (0, _models0.TransactGetItemsOutputFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsJson10.serializeAws_json1_0TransactGetItemsCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsJson10.deserializeAws_json1_0TransactGetItemsCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../models/models_0":"6OiVg","../protocols/Aws_json1_0":"2MtWi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fnEm7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "TransactWriteItemsCommand", ()=>TransactWriteItemsCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsJson10 = require("../protocols/Aws_json1_0");
class TransactWriteItemsCommand extends (0, _smithyClient.Command) {
    constructor(input){
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, TransactWriteItemsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "TransactWriteItemsCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.TransactWriteItemsInputFilterSensitiveLog),
            outputFilterSensitiveLog: (0, _models0.TransactWriteItemsOutputFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsJson10.serializeAws_json1_0TransactWriteItemsCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsJson10.deserializeAws_json1_0TransactWriteItemsCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../models/models_0":"6OiVg","../protocols/Aws_json1_0":"2MtWi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fxMFa":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "UntagResourceCommand", ()=>UntagResourceCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsJson10 = require("../protocols/Aws_json1_0");
class UntagResourceCommand extends (0, _smithyClient.Command) {
    constructor(input){
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, UntagResourceCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "UntagResourceCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.UntagResourceInputFilterSensitiveLog),
            outputFilterSensitiveLog: (output)=>output
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsJson10.serializeAws_json1_0UntagResourceCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsJson10.deserializeAws_json1_0UntagResourceCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../models/models_0":"6OiVg","../protocols/Aws_json1_0":"2MtWi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6GXpQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "UpdateContinuousBackupsCommand", ()=>UpdateContinuousBackupsCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsJson10 = require("../protocols/Aws_json1_0");
class UpdateContinuousBackupsCommand extends (0, _smithyClient.Command) {
    constructor(input){
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, UpdateContinuousBackupsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "UpdateContinuousBackupsCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.UpdateContinuousBackupsInputFilterSensitiveLog),
            outputFilterSensitiveLog: (0, _models0.UpdateContinuousBackupsOutputFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsJson10.serializeAws_json1_0UpdateContinuousBackupsCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsJson10.deserializeAws_json1_0UpdateContinuousBackupsCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../models/models_0":"6OiVg","../protocols/Aws_json1_0":"2MtWi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fj8ON":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "UpdateContributorInsightsCommand", ()=>UpdateContributorInsightsCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsJson10 = require("../protocols/Aws_json1_0");
class UpdateContributorInsightsCommand extends (0, _smithyClient.Command) {
    constructor(input){
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, UpdateContributorInsightsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "UpdateContributorInsightsCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.UpdateContributorInsightsInputFilterSensitiveLog),
            outputFilterSensitiveLog: (0, _models0.UpdateContributorInsightsOutputFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsJson10.serializeAws_json1_0UpdateContributorInsightsCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsJson10.deserializeAws_json1_0UpdateContributorInsightsCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../models/models_0":"6OiVg","../protocols/Aws_json1_0":"2MtWi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"k0g1H":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "UpdateGlobalTableCommand", ()=>UpdateGlobalTableCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsJson10 = require("../protocols/Aws_json1_0");
class UpdateGlobalTableCommand extends (0, _smithyClient.Command) {
    constructor(input){
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, UpdateGlobalTableCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "UpdateGlobalTableCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.UpdateGlobalTableInputFilterSensitiveLog),
            outputFilterSensitiveLog: (0, _models0.UpdateGlobalTableOutputFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsJson10.serializeAws_json1_0UpdateGlobalTableCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsJson10.deserializeAws_json1_0UpdateGlobalTableCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../models/models_0":"6OiVg","../protocols/Aws_json1_0":"2MtWi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"85Z97":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "UpdateGlobalTableSettingsCommand", ()=>UpdateGlobalTableSettingsCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsJson10 = require("../protocols/Aws_json1_0");
class UpdateGlobalTableSettingsCommand extends (0, _smithyClient.Command) {
    constructor(input){
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, UpdateGlobalTableSettingsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "UpdateGlobalTableSettingsCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.UpdateGlobalTableSettingsInputFilterSensitiveLog),
            outputFilterSensitiveLog: (0, _models0.UpdateGlobalTableSettingsOutputFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsJson10.serializeAws_json1_0UpdateGlobalTableSettingsCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsJson10.deserializeAws_json1_0UpdateGlobalTableSettingsCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../models/models_0":"6OiVg","../protocols/Aws_json1_0":"2MtWi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7VwWS":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "UpdateItemCommand", ()=>UpdateItemCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsJson10 = require("../protocols/Aws_json1_0");
class UpdateItemCommand extends (0, _smithyClient.Command) {
    constructor(input){
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, UpdateItemCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "UpdateItemCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.UpdateItemInputFilterSensitiveLog),
            outputFilterSensitiveLog: (0, _models0.UpdateItemOutputFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsJson10.serializeAws_json1_0UpdateItemCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsJson10.deserializeAws_json1_0UpdateItemCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../models/models_0":"6OiVg","../protocols/Aws_json1_0":"2MtWi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6KZkH":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "UpdateTableCommand", ()=>UpdateTableCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsJson10 = require("../protocols/Aws_json1_0");
class UpdateTableCommand extends (0, _smithyClient.Command) {
    constructor(input){
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, UpdateTableCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "UpdateTableCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.UpdateTableInputFilterSensitiveLog),
            outputFilterSensitiveLog: (0, _models0.UpdateTableOutputFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsJson10.serializeAws_json1_0UpdateTableCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsJson10.deserializeAws_json1_0UpdateTableCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../models/models_0":"6OiVg","../protocols/Aws_json1_0":"2MtWi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"giji1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "UpdateTableReplicaAutoScalingCommand", ()=>UpdateTableReplicaAutoScalingCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsJson10 = require("../protocols/Aws_json1_0");
class UpdateTableReplicaAutoScalingCommand extends (0, _smithyClient.Command) {
    constructor(input){
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, UpdateTableReplicaAutoScalingCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "UpdateTableReplicaAutoScalingCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.UpdateTableReplicaAutoScalingInputFilterSensitiveLog),
            outputFilterSensitiveLog: (0, _models0.UpdateTableReplicaAutoScalingOutputFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsJson10.serializeAws_json1_0UpdateTableReplicaAutoScalingCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsJson10.deserializeAws_json1_0UpdateTableReplicaAutoScalingCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../models/models_0":"6OiVg","../protocols/Aws_json1_0":"2MtWi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dhHr1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "UpdateTimeToLiveCommand", ()=>UpdateTimeToLiveCommand);
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareSerde = require("@aws-sdk/middleware-serde");
var _smithyClient = require("@aws-sdk/smithy-client");
var _models0 = require("../models/models_0");
var _awsJson10 = require("../protocols/Aws_json1_0");
class UpdateTimeToLiveCommand extends (0, _smithyClient.Command) {
    constructor(input){
        super();
        this.input = input;
    }
    static getEndpointParameterInstructions() {
        return {
            UseFIPS: {
                type: "builtInParams",
                name: "useFipsEndpoint"
            },
            Endpoint: {
                type: "builtInParams",
                name: "endpoint"
            },
            Region: {
                type: "builtInParams",
                name: "region"
            },
            UseDualStack: {
                type: "builtInParams",
                name: "useDualstackEndpoint"
            }
        };
    }
    resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, _middlewareSerde.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, _middlewareEndpoint.getEndpointPlugin)(configuration, UpdateTimeToLiveCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger  } = configuration;
        const clientName = "DynamoDBClient";
        const commandName = "UpdateTimeToLiveCommand";
        const handlerExecutionContext = {
            logger,
            clientName,
            commandName,
            inputFilterSensitiveLog: (0, _models0.UpdateTimeToLiveInputFilterSensitiveLog),
            outputFilterSensitiveLog: (0, _models0.UpdateTimeToLiveOutputFilterSensitiveLog)
        };
        const { requestHandler  } = configuration;
        return stack.resolve((request)=>requestHandler.handle(request.request, options || {}), handlerExecutionContext);
    }
    serialize(input, context) {
        return (0, _awsJson10.serializeAws_json1_0UpdateTimeToLiveCommand)(input, context);
    }
    deserialize(output, context) {
        return (0, _awsJson10.deserializeAws_json1_0UpdateTimeToLiveCommand)(output, context);
    }
}

},{"@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-serde":"jHrM0","@aws-sdk/smithy-client":"ats0l","../models/models_0":"6OiVg","../protocols/Aws_json1_0":"2MtWi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8WS72":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "DynamoDBClient", ()=>DynamoDBClient);
var _configResolver = require("@aws-sdk/config-resolver");
var _middlewareContentLength = require("@aws-sdk/middleware-content-length");
var _middlewareEndpoint = require("@aws-sdk/middleware-endpoint");
var _middlewareEndpointDiscovery = require("@aws-sdk/middleware-endpoint-discovery");
var _middlewareHostHeader = require("@aws-sdk/middleware-host-header");
var _middlewareLogger = require("@aws-sdk/middleware-logger");
var _middlewareRecursionDetection = require("@aws-sdk/middleware-recursion-detection");
var _middlewareRetry = require("@aws-sdk/middleware-retry");
var _middlewareSigning = require("@aws-sdk/middleware-signing");
var _middlewareUserAgent = require("@aws-sdk/middleware-user-agent");
var _smithyClient = require("@aws-sdk/smithy-client");
var _describeEndpointsCommand = require("./commands/DescribeEndpointsCommand");
var _endpointParameters = require("./endpoint/EndpointParameters");
var _runtimeConfig = require("./runtimeConfig");
class DynamoDBClient extends (0, _smithyClient.Client) {
    constructor(configuration){
        const _config_0 = (0, _runtimeConfig.getRuntimeConfig)(configuration);
        const _config_1 = (0, _endpointParameters.resolveClientEndpointParameters)(_config_0);
        const _config_2 = (0, _configResolver.resolveRegionConfig)(_config_1);
        const _config_3 = (0, _middlewareEndpoint.resolveEndpointConfig)(_config_2);
        const _config_4 = (0, _middlewareRetry.resolveRetryConfig)(_config_3);
        const _config_5 = (0, _middlewareHostHeader.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0, _middlewareSigning.resolveAwsAuthConfig)(_config_5);
        const _config_7 = (0, _middlewareUserAgent.resolveUserAgentConfig)(_config_6);
        const _config_8 = (0, _middlewareEndpointDiscovery.resolveEndpointDiscoveryConfig)(_config_7, {
            endpointDiscoveryCommandCtor: (0, _describeEndpointsCommand.DescribeEndpointsCommand)
        });
        super(_config_8);
        this.config = _config_8;
        this.middlewareStack.use((0, _middlewareRetry.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, _middlewareContentLength.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, _middlewareHostHeader.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, _middlewareLogger.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, _middlewareRecursionDetection.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0, _middlewareSigning.getAwsAuthPlugin)(this.config));
        this.middlewareStack.use((0, _middlewareUserAgent.getUserAgentPlugin)(this.config));
    }
    destroy() {
        super.destroy();
    }
}

},{"@aws-sdk/config-resolver":"2Zj28","@aws-sdk/middleware-content-length":"lrscz","@aws-sdk/middleware-endpoint":"2LyB3","@aws-sdk/middleware-endpoint-discovery":"dDYLr","@aws-sdk/middleware-host-header":"8vcXw","@aws-sdk/middleware-logger":"cyEdQ","@aws-sdk/middleware-recursion-detection":"eNPtz","@aws-sdk/middleware-retry":"iRfgc","@aws-sdk/middleware-signing":"apx8g","@aws-sdk/middleware-user-agent":"6uBwp","@aws-sdk/smithy-client":"ats0l","./commands/DescribeEndpointsCommand":"dlVBr","./endpoint/EndpointParameters":"8mHRz","./runtimeConfig":"lJIW1","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dDYLr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _configurations = require("./configurations");
parcelHelpers.exportAll(_configurations, exports);
var _getEndpointDiscoveryPlugin = require("./getEndpointDiscoveryPlugin");
parcelHelpers.exportAll(_getEndpointDiscoveryPlugin, exports);
var _resolveEndpointDiscoveryConfig = require("./resolveEndpointDiscoveryConfig");
parcelHelpers.exportAll(_resolveEndpointDiscoveryConfig, exports);

},{"./configurations":"2SRLd","./getEndpointDiscoveryPlugin":"6zmXV","./resolveEndpointDiscoveryConfig":"6HQpM","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2SRLd":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "NODE_ENDPOINT_DISCOVERY_CONFIG_OPTIONS", ()=>NODE_ENDPOINT_DISCOVERY_CONFIG_OPTIONS);
const ENV_ENDPOINT_DISCOVERY = [
    "AWS_ENABLE_ENDPOINT_DISCOVERY",
    "AWS_ENDPOINT_DISCOVERY_ENABLED"
];
const CONFIG_ENDPOINT_DISCOVERY = "endpoint_discovery_enabled";
const isFalsy = (value)=>[
        "false",
        "0"
    ].indexOf(value) >= 0;
const NODE_ENDPOINT_DISCOVERY_CONFIG_OPTIONS = {
    environmentVariableSelector: (env)=>{
        for(let i = 0; i < ENV_ENDPOINT_DISCOVERY.length; i++){
            const envKey = ENV_ENDPOINT_DISCOVERY[i];
            if (envKey in env) {
                const value = env[envKey];
                if (value === "") throw Error(`Environment variable ${envKey} can't be empty of undefined, got "${value}"`);
                return !isFalsy(value);
            }
        }
    },
    configFileSelector: (profile)=>{
        if (CONFIG_ENDPOINT_DISCOVERY in profile) {
            const value = profile[CONFIG_ENDPOINT_DISCOVERY];
            if (value === undefined) throw Error(`Shared config entry ${CONFIG_ENDPOINT_DISCOVERY} can't be undefined, got "${value}"`);
            return !isFalsy(value);
        }
    },
    default: undefined
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6zmXV":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "endpointDiscoveryMiddlewareOptions", ()=>endpointDiscoveryMiddlewareOptions);
parcelHelpers.export(exports, "getEndpointDiscoveryPlugin", ()=>getEndpointDiscoveryPlugin);
parcelHelpers.export(exports, "getEndpointDiscoveryRequiredPlugin", ()=>getEndpointDiscoveryRequiredPlugin);
parcelHelpers.export(exports, "getEndpointDiscoveryOptionalPlugin", ()=>getEndpointDiscoveryOptionalPlugin);
var _endpointDiscoveryMiddleware = require("./endpointDiscoveryMiddleware");
const endpointDiscoveryMiddlewareOptions = {
    name: "endpointDiscoveryMiddleware",
    step: "build",
    tags: [
        "ENDPOINT_DISCOVERY"
    ],
    override: true
};
const getEndpointDiscoveryPlugin = (pluginConfig, middlewareConfig)=>({
        applyToStack: (commandStack)=>{
            commandStack.add((0, _endpointDiscoveryMiddleware.endpointDiscoveryMiddleware)(pluginConfig, middlewareConfig), endpointDiscoveryMiddlewareOptions);
        }
    });
const getEndpointDiscoveryRequiredPlugin = (pluginConfig, middlewareConfig)=>({
        applyToStack: (commandStack)=>{
            commandStack.add((0, _endpointDiscoveryMiddleware.endpointDiscoveryMiddleware)(pluginConfig, {
                ...middlewareConfig,
                isDiscoveredEndpointRequired: true
            }), endpointDiscoveryMiddlewareOptions);
        }
    });
const getEndpointDiscoveryOptionalPlugin = (pluginConfig, middlewareConfig)=>({
        applyToStack: (commandStack)=>{
            commandStack.add((0, _endpointDiscoveryMiddleware.endpointDiscoveryMiddleware)(pluginConfig, {
                ...middlewareConfig,
                isDiscoveredEndpointRequired: false
            }), endpointDiscoveryMiddlewareOptions);
        }
    });

},{"./endpointDiscoveryMiddleware":"9IYnK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"9IYnK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "endpointDiscoveryMiddleware", ()=>endpointDiscoveryMiddleware);
var _protocolHttp = require("@aws-sdk/protocol-http");
var _getCacheKey = require("./getCacheKey");
var _updateDiscoveredEndpointInCache = require("./updateDiscoveredEndpointInCache");
const endpointDiscoveryMiddleware = (config, middlewareConfig)=>(next, context)=>async (args)=>{
            if (config.isCustomEndpoint) {
                if (config.isClientEndpointDiscoveryEnabled) throw new Error(`Custom endpoint is supplied; endpointDiscoveryEnabled must not be true.`);
                return next(args);
            }
            const { endpointDiscoveryCommandCtor  } = config;
            const { isDiscoveredEndpointRequired , identifiers  } = middlewareConfig;
            const { clientName , commandName  } = context;
            const isEndpointDiscoveryEnabled = await config.endpointDiscoveryEnabled();
            const cacheKey = await (0, _getCacheKey.getCacheKey)(commandName, config, {
                identifiers
            });
            if (isDiscoveredEndpointRequired) {
                if (isEndpointDiscoveryEnabled === false) throw new Error(`Endpoint Discovery is disabled but ${commandName} on ${clientName} requires it.` + ` Please check your configurations.`);
                await (0, _updateDiscoveredEndpointInCache.updateDiscoveredEndpointInCache)(config, {
                    ...middlewareConfig,
                    commandName,
                    cacheKey,
                    endpointDiscoveryCommandCtor
                });
            } else if (isEndpointDiscoveryEnabled) (0, _updateDiscoveredEndpointInCache.updateDiscoveredEndpointInCache)(config, {
                ...middlewareConfig,
                commandName,
                cacheKey,
                endpointDiscoveryCommandCtor
            });
            const { request  } = args;
            if (cacheKey && (0, _protocolHttp.HttpRequest).isInstance(request)) {
                const endpoint = config.endpointCache.getEndpoint(cacheKey);
                if (endpoint) request.hostname = endpoint;
            }
            return next(args);
        };

},{"@aws-sdk/protocol-http":"lkWtc","./getCacheKey":"3Qsd5","./updateDiscoveredEndpointInCache":"8MkiZ","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3Qsd5":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getCacheKey", ()=>getCacheKey);
const getCacheKey = async (commandName, config, options)=>{
    const { accessKeyId  } = await config.credentials();
    const { identifiers  } = options;
    return JSON.stringify({
        ...accessKeyId && {
            accessKeyId
        },
        ...identifiers && {
            commandName,
            identifiers: Object.entries(identifiers).sort().reduce((acc, [key, value])=>({
                    ...acc,
                    [key]: value
                }), {})
        }
    });
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"8MkiZ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "updateDiscoveredEndpointInCache", ()=>updateDiscoveredEndpointInCache);
const requestQueue = {};
const updateDiscoveredEndpointInCache = async (config, options)=>new Promise((resolve, reject)=>{
        const { endpointCache  } = config;
        const { cacheKey , commandName , identifiers  } = options;
        const endpoints = endpointCache.get(cacheKey);
        if (endpoints && endpoints.length === 1 && endpoints[0].Address === "") {
            if (options.isDiscoveredEndpointRequired) {
                if (!requestQueue[cacheKey]) requestQueue[cacheKey] = [];
                requestQueue[cacheKey].push({
                    resolve,
                    reject
                });
            } else resolve();
        } else if (endpoints && endpoints.length > 0) resolve();
        else {
            const placeholderEndpoints = [
                {
                    Address: "",
                    CachePeriodInMinutes: 1
                }
            ];
            endpointCache.set(cacheKey, placeholderEndpoints);
            const command = new options.endpointDiscoveryCommandCtor({
                Operation: commandName.slice(0, -7),
                Identifiers: identifiers
            });
            const handler = command.resolveMiddleware(options.clientStack, config, options.options);
            handler(command).then((result)=>{
                endpointCache.set(cacheKey, result.output.Endpoints);
                if (requestQueue[cacheKey]) {
                    requestQueue[cacheKey].forEach(({ resolve  })=>{
                        resolve();
                    });
                    delete requestQueue[cacheKey];
                }
                resolve();
            }).catch((error)=>{
                endpointCache.delete(cacheKey);
                const errorToThrow = Object.assign(new Error(`The operation to discover endpoint failed.` + ` Please retry, or provide a custom endpoint and disable endpoint discovery to proceed.`), {
                    reason: error
                });
                if (requestQueue[cacheKey]) {
                    requestQueue[cacheKey].forEach(({ reject  })=>{
                        reject(errorToThrow);
                    });
                    delete requestQueue[cacheKey];
                }
                if (options.isDiscoveredEndpointRequired) reject(errorToThrow);
                else {
                    endpointCache.set(cacheKey, placeholderEndpoints);
                    resolve();
                }
            });
        }
    });

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6HQpM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "resolveEndpointDiscoveryConfig", ()=>resolveEndpointDiscoveryConfig);
var _endpointCache = require("@aws-sdk/endpoint-cache");
const resolveEndpointDiscoveryConfig = (input, { endpointDiscoveryCommandCtor  })=>({
        ...input,
        endpointDiscoveryCommandCtor,
        endpointCache: new (0, _endpointCache.EndpointCache)(input.endpointCacheSize ?? 1000),
        endpointDiscoveryEnabled: input.endpointDiscoveryEnabled !== undefined ? ()=>Promise.resolve(input.endpointDiscoveryEnabled) : input.endpointDiscoveryEnabledProvider,
        isClientEndpointDiscoveryEnabled: input.endpointDiscoveryEnabled !== undefined
    });

},{"@aws-sdk/endpoint-cache":"6usKv","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6usKv":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _endpoint = require("./Endpoint");
parcelHelpers.exportAll(_endpoint, exports);
var _endpointCache = require("./EndpointCache");
parcelHelpers.exportAll(_endpointCache, exports);

},{"./Endpoint":"iutUg","./EndpointCache":"igwKK","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"iutUg":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"igwKK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "EndpointCache", ()=>EndpointCache);
var _lruCache = require("mnemonist/lru-cache");
var _lruCacheDefault = parcelHelpers.interopDefault(_lruCache);
class EndpointCache {
    constructor(capacity){
        this.cache = new (0, _lruCacheDefault.default)(capacity);
    }
    getEndpoint(key) {
        const endpointsWithExpiry = this.get(key);
        if (!endpointsWithExpiry || endpointsWithExpiry.length === 0) return undefined;
        const endpoints = endpointsWithExpiry.map((endpoint)=>endpoint.Address);
        return endpoints[Math.floor(Math.random() * endpoints.length)];
    }
    get(key) {
        if (!this.has(key)) return;
        const value = this.cache.get(key);
        if (!value) return;
        const now = Date.now();
        const endpointsWithExpiry = value.filter((endpoint)=>now < endpoint.Expires);
        if (endpointsWithExpiry.length === 0) {
            this.delete(key);
            return undefined;
        }
        return endpointsWithExpiry;
    }
    set(key, endpoints) {
        const now = Date.now();
        this.cache.set(key, endpoints.map(({ Address , CachePeriodInMinutes  })=>({
                Address,
                Expires: now + CachePeriodInMinutes * 60000
            })));
    }
    delete(key) {
        this.cache.set(key, []);
    }
    has(key) {
        if (!this.cache.has(key)) return false;
        const endpoints = this.cache.peek(key);
        if (!endpoints) return false;
        return endpoints.length > 0;
    }
    clear() {
        this.cache.clear();
    }
}

},{"mnemonist/lru-cache":"2RXod","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2RXod":[function(require,module,exports) {
/**
 * Mnemonist LRUCache
 * ===================
 *
 * JavaScript implementation of the LRU Cache data structure. To save up
 * memory and allocations this implementation represents its underlying
 * doubly-linked list as static arrays and pointers. Thus, memory is allocated
 * only once at instantiation and JS objects are never created to serve as
 * pointers. This also means this implementation does not trigger too many
 * garbage collections.
 *
 * Note that to save up memory, a LRU Cache can be implemented using a singly
 * linked list by storing predecessors' pointers as hashmap values.
 * However, this means more hashmap lookups and would probably slow the whole
 * thing down. What's more, pointers are not the things taking most space in
 * memory.
 */ var Iterator = require("obliterator/iterator"), forEach = require("obliterator/foreach"), typed = require("./utils/typed-arrays.js"), iterables = require("./utils/iterables.js");
/**
 * LRUCache.
 *
 * @constructor
 * @param {function} Keys     - Array class for storing keys.
 * @param {function} Values   - Array class for storing values.
 * @param {number}   capacity - Desired capacity.
 */ function LRUCache(Keys, Values, capacity) {
    if (arguments.length < 2) {
        capacity = Keys;
        Keys = null;
        Values = null;
    }
    this.capacity = capacity;
    if (typeof this.capacity !== "number" || this.capacity <= 0) throw new Error("mnemonist/lru-cache: capacity should be positive number.");
    var PointerArray = typed.getPointerArray(capacity);
    this.forward = new PointerArray(capacity);
    this.backward = new PointerArray(capacity);
    this.K = typeof Keys === "function" ? new Keys(capacity) : new Array(capacity);
    this.V = typeof Values === "function" ? new Values(capacity) : new Array(capacity);
    // Properties
    this.size = 0;
    this.head = 0;
    this.tail = 0;
    this.items = {};
}
/**
 * Method used to clear the structure.
 *
 * @return {undefined}
 */ LRUCache.prototype.clear = function() {
    this.size = 0;
    this.head = 0;
    this.tail = 0;
    this.items = {};
};
/**
 * Method used to splay a value on top.
 *
 * @param  {number}   pointer - Pointer of the value to splay on top.
 * @return {LRUCache}
 */ LRUCache.prototype.splayOnTop = function(pointer) {
    var oldHead = this.head;
    if (this.head === pointer) return this;
    var previous = this.backward[pointer], next = this.forward[pointer];
    if (this.tail === pointer) this.tail = previous;
    else this.backward[next] = previous;
    this.forward[previous] = next;
    this.backward[oldHead] = pointer;
    this.head = pointer;
    this.forward[pointer] = oldHead;
    return this;
};
/**
 * Method used to set the value for the given key in the cache.
 *
 * @param  {any} key   - Key.
 * @param  {any} value - Value.
 * @return {undefined}
 */ LRUCache.prototype.set = function(key, value) {
    // The key already exists, we just need to update the value and splay on top
    var pointer = this.items[key];
    if (typeof pointer !== "undefined") {
        this.splayOnTop(pointer);
        this.V[pointer] = value;
        return;
    }
    // The cache is not yet full
    if (this.size < this.capacity) pointer = this.size++;
    else {
        pointer = this.tail;
        this.tail = this.backward[pointer];
        delete this.items[this.K[pointer]];
    }
    // Storing key & value
    this.items[key] = pointer;
    this.K[pointer] = key;
    this.V[pointer] = value;
    // Moving the item at the front of the list
    this.forward[pointer] = this.head;
    this.backward[this.head] = pointer;
    this.head = pointer;
};
/**
 * Method used to set the value for the given key in the cache
 *
 * @param  {any} key   - Key.
 * @param  {any} value - Value.
 * @return {{evicted: boolean, key: any, value: any}} An object containing the
 * key and value of an item that was overwritten or evicted in the set
 * operation, as well as a boolean indicating whether it was evicted due to
 * limited capacity. Return value is null if nothing was evicted or overwritten
 * during the set operation.
 */ LRUCache.prototype.setpop = function(key, value) {
    var oldValue = null;
    var oldKey = null;
    // The key already exists, we just need to update the value and splay on top
    var pointer = this.items[key];
    if (typeof pointer !== "undefined") {
        this.splayOnTop(pointer);
        oldValue = this.V[pointer];
        this.V[pointer] = value;
        return {
            evicted: false,
            key: key,
            value: oldValue
        };
    }
    // The cache is not yet full
    if (this.size < this.capacity) pointer = this.size++;
    else {
        pointer = this.tail;
        this.tail = this.backward[pointer];
        oldValue = this.V[pointer];
        oldKey = this.K[pointer];
        delete this.items[this.K[pointer]];
    }
    // Storing key & value
    this.items[key] = pointer;
    this.K[pointer] = key;
    this.V[pointer] = value;
    // Moving the item at the front of the list
    this.forward[pointer] = this.head;
    this.backward[this.head] = pointer;
    this.head = pointer;
    // Return object if eviction took place, otherwise return null
    if (oldKey) return {
        evicted: true,
        key: oldKey,
        value: oldValue
    };
    else return null;
};
/**
 * Method used to check whether the key exists in the cache.
 *
 * @param  {any} key   - Key.
 * @return {boolean}
 */ LRUCache.prototype.has = function(key) {
    return key in this.items;
};
/**
 * Method used to get the value attached to the given key. Will move the
 * related key to the front of the underlying linked list.
 *
 * @param  {any} key   - Key.
 * @return {any}
 */ LRUCache.prototype.get = function(key) {
    var pointer = this.items[key];
    if (typeof pointer === "undefined") return;
    this.splayOnTop(pointer);
    return this.V[pointer];
};
/**
 * Method used to get the value attached to the given key. Does not modify
 * the ordering of the underlying linked list.
 *
 * @param  {any} key   - Key.
 * @return {any}
 */ LRUCache.prototype.peek = function(key) {
    var pointer = this.items[key];
    if (typeof pointer === "undefined") return;
    return this.V[pointer];
};
/**
 * Method used to iterate over the cache's entries using a callback.
 *
 * @param  {function}  callback - Function to call for each item.
 * @param  {object}    scope    - Optional scope.
 * @return {undefined}
 */ LRUCache.prototype.forEach = function(callback, scope) {
    scope = arguments.length > 1 ? scope : this;
    var i = 0, l = this.size;
    var pointer = this.head, keys = this.K, values = this.V, forward = this.forward;
    while(i < l){
        callback.call(scope, values[pointer], keys[pointer], this);
        pointer = forward[pointer];
        i++;
    }
};
/**
 * Method used to create an iterator over the cache's keys from most
 * recently used to least recently used.
 *
 * @return {Iterator}
 */ LRUCache.prototype.keys = function() {
    var i = 0, l = this.size;
    var pointer = this.head, keys = this.K, forward = this.forward;
    return new Iterator(function() {
        if (i >= l) return {
            done: true
        };
        var key = keys[pointer];
        i++;
        if (i < l) pointer = forward[pointer];
        return {
            done: false,
            value: key
        };
    });
};
/**
 * Method used to create an iterator over the cache's values from most
 * recently used to least recently used.
 *
 * @return {Iterator}
 */ LRUCache.prototype.values = function() {
    var i = 0, l = this.size;
    var pointer = this.head, values = this.V, forward = this.forward;
    return new Iterator(function() {
        if (i >= l) return {
            done: true
        };
        var value = values[pointer];
        i++;
        if (i < l) pointer = forward[pointer];
        return {
            done: false,
            value: value
        };
    });
};
/**
 * Method used to create an iterator over the cache's entries from most
 * recently used to least recently used.
 *
 * @return {Iterator}
 */ LRUCache.prototype.entries = function() {
    var i = 0, l = this.size;
    var pointer = this.head, keys = this.K, values = this.V, forward = this.forward;
    return new Iterator(function() {
        if (i >= l) return {
            done: true
        };
        var key = keys[pointer], value = values[pointer];
        i++;
        if (i < l) pointer = forward[pointer];
        return {
            done: false,
            value: [
                key,
                value
            ]
        };
    });
};
/**
 * Attaching the #.entries method to Symbol.iterator if possible.
 */ if (typeof Symbol !== "undefined") LRUCache.prototype[Symbol.iterator] = LRUCache.prototype.entries;
/**
 * Convenience known methods.
 */ LRUCache.prototype.inspect = function() {
    var proxy = new Map();
    var iterator = this.entries(), step;
    while(step = iterator.next(), !step.done)proxy.set(step.value[0], step.value[1]);
    // Trick so that node displays the name of the constructor
    Object.defineProperty(proxy, "constructor", {
        value: LRUCache,
        enumerable: false
    });
    return proxy;
};
if (typeof Symbol !== "undefined") LRUCache.prototype[Symbol.for("nodejs.util.inspect.custom")] = LRUCache.prototype.inspect;
/**
 * Static @.from function taking an arbitrary iterable & converting it into
 * a structure.
 *
 * @param  {Iterable} iterable - Target iterable.
 * @param  {function} Keys     - Array class for storing keys.
 * @param  {function} Values   - Array class for storing values.
 * @param  {number}   capacity - Cache's capacity.
 * @return {LRUCache}
 */ LRUCache.from = function(iterable, Keys, Values, capacity) {
    if (arguments.length < 2) {
        capacity = iterables.guessLength(iterable);
        if (typeof capacity !== "number") throw new Error("mnemonist/lru-cache.from: could not guess iterable length. Please provide desired capacity as last argument.");
    } else if (arguments.length === 2) {
        capacity = Keys;
        Keys = null;
        Values = null;
    }
    var cache = new LRUCache(Keys, Values, capacity);
    forEach(iterable, function(value, key) {
        cache.set(key, value);
    });
    return cache;
};
/**
 * Exporting.
 */ module.exports = LRUCache;

},{"obliterator/iterator":"4WmdM","obliterator/foreach":"eUx84","./utils/typed-arrays.js":"kAckT","./utils/iterables.js":"aD4bm"}],"4WmdM":[function(require,module,exports) {
/**
 * Obliterator Iterator Class
 * ===========================
 *
 * Simple class representing the library's iterators.
 */ /**
 * Iterator class.
 *
 * @constructor
 * @param {function} next - Next function.
 */ function Iterator(next) {
    // Hiding the given function
    Object.defineProperty(this, "_next", {
        writable: false,
        enumerable: false,
        value: next
    });
    // Is the iterator complete?
    this.done = false;
}
/**
 * Next function.
 *
 * @return {object}
 */ // NOTE: maybe this should dropped for performance?
Iterator.prototype.next = function() {
    if (this.done) return {
        done: true
    };
    var step = this._next();
    if (step.done) this.done = true;
    return step;
};
/**
 * If symbols are supported, we add `next` to `Symbol.iterator`.
 */ if (typeof Symbol !== "undefined") Iterator.prototype[Symbol.iterator] = function() {
    return this;
};
/**
 * Returning an iterator of the given values.
 *
 * @param  {any...} values - Values.
 * @return {Iterator}
 */ Iterator.of = function() {
    var args = arguments, l = args.length, i = 0;
    return new Iterator(function() {
        if (i >= l) return {
            done: true
        };
        return {
            done: false,
            value: args[i++]
        };
    });
};
/**
 * Returning an empty iterator.
 *
 * @return {Iterator}
 */ Iterator.empty = function() {
    var iterator = new Iterator(null);
    iterator.done = true;
    return iterator;
};
/**
 * Returning whether the given value is an iterator.
 *
 * @param  {any} value - Value.
 * @return {boolean}
 */ Iterator.is = function(value) {
    if (value instanceof Iterator) return true;
    return typeof value === "object" && value !== null && typeof value.next === "function";
};
/**
 * Exporting.
 */ module.exports = Iterator;

},{}],"eUx84":[function(require,module,exports) {
/**
 * Obliterator ForEach Function
 * =============================
 *
 * Helper function used to easily iterate over mixed values.
 */ /**
 * Constants.
 */ var ARRAY_BUFFER_SUPPORT = typeof ArrayBuffer !== "undefined", SYMBOL_SUPPORT = typeof Symbol !== "undefined";
/**
 * Function able to iterate over almost any iterable JS value.
 *
 * @param  {any}      iterable - Iterable value.
 * @param  {function} callback - Callback function.
 */ function forEach(iterable, callback) {
    var iterator, k, i, l, s;
    if (!iterable) throw new Error("obliterator/forEach: invalid iterable.");
    if (typeof callback !== "function") throw new Error("obliterator/forEach: expecting a callback.");
    // The target is an array or a string or function arguments
    if (Array.isArray(iterable) || ARRAY_BUFFER_SUPPORT && ArrayBuffer.isView(iterable) || typeof iterable === "string" || iterable.toString() === "[object Arguments]") {
        for(i = 0, l = iterable.length; i < l; i++)callback(iterable[i], i);
        return;
    }
    // The target has a #.forEach method
    if (typeof iterable.forEach === "function") {
        iterable.forEach(callback);
        return;
    }
    // The target is iterable
    if (SYMBOL_SUPPORT && Symbol.iterator in iterable && typeof iterable.next !== "function") iterable = iterable[Symbol.iterator]();
    // The target is an iterator
    if (typeof iterable.next === "function") {
        iterator = iterable;
        i = 0;
        while(s = iterator.next(), s.done !== true){
            callback(s.value, i);
            i++;
        }
        return;
    }
    // The target is a plain object
    for(k in iterable)if (iterable.hasOwnProperty(k)) callback(iterable[k], k);
    return;
}
/**
 * Same function as the above `forEach` but will yield `null` when the target
 * does not have keys.
 *
 * @param  {any}      iterable - Iterable value.
 * @param  {function} callback - Callback function.
 */ forEach.forEachWithNullKeys = function(iterable, callback) {
    var iterator, k, i, l, s;
    if (!iterable) throw new Error("obliterator/forEachWithNullKeys: invalid iterable.");
    if (typeof callback !== "function") throw new Error("obliterator/forEachWithNullKeys: expecting a callback.");
    // The target is an array or a string or function arguments
    if (Array.isArray(iterable) || ARRAY_BUFFER_SUPPORT && ArrayBuffer.isView(iterable) || typeof iterable === "string" || iterable.toString() === "[object Arguments]") {
        for(i = 0, l = iterable.length; i < l; i++)callback(iterable[i], null);
        return;
    }
    // The target is a Set
    if (iterable instanceof Set) {
        iterable.forEach(function(value) {
            callback(value, null);
        });
        return;
    }
    // The target has a #.forEach method
    if (typeof iterable.forEach === "function") {
        iterable.forEach(callback);
        return;
    }
    // The target is iterable
    if (SYMBOL_SUPPORT && Symbol.iterator in iterable && typeof iterable.next !== "function") iterable = iterable[Symbol.iterator]();
    // The target is an iterator
    if (typeof iterable.next === "function") {
        iterator = iterable;
        i = 0;
        while(s = iterator.next(), s.done !== true){
            callback(s.value, null);
            i++;
        }
        return;
    }
    // The target is a plain object
    for(k in iterable)if (iterable.hasOwnProperty(k)) callback(iterable[k], k);
    return;
};
/**
 * Exporting.
 */ module.exports = forEach;

},{}],"kAckT":[function(require,module,exports) {
/**
 * Mnemonist Typed Array Helpers
 * ==============================
 *
 * Miscellaneous helpers related to typed arrays.
 */ /**
 * When using an unsigned integer array to store pointers, one might want to
 * choose the optimal word size in regards to the actual numbers of pointers
 * to store.
 *
 * This helpers does just that.
 *
 * @param  {number} size - Expected size of the array to map.
 * @return {TypedArray}
 */ var MAX_8BIT_INTEGER = Math.pow(2, 8) - 1, MAX_16BIT_INTEGER = Math.pow(2, 16) - 1, MAX_32BIT_INTEGER = Math.pow(2, 32) - 1;
var MAX_SIGNED_8BIT_INTEGER = Math.pow(2, 7) - 1, MAX_SIGNED_16BIT_INTEGER = Math.pow(2, 15) - 1, MAX_SIGNED_32BIT_INTEGER = Math.pow(2, 31) - 1;
exports.getPointerArray = function(size) {
    var maxIndex = size - 1;
    if (maxIndex <= MAX_8BIT_INTEGER) return Uint8Array;
    if (maxIndex <= MAX_16BIT_INTEGER) return Uint16Array;
    if (maxIndex <= MAX_32BIT_INTEGER) return Uint32Array;
    return Float64Array;
};
exports.getSignedPointerArray = function(size) {
    var maxIndex = size - 1;
    if (maxIndex <= MAX_SIGNED_8BIT_INTEGER) return Int8Array;
    if (maxIndex <= MAX_SIGNED_16BIT_INTEGER) return Int16Array;
    if (maxIndex <= MAX_SIGNED_32BIT_INTEGER) return Int32Array;
    return Float64Array;
};
/**
 * Function returning the minimal type able to represent the given number.
 *
 * @param  {number} value - Value to test.
 * @return {TypedArrayClass}
 */ exports.getNumberType = function(value) {
    // <= 32 bits itnteger?
    if (value === (value | 0)) {
        // Negative
        if (Math.sign(value) === -1) {
            if (value <= 127 && value >= -128) return Int8Array;
            if (value <= 32767 && value >= -32768) return Int16Array;
            return Int32Array;
        } else {
            if (value <= 255) return Uint8Array;
            if (value <= 65535) return Uint16Array;
            return Uint32Array;
        }
    }
    // 53 bits integer & floats
    // NOTE: it's kinda hard to tell whether we could use 32bits or not...
    return Float64Array;
};
/**
 * Function returning the minimal type able to represent the given array
 * of JavaScript numbers.
 *
 * @param  {array}    array  - Array to represent.
 * @param  {function} getter - Optional getter.
 * @return {TypedArrayClass}
 */ var TYPE_PRIORITY = {
    Uint8Array: 1,
    Int8Array: 2,
    Uint16Array: 3,
    Int16Array: 4,
    Uint32Array: 5,
    Int32Array: 6,
    Float32Array: 7,
    Float64Array: 8
};
// TODO: make this a one-shot for one value
exports.getMinimalRepresentation = function(array, getter) {
    var maxType = null, maxPriority = 0, p, t, v, i, l;
    for(i = 0, l = array.length; i < l; i++){
        v = getter ? getter(array[i]) : array[i];
        t = exports.getNumberType(v);
        p = TYPE_PRIORITY[t.name];
        if (p > maxPriority) {
            maxPriority = p;
            maxType = t;
        }
    }
    return maxType;
};
/**
 * Function returning whether the given value is a typed array.
 *
 * @param  {any} value - Value to test.
 * @return {boolean}
 */ exports.isTypedArray = function(value) {
    return typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView(value);
};
/**
 * Function used to concat byte arrays.
 *
 * @param  {...ByteArray}
 * @return {ByteArray}
 */ exports.concat = function() {
    var length = 0, i, o, l;
    for(i = 0, l = arguments.length; i < l; i++)length += arguments[i].length;
    var array = new arguments[0].constructor(length);
    for(i = 0, o = 0; i < l; i++){
        array.set(arguments[i], o);
        o += arguments[i].length;
    }
    return array;
};
/**
 * Function used to initialize a byte array of indices.
 *
 * @param  {number}    length - Length of target.
 * @return {ByteArray}
 */ exports.indices = function(length) {
    var PointerArray = exports.getPointerArray(length);
    var array = new PointerArray(length);
    for(var i = 0; i < length; i++)array[i] = i;
    return array;
};

},{}],"aD4bm":[function(require,module,exports) {
/**
 * Mnemonist Iterable Function
 * ============================
 *
 * Harmonized iteration helpers over mixed iterable targets.
 */ var forEach = require("obliterator/foreach");
var typed = require("./typed-arrays.js");
/**
 * Function used to determine whether the given object supports array-like
 * random access.
 *
 * @param  {any} target - Target object.
 * @return {boolean}
 */ function isArrayLike(target) {
    return Array.isArray(target) || typed.isTypedArray(target);
}
/**
 * Function used to guess the length of the structure over which we are going
 * to iterate.
 *
 * @param  {any} target - Target object.
 * @return {number|undefined}
 */ function guessLength(target) {
    if (typeof target.length === "number") return target.length;
    if (typeof target.size === "number") return target.size;
    return;
}
/**
 * Function used to convert an iterable to an array.
 *
 * @param  {any}   target - Iteration target.
 * @return {array}
 */ function toArray(target) {
    var l = guessLength(target);
    var array = typeof l === "number" ? new Array(l) : [];
    var i = 0;
    // TODO: we could optimize when given target is array like
    forEach(target, function(value) {
        array[i++] = value;
    });
    return array;
}
/**
 * Same as above but returns a supplementary indices array.
 *
 * @param  {any}   target - Iteration target.
 * @return {array}
 */ function toArrayWithIndices(target) {
    var l = guessLength(target);
    var IndexArray = typeof l === "number" ? typed.getPointerArray(l) : Array;
    var array = typeof l === "number" ? new Array(l) : [];
    var indices = typeof l === "number" ? new IndexArray(l) : [];
    var i = 0;
    // TODO: we could optimize when given target is array like
    forEach(target, function(value) {
        array[i] = value;
        indices[i] = i++;
    });
    return [
        array,
        indices
    ];
}
/**
 * Exporting.
 */ exports.isArrayLike = isArrayLike;
exports.guessLength = guessLength;
exports.toArray = toArray;
exports.toArrayWithIndices = toArrayWithIndices;

},{"obliterator/foreach":"eUx84","./typed-arrays.js":"kAckT"}],"8mHRz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "resolveClientEndpointParameters", ()=>resolveClientEndpointParameters);
const resolveClientEndpointParameters = (options)=>{
    return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "dynamodb"
    };
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lJIW1":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getRuntimeConfig", ()=>getRuntimeConfig);
var _packageJson = require("../package.json");
var _packageJsonDefault = parcelHelpers.interopDefault(_packageJson);
var _sha256Browser = require("@aws-crypto/sha256-browser");
var _configResolver = require("@aws-sdk/config-resolver");
var _fetchHttpHandler = require("@aws-sdk/fetch-http-handler");
var _invalidDependency = require("@aws-sdk/invalid-dependency");
var _middlewareRetry = require("@aws-sdk/middleware-retry");
var _utilBase64Browser = require("@aws-sdk/util-base64-browser");
var _utilBodyLengthBrowser = require("@aws-sdk/util-body-length-browser");
var _utilUserAgentBrowser = require("@aws-sdk/util-user-agent-browser");
var _utilUtf8Browser = require("@aws-sdk/util-utf8-browser");
var _runtimeConfigShared = require("./runtimeConfig.shared");
var _smithyClient = require("@aws-sdk/smithy-client");
var _utilDefaultsModeBrowser = require("@aws-sdk/util-defaults-mode-browser");
const getRuntimeConfig = (config)=>{
    const defaultsMode = (0, _utilDefaultsModeBrowser.resolveDefaultsModeConfig)(config);
    const defaultConfigProvider = ()=>defaultsMode().then((0, _smithyClient.loadConfigsForDefaultMode));
    const clientSharedValues = (0, _runtimeConfigShared.getRuntimeConfig)(config);
    return {
        ...clientSharedValues,
        ...config,
        runtime: "browser",
        defaultsMode,
        base64Decoder: config?.base64Decoder ?? (0, _utilBase64Browser.fromBase64),
        base64Encoder: config?.base64Encoder ?? (0, _utilBase64Browser.toBase64),
        bodyLengthChecker: config?.bodyLengthChecker ?? (0, _utilBodyLengthBrowser.calculateBodyLength),
        credentialDefaultProvider: config?.credentialDefaultProvider ?? ((_)=>()=>Promise.reject(new Error("Credential is missing"))),
        defaultUserAgentProvider: config?.defaultUserAgentProvider ?? (0, _utilUserAgentBrowser.defaultUserAgent)({
            serviceId: clientSharedValues.serviceId,
            clientVersion: (0, _packageJsonDefault.default).version
        }),
        endpointDiscoveryEnabledProvider: config?.endpointDiscoveryEnabledProvider ?? (()=>Promise.resolve(undefined)),
        maxAttempts: config?.maxAttempts ?? (0, _middlewareRetry.DEFAULT_MAX_ATTEMPTS),
        region: config?.region ?? (0, _invalidDependency.invalidProvider)("Region is missing"),
        requestHandler: config?.requestHandler ?? new (0, _fetchHttpHandler.FetchHttpHandler)(defaultConfigProvider),
        retryMode: config?.retryMode ?? (async ()=>(await defaultConfigProvider()).retryMode || (0, _middlewareRetry.DEFAULT_RETRY_MODE)),
        sha256: config?.sha256 ?? (0, _sha256Browser.Sha256),
        streamCollector: config?.streamCollector ?? (0, _fetchHttpHandler.streamCollector),
        useDualstackEndpoint: config?.useDualstackEndpoint ?? (()=>Promise.resolve((0, _configResolver.DEFAULT_USE_DUALSTACK_ENDPOINT))),
        useFipsEndpoint: config?.useFipsEndpoint ?? (()=>Promise.resolve((0, _configResolver.DEFAULT_USE_FIPS_ENDPOINT))),
        utf8Decoder: config?.utf8Decoder ?? (0, _utilUtf8Browser.fromUtf8),
        utf8Encoder: config?.utf8Encoder ?? (0, _utilUtf8Browser.toUtf8)
    };
};

},{"../package.json":"aXKVa","@aws-crypto/sha256-browser":"h7M77","@aws-sdk/config-resolver":"2Zj28","@aws-sdk/fetch-http-handler":"etWgp","@aws-sdk/invalid-dependency":"1kvFV","@aws-sdk/middleware-retry":"iRfgc","@aws-sdk/util-base64-browser":"9aHTk","@aws-sdk/util-body-length-browser":"6ddt5","@aws-sdk/util-user-agent-browser":"duqKe","@aws-sdk/util-utf8-browser":"3Y1HX","./runtimeConfig.shared":"kXkmm","@aws-sdk/smithy-client":"ats0l","@aws-sdk/util-defaults-mode-browser":"lFq8A","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aXKVa":[function(require,module,exports) {
module.exports = JSON.parse('{"name":"@aws-sdk/client-dynamodb","description":"AWS SDK for JavaScript Dynamodb Client for Node.js, Browser and React Native","version":"3.199.0","scripts":{"build":"concurrently \'yarn:build:cjs\' \'yarn:build:es\' \'yarn:build:types\'","build:cjs":"tsc -p tsconfig.cjs.json","build:docs":"typedoc","build:es":"tsc -p tsconfig.es.json","build:include:deps":"lerna run --scope $npm_package_name --include-dependencies build","build:types":"tsc -p tsconfig.types.json","build:types:downlevel":"downlevel-dts dist-types dist-types/ts3.4","clean":"rimraf ./dist-* && rimraf *.tsbuildinfo"},"main":"./dist-cjs/index.js","types":"./dist-types/index.d.ts","module":"./dist-es/index.js","sideEffects":false,"dependencies":{"@aws-crypto/sha256-browser":"2.0.0","@aws-crypto/sha256-js":"2.0.0","@aws-sdk/client-sts":"3.199.0","@aws-sdk/config-resolver":"3.198.0","@aws-sdk/credential-provider-node":"3.199.0","@aws-sdk/fetch-http-handler":"3.199.0","@aws-sdk/hash-node":"3.198.0","@aws-sdk/invalid-dependency":"3.198.0","@aws-sdk/middleware-content-length":"3.199.0","@aws-sdk/middleware-endpoint":"3.198.0","@aws-sdk/middleware-endpoint-discovery":"3.198.0","@aws-sdk/middleware-host-header":"3.198.0","@aws-sdk/middleware-logger":"3.198.0","@aws-sdk/middleware-recursion-detection":"3.198.0","@aws-sdk/middleware-retry":"3.198.0","@aws-sdk/middleware-serde":"3.198.0","@aws-sdk/middleware-signing":"3.198.0","@aws-sdk/middleware-stack":"3.198.0","@aws-sdk/middleware-user-agent":"3.198.0","@aws-sdk/node-config-provider":"3.198.0","@aws-sdk/node-http-handler":"3.199.0","@aws-sdk/protocol-http":"3.198.0","@aws-sdk/smithy-client":"3.198.0","@aws-sdk/types":"3.198.0","@aws-sdk/url-parser":"3.198.0","@aws-sdk/util-base64-browser":"3.188.0","@aws-sdk/util-base64-node":"3.188.0","@aws-sdk/util-body-length-browser":"3.188.0","@aws-sdk/util-body-length-node":"3.188.0","@aws-sdk/util-defaults-mode-browser":"3.198.0","@aws-sdk/util-defaults-mode-node":"3.198.0","@aws-sdk/util-endpoints":"3.198.0","@aws-sdk/util-user-agent-browser":"3.198.0","@aws-sdk/util-user-agent-node":"3.198.0","@aws-sdk/util-utf8-browser":"3.188.0","@aws-sdk/util-utf8-node":"3.199.0","@aws-sdk/util-waiter":"3.198.0","tslib":"^2.3.1","uuid":"^8.3.2"},"devDependencies":{"@aws-sdk/service-client-documentation-generator":"3.188.0","@tsconfig/recommended":"1.0.1","@types/node":"^12.7.5","@types/uuid":"^8.3.0","concurrently":"7.0.0","downlevel-dts":"0.10.1","rimraf":"3.0.2","typedoc":"0.19.2","typescript":"~4.6.2"},"overrides":{"typedoc":{"typescript":"~4.6.2"}},"engines":{"node":">=12.0.0"},"typesVersions":{"<4.0":{"dist-types/*":["dist-types/ts3.4/*"]}},"files":["dist-*"],"author":{"name":"AWS SDK for JavaScript Team","url":"https://aws.amazon.com/javascript/"},"license":"Apache-2.0","browser":{"./dist-es/runtimeConfig":"./dist-es/runtimeConfig.browser"},"react-native":{"./dist-es/runtimeConfig":"./dist-es/runtimeConfig.native"},"homepage":"https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-dynamodb","repository":{"type":"git","url":"https://github.com/aws/aws-sdk-js-v3.git","directory":"clients/client-dynamodb"}}');

},{}],"kXkmm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "getRuntimeConfig", ()=>getRuntimeConfig);
var _urlParser = require("@aws-sdk/url-parser");
var _endpointResolver = require("./endpoint/endpointResolver");
const getRuntimeConfig = (config)=>({
        apiVersion: "2012-08-10",
        disableHostPrefix: config?.disableHostPrefix ?? false,
        endpointProvider: config?.endpointProvider ?? (0, _endpointResolver.defaultEndpointResolver),
        logger: config?.logger ?? {},
        serviceId: config?.serviceId ?? "DynamoDB",
        urlParser: config?.urlParser ?? (0, _urlParser.parseUrl)
    });

},{"@aws-sdk/url-parser":"7tZsl","./endpoint/endpointResolver":"aR3a3","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"aR3a3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "defaultEndpointResolver", ()=>defaultEndpointResolver);
var _utilEndpoints = require("@aws-sdk/util-endpoints");
var _ruleset = require("./ruleset");
const defaultEndpointResolver = (endpointParams, context = {})=>{
    return (0, _utilEndpoints.resolveEndpoint)((0, _ruleset.ruleSet), {
        endpointParams: endpointParams,
        logger: context.logger
    });
};

},{"@aws-sdk/util-endpoints":"hUX6q","./ruleset":"4U9Yi","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4U9Yi":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "ruleSet", ()=>ruleSet);
const ruleSet = {
    version: "1.0",
    parameters: {
        Region: {
            builtIn: "AWS::Region",
            required: false,
            documentation: "The AWS region used to dispatch the request.",
            type: "String"
        },
        UseDualStack: {
            builtIn: "AWS::UseDualStack",
            required: true,
            default: false,
            documentation: "When true, use the dual-stack endpoint. If the configured endpoint does not support dual-stack, dispatching the request MAY return an error.",
            type: "Boolean"
        },
        UseFIPS: {
            builtIn: "AWS::UseFIPS",
            required: true,
            default: false,
            documentation: "When true, send this request to the FIPS-compliant regional endpoint. If the configured endpoint does not have a FIPS compliant endpoint, dispatching the request will return an error.",
            type: "Boolean"
        },
        Endpoint: {
            builtIn: "SDK::Endpoint",
            required: false,
            documentation: "Override the endpoint used to send this request",
            type: "String"
        }
    },
    rules: [
        {
            conditions: [
                {
                    fn: "aws.partition",
                    argv: [
                        {
                            ref: "Region"
                        }, 
                    ],
                    assign: "PartitionResult"
                }, 
            ],
            type: "tree",
            rules: [
                {
                    conditions: [
                        {
                            fn: "isSet",
                            argv: [
                                {
                                    ref: "Endpoint"
                                }, 
                            ]
                        },
                        {
                            fn: "parseURL",
                            argv: [
                                {
                                    ref: "Endpoint"
                                }, 
                            ],
                            assign: "url"
                        }, 
                    ],
                    type: "tree",
                    rules: [
                        {
                            conditions: [
                                {
                                    fn: "booleanEquals",
                                    argv: [
                                        {
                                            ref: "UseFIPS"
                                        },
                                        true, 
                                    ]
                                }, 
                            ],
                            error: "Invalid Configuration: FIPS and custom endpoint are not supported",
                            type: "error"
                        },
                        {
                            conditions: [],
                            type: "tree",
                            rules: [
                                {
                                    conditions: [
                                        {
                                            fn: "booleanEquals",
                                            argv: [
                                                {
                                                    ref: "UseDualStack"
                                                },
                                                true, 
                                            ]
                                        }, 
                                    ],
                                    error: "Invalid Configuration: Dualstack and custom endpoint are not supported",
                                    type: "error"
                                },
                                {
                                    conditions: [],
                                    endpoint: {
                                        url: {
                                            ref: "Endpoint"
                                        },
                                        properties: {},
                                        headers: {}
                                    },
                                    type: "endpoint"
                                }, 
                            ]
                        }, 
                    ]
                },
                {
                    conditions: [
                        {
                            fn: "booleanEquals",
                            argv: [
                                {
                                    ref: "UseFIPS"
                                },
                                true, 
                            ]
                        },
                        {
                            fn: "booleanEquals",
                            argv: [
                                {
                                    ref: "UseDualStack"
                                },
                                true, 
                            ]
                        }, 
                    ],
                    type: "tree",
                    rules: [
                        {
                            conditions: [
                                {
                                    fn: "booleanEquals",
                                    argv: [
                                        true,
                                        {
                                            fn: "getAttr",
                                            argv: [
                                                {
                                                    ref: "PartitionResult"
                                                },
                                                "supportsFIPS", 
                                            ]
                                        }, 
                                    ]
                                },
                                {
                                    fn: "booleanEquals",
                                    argv: [
                                        true,
                                        {
                                            fn: "getAttr",
                                            argv: [
                                                {
                                                    ref: "PartitionResult"
                                                },
                                                "supportsDualStack", 
                                            ]
                                        }, 
                                    ]
                                }, 
                            ],
                            type: "tree",
                            rules: [
                                {
                                    conditions: [],
                                    endpoint: {
                                        url: "https://dynamodb-fips.{Region}.{PartitionResult#dualStackDnsSuffix}",
                                        properties: {},
                                        headers: {}
                                    },
                                    type: "endpoint"
                                }, 
                            ]
                        },
                        {
                            conditions: [],
                            error: "FIPS and DualStack are enabled, but this partition does not support one or both",
                            type: "error"
                        }, 
                    ]
                },
                {
                    conditions: [
                        {
                            fn: "booleanEquals",
                            argv: [
                                {
                                    ref: "UseFIPS"
                                },
                                true, 
                            ]
                        }, 
                    ],
                    type: "tree",
                    rules: [
                        {
                            conditions: [
                                {
                                    fn: "booleanEquals",
                                    argv: [
                                        true,
                                        {
                                            fn: "getAttr",
                                            argv: [
                                                {
                                                    ref: "PartitionResult"
                                                },
                                                "supportsFIPS", 
                                            ]
                                        }, 
                                    ]
                                }, 
                            ],
                            type: "tree",
                            rules: [
                                {
                                    conditions: [],
                                    type: "tree",
                                    rules: [
                                        {
                                            conditions: [
                                                {
                                                    fn: "stringEquals",
                                                    argv: [
                                                        "aws-us-gov",
                                                        {
                                                            fn: "getAttr",
                                                            argv: [
                                                                {
                                                                    ref: "PartitionResult"
                                                                },
                                                                "name", 
                                                            ]
                                                        }, 
                                                    ]
                                                }, 
                                            ],
                                            endpoint: {
                                                url: "https://dynamodb.{Region}.{PartitionResult#dnsSuffix}",
                                                properties: {},
                                                headers: {}
                                            },
                                            type: "endpoint"
                                        },
                                        {
                                            conditions: [],
                                            endpoint: {
                                                url: "https://dynamodb-fips.{Region}.{PartitionResult#dnsSuffix}",
                                                properties: {},
                                                headers: {}
                                            },
                                            type: "endpoint"
                                        }, 
                                    ]
                                }, 
                            ]
                        },
                        {
                            conditions: [],
                            error: "FIPS is enabled but this partition does not support FIPS",
                            type: "error"
                        }, 
                    ]
                },
                {
                    conditions: [
                        {
                            fn: "booleanEquals",
                            argv: [
                                {
                                    ref: "UseDualStack"
                                },
                                true, 
                            ]
                        }, 
                    ],
                    type: "tree",
                    rules: [
                        {
                            conditions: [
                                {
                                    fn: "booleanEquals",
                                    argv: [
                                        true,
                                        {
                                            fn: "getAttr",
                                            argv: [
                                                {
                                                    ref: "PartitionResult"
                                                },
                                                "supportsDualStack", 
                                            ]
                                        }, 
                                    ]
                                }, 
                            ],
                            type: "tree",
                            rules: [
                                {
                                    conditions: [],
                                    endpoint: {
                                        url: "https://dynamodb.{Region}.{PartitionResult#dualStackDnsSuffix}",
                                        properties: {},
                                        headers: {}
                                    },
                                    type: "endpoint"
                                }, 
                            ]
                        },
                        {
                            conditions: [],
                            error: "DualStack is enabled but this partition does not support DualStack",
                            type: "error"
                        }, 
                    ]
                },
                {
                    conditions: [],
                    type: "tree",
                    rules: [
                        {
                            conditions: [
                                {
                                    fn: "stringEquals",
                                    argv: [
                                        {
                                            ref: "Region"
                                        },
                                        "local", 
                                    ]
                                }, 
                            ],
                            endpoint: {
                                url: "https://localhost:8000",
                                properties: {
                                    authSchemes: [
                                        {
                                            name: "sigv4",
                                            signingName: "dynamodb",
                                            signingRegion: "us-east-1"
                                        }, 
                                    ]
                                },
                                headers: {}
                            },
                            type: "endpoint"
                        },
                        {
                            conditions: [],
                            endpoint: {
                                url: "https://dynamodb.{Region}.{PartitionResult#dnsSuffix}",
                                properties: {},
                                headers: {}
                            },
                            type: "endpoint"
                        }, 
                    ]
                }, 
            ]
        }, 
    ]
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dKsfp":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _batchExecuteStatementCommand = require("./BatchExecuteStatementCommand");
parcelHelpers.exportAll(_batchExecuteStatementCommand, exports);
var _batchGetItemCommand = require("./BatchGetItemCommand");
parcelHelpers.exportAll(_batchGetItemCommand, exports);
var _batchWriteItemCommand = require("./BatchWriteItemCommand");
parcelHelpers.exportAll(_batchWriteItemCommand, exports);
var _createBackupCommand = require("./CreateBackupCommand");
parcelHelpers.exportAll(_createBackupCommand, exports);
var _createGlobalTableCommand = require("./CreateGlobalTableCommand");
parcelHelpers.exportAll(_createGlobalTableCommand, exports);
var _createTableCommand = require("./CreateTableCommand");
parcelHelpers.exportAll(_createTableCommand, exports);
var _deleteBackupCommand = require("./DeleteBackupCommand");
parcelHelpers.exportAll(_deleteBackupCommand, exports);
var _deleteItemCommand = require("./DeleteItemCommand");
parcelHelpers.exportAll(_deleteItemCommand, exports);
var _deleteTableCommand = require("./DeleteTableCommand");
parcelHelpers.exportAll(_deleteTableCommand, exports);
var _describeBackupCommand = require("./DescribeBackupCommand");
parcelHelpers.exportAll(_describeBackupCommand, exports);
var _describeContinuousBackupsCommand = require("./DescribeContinuousBackupsCommand");
parcelHelpers.exportAll(_describeContinuousBackupsCommand, exports);
var _describeContributorInsightsCommand = require("./DescribeContributorInsightsCommand");
parcelHelpers.exportAll(_describeContributorInsightsCommand, exports);
var _describeEndpointsCommand = require("./DescribeEndpointsCommand");
parcelHelpers.exportAll(_describeEndpointsCommand, exports);
var _describeExportCommand = require("./DescribeExportCommand");
parcelHelpers.exportAll(_describeExportCommand, exports);
var _describeGlobalTableCommand = require("./DescribeGlobalTableCommand");
parcelHelpers.exportAll(_describeGlobalTableCommand, exports);
var _describeGlobalTableSettingsCommand = require("./DescribeGlobalTableSettingsCommand");
parcelHelpers.exportAll(_describeGlobalTableSettingsCommand, exports);
var _describeImportCommand = require("./DescribeImportCommand");
parcelHelpers.exportAll(_describeImportCommand, exports);
var _describeKinesisStreamingDestinationCommand = require("./DescribeKinesisStreamingDestinationCommand");
parcelHelpers.exportAll(_describeKinesisStreamingDestinationCommand, exports);
var _describeLimitsCommand = require("./DescribeLimitsCommand");
parcelHelpers.exportAll(_describeLimitsCommand, exports);
var _describeTableCommand = require("./DescribeTableCommand");
parcelHelpers.exportAll(_describeTableCommand, exports);
var _describeTableReplicaAutoScalingCommand = require("./DescribeTableReplicaAutoScalingCommand");
parcelHelpers.exportAll(_describeTableReplicaAutoScalingCommand, exports);
var _describeTimeToLiveCommand = require("./DescribeTimeToLiveCommand");
parcelHelpers.exportAll(_describeTimeToLiveCommand, exports);
var _disableKinesisStreamingDestinationCommand = require("./DisableKinesisStreamingDestinationCommand");
parcelHelpers.exportAll(_disableKinesisStreamingDestinationCommand, exports);
var _enableKinesisStreamingDestinationCommand = require("./EnableKinesisStreamingDestinationCommand");
parcelHelpers.exportAll(_enableKinesisStreamingDestinationCommand, exports);
var _executeStatementCommand = require("./ExecuteStatementCommand");
parcelHelpers.exportAll(_executeStatementCommand, exports);
var _executeTransactionCommand = require("./ExecuteTransactionCommand");
parcelHelpers.exportAll(_executeTransactionCommand, exports);
var _exportTableToPointInTimeCommand = require("./ExportTableToPointInTimeCommand");
parcelHelpers.exportAll(_exportTableToPointInTimeCommand, exports);
var _getItemCommand = require("./GetItemCommand");
parcelHelpers.exportAll(_getItemCommand, exports);
var _importTableCommand = require("./ImportTableCommand");
parcelHelpers.exportAll(_importTableCommand, exports);
var _listBackupsCommand = require("./ListBackupsCommand");
parcelHelpers.exportAll(_listBackupsCommand, exports);
var _listContributorInsightsCommand = require("./ListContributorInsightsCommand");
parcelHelpers.exportAll(_listContributorInsightsCommand, exports);
var _listExportsCommand = require("./ListExportsCommand");
parcelHelpers.exportAll(_listExportsCommand, exports);
var _listGlobalTablesCommand = require("./ListGlobalTablesCommand");
parcelHelpers.exportAll(_listGlobalTablesCommand, exports);
var _listImportsCommand = require("./ListImportsCommand");
parcelHelpers.exportAll(_listImportsCommand, exports);
var _listTablesCommand = require("./ListTablesCommand");
parcelHelpers.exportAll(_listTablesCommand, exports);
var _listTagsOfResourceCommand = require("./ListTagsOfResourceCommand");
parcelHelpers.exportAll(_listTagsOfResourceCommand, exports);
var _putItemCommand = require("./PutItemCommand");
parcelHelpers.exportAll(_putItemCommand, exports);
var _queryCommand = require("./QueryCommand");
parcelHelpers.exportAll(_queryCommand, exports);
var _restoreTableFromBackupCommand = require("./RestoreTableFromBackupCommand");
parcelHelpers.exportAll(_restoreTableFromBackupCommand, exports);
var _restoreTableToPointInTimeCommand = require("./RestoreTableToPointInTimeCommand");
parcelHelpers.exportAll(_restoreTableToPointInTimeCommand, exports);
var _scanCommand = require("./ScanCommand");
parcelHelpers.exportAll(_scanCommand, exports);
var _tagResourceCommand = require("./TagResourceCommand");
parcelHelpers.exportAll(_tagResourceCommand, exports);
var _transactGetItemsCommand = require("./TransactGetItemsCommand");
parcelHelpers.exportAll(_transactGetItemsCommand, exports);
var _transactWriteItemsCommand = require("./TransactWriteItemsCommand");
parcelHelpers.exportAll(_transactWriteItemsCommand, exports);
var _untagResourceCommand = require("./UntagResourceCommand");
parcelHelpers.exportAll(_untagResourceCommand, exports);
var _updateContinuousBackupsCommand = require("./UpdateContinuousBackupsCommand");
parcelHelpers.exportAll(_updateContinuousBackupsCommand, exports);
var _updateContributorInsightsCommand = require("./UpdateContributorInsightsCommand");
parcelHelpers.exportAll(_updateContributorInsightsCommand, exports);
var _updateGlobalTableCommand = require("./UpdateGlobalTableCommand");
parcelHelpers.exportAll(_updateGlobalTableCommand, exports);
var _updateGlobalTableSettingsCommand = require("./UpdateGlobalTableSettingsCommand");
parcelHelpers.exportAll(_updateGlobalTableSettingsCommand, exports);
var _updateItemCommand = require("./UpdateItemCommand");
parcelHelpers.exportAll(_updateItemCommand, exports);
var _updateTableCommand = require("./UpdateTableCommand");
parcelHelpers.exportAll(_updateTableCommand, exports);
var _updateTableReplicaAutoScalingCommand = require("./UpdateTableReplicaAutoScalingCommand");
parcelHelpers.exportAll(_updateTableReplicaAutoScalingCommand, exports);
var _updateTimeToLiveCommand = require("./UpdateTimeToLiveCommand");
parcelHelpers.exportAll(_updateTimeToLiveCommand, exports);

},{"./BatchExecuteStatementCommand":"54UtQ","./BatchGetItemCommand":"jbco9","./BatchWriteItemCommand":"fjdm8","./CreateBackupCommand":"ffw2W","./CreateGlobalTableCommand":"9m7Rs","./CreateTableCommand":"5rbEF","./DeleteBackupCommand":"1VuvK","./DeleteItemCommand":"dNZgc","./DeleteTableCommand":"iDQo0","./DescribeBackupCommand":"k9eTA","./DescribeContinuousBackupsCommand":"23EB3","./DescribeContributorInsightsCommand":"4Ohfm","./DescribeEndpointsCommand":"dlVBr","./DescribeExportCommand":"8mC4P","./DescribeGlobalTableCommand":"q8RCi","./DescribeGlobalTableSettingsCommand":"a75QM","./DescribeImportCommand":"b7hlV","./DescribeKinesisStreamingDestinationCommand":"lto8R","./DescribeLimitsCommand":"4BVng","./DescribeTableCommand":"kVY8e","./DescribeTableReplicaAutoScalingCommand":"dQqXy","./DescribeTimeToLiveCommand":"eK0Cx","./DisableKinesisStreamingDestinationCommand":"hRQXM","./EnableKinesisStreamingDestinationCommand":"iCptj","./ExecuteStatementCommand":"drbaG","./ExecuteTransactionCommand":"kKuz4","./ExportTableToPointInTimeCommand":"c1KeZ","./GetItemCommand":"2nDTS","./ImportTableCommand":"fMp66","./ListBackupsCommand":"bqSzJ","./ListContributorInsightsCommand":"2d7jp","./ListExportsCommand":"3HosE","./ListGlobalTablesCommand":"48EtG","./ListImportsCommand":"cNJcg","./ListTablesCommand":"7dYH2","./ListTagsOfResourceCommand":"enYXb","./PutItemCommand":"7Hj9z","./QueryCommand":"1Y7ez","./RestoreTableFromBackupCommand":"21gyH","./RestoreTableToPointInTimeCommand":"1dkoT","./ScanCommand":"klZUL","./TagResourceCommand":"5Mq51","./TransactGetItemsCommand":"22zCR","./TransactWriteItemsCommand":"fnEm7","./UntagResourceCommand":"fxMFa","./UpdateContinuousBackupsCommand":"6GXpQ","./UpdateContributorInsightsCommand":"fj8ON","./UpdateGlobalTableCommand":"k0g1H","./UpdateGlobalTableSettingsCommand":"85Z97","./UpdateItemCommand":"7VwWS","./UpdateTableCommand":"6KZkH","./UpdateTableReplicaAutoScalingCommand":"giji1","./UpdateTimeToLiveCommand":"dhHr1","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6Trql":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _models0 = require("./models_0");
parcelHelpers.exportAll(_models0, exports);

},{"./models_0":"6OiVg","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"dwGYy":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _interfaces = require("./Interfaces");
parcelHelpers.exportAll(_interfaces, exports);
var _listContributorInsightsPaginator = require("./ListContributorInsightsPaginator");
parcelHelpers.exportAll(_listContributorInsightsPaginator, exports);
var _listExportsPaginator = require("./ListExportsPaginator");
parcelHelpers.exportAll(_listExportsPaginator, exports);
var _listImportsPaginator = require("./ListImportsPaginator");
parcelHelpers.exportAll(_listImportsPaginator, exports);
var _listTablesPaginator = require("./ListTablesPaginator");
parcelHelpers.exportAll(_listTablesPaginator, exports);
var _queryPaginator = require("./QueryPaginator");
parcelHelpers.exportAll(_queryPaginator, exports);
var _scanPaginator = require("./ScanPaginator");
parcelHelpers.exportAll(_scanPaginator, exports);

},{"./Interfaces":"jcHcY","./ListContributorInsightsPaginator":"4rVkQ","./ListExportsPaginator":"jtiO4","./ListImportsPaginator":"cjrNm","./ListTablesPaginator":"eqFnN","./QueryPaginator":"48Kye","./ScanPaginator":"3pI2s","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jcHcY":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"4rVkQ":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "paginateListContributorInsights", ()=>paginateListContributorInsights);
var _listContributorInsightsCommand = require("../commands/ListContributorInsightsCommand");
var _dynamoDB = require("../DynamoDB");
var _dynamoDBClient = require("../DynamoDBClient");
const makePagedClientRequest = async (client, input, ...args)=>{
    return await client.send(new (0, _listContributorInsightsCommand.ListContributorInsightsCommand)(input), ...args);
};
const makePagedRequest = async (client, input, ...args)=>{
    return await client.listContributorInsights(input, ...args);
};
async function* paginateListContributorInsights(config, input, ...additionalArguments) {
    let token = config.startingToken || undefined;
    let hasNext = true;
    let page;
    while(hasNext){
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof (0, _dynamoDB.DynamoDB)) page = await makePagedRequest(config.client, input, ...additionalArguments);
        else if (config.client instanceof (0, _dynamoDBClient.DynamoDBClient)) page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        else throw new Error("Invalid client, expected DynamoDB | DynamoDBClient");
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
    }
    return undefined;
}

},{"../commands/ListContributorInsightsCommand":"2d7jp","../DynamoDB":"heqp3","../DynamoDBClient":"8WS72","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"jtiO4":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "paginateListExports", ()=>paginateListExports);
var _listExportsCommand = require("../commands/ListExportsCommand");
var _dynamoDB = require("../DynamoDB");
var _dynamoDBClient = require("../DynamoDBClient");
const makePagedClientRequest = async (client, input, ...args)=>{
    return await client.send(new (0, _listExportsCommand.ListExportsCommand)(input), ...args);
};
const makePagedRequest = async (client, input, ...args)=>{
    return await client.listExports(input, ...args);
};
async function* paginateListExports(config, input, ...additionalArguments) {
    let token = config.startingToken || undefined;
    let hasNext = true;
    let page;
    while(hasNext){
        input.NextToken = token;
        input["MaxResults"] = config.pageSize;
        if (config.client instanceof (0, _dynamoDB.DynamoDB)) page = await makePagedRequest(config.client, input, ...additionalArguments);
        else if (config.client instanceof (0, _dynamoDBClient.DynamoDBClient)) page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        else throw new Error("Invalid client, expected DynamoDB | DynamoDBClient");
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
    }
    return undefined;
}

},{"../commands/ListExportsCommand":"3HosE","../DynamoDB":"heqp3","../DynamoDBClient":"8WS72","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"cjrNm":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "paginateListImports", ()=>paginateListImports);
var _listImportsCommand = require("../commands/ListImportsCommand");
var _dynamoDB = require("../DynamoDB");
var _dynamoDBClient = require("../DynamoDBClient");
const makePagedClientRequest = async (client, input, ...args)=>{
    return await client.send(new (0, _listImportsCommand.ListImportsCommand)(input), ...args);
};
const makePagedRequest = async (client, input, ...args)=>{
    return await client.listImports(input, ...args);
};
async function* paginateListImports(config, input, ...additionalArguments) {
    let token = config.startingToken || undefined;
    let hasNext = true;
    let page;
    while(hasNext){
        input.NextToken = token;
        input["PageSize"] = config.pageSize;
        if (config.client instanceof (0, _dynamoDB.DynamoDB)) page = await makePagedRequest(config.client, input, ...additionalArguments);
        else if (config.client instanceof (0, _dynamoDBClient.DynamoDBClient)) page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        else throw new Error("Invalid client, expected DynamoDB | DynamoDBClient");
        yield page;
        const prevToken = token;
        token = page.NextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
    }
    return undefined;
}

},{"../commands/ListImportsCommand":"cNJcg","../DynamoDB":"heqp3","../DynamoDBClient":"8WS72","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"eqFnN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "paginateListTables", ()=>paginateListTables);
var _listTablesCommand = require("../commands/ListTablesCommand");
var _dynamoDB = require("../DynamoDB");
var _dynamoDBClient = require("../DynamoDBClient");
const makePagedClientRequest = async (client, input, ...args)=>{
    return await client.send(new (0, _listTablesCommand.ListTablesCommand)(input), ...args);
};
const makePagedRequest = async (client, input, ...args)=>{
    return await client.listTables(input, ...args);
};
async function* paginateListTables(config, input, ...additionalArguments) {
    let token = config.startingToken || undefined;
    let hasNext = true;
    let page;
    while(hasNext){
        input.ExclusiveStartTableName = token;
        input["Limit"] = config.pageSize;
        if (config.client instanceof (0, _dynamoDB.DynamoDB)) page = await makePagedRequest(config.client, input, ...additionalArguments);
        else if (config.client instanceof (0, _dynamoDBClient.DynamoDBClient)) page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        else throw new Error("Invalid client, expected DynamoDB | DynamoDBClient");
        yield page;
        const prevToken = token;
        token = page.LastEvaluatedTableName;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
    }
    return undefined;
}

},{"../commands/ListTablesCommand":"7dYH2","../DynamoDB":"heqp3","../DynamoDBClient":"8WS72","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"48Kye":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "paginateQuery", ()=>paginateQuery);
var _queryCommand = require("../commands/QueryCommand");
var _dynamoDB = require("../DynamoDB");
var _dynamoDBClient = require("../DynamoDBClient");
const makePagedClientRequest = async (client, input, ...args)=>{
    return await client.send(new (0, _queryCommand.QueryCommand)(input), ...args);
};
const makePagedRequest = async (client, input, ...args)=>{
    return await client.query(input, ...args);
};
async function* paginateQuery(config, input, ...additionalArguments) {
    let token = config.startingToken || undefined;
    let hasNext = true;
    let page;
    while(hasNext){
        input.ExclusiveStartKey = token;
        input["Limit"] = config.pageSize;
        if (config.client instanceof (0, _dynamoDB.DynamoDB)) page = await makePagedRequest(config.client, input, ...additionalArguments);
        else if (config.client instanceof (0, _dynamoDBClient.DynamoDBClient)) page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        else throw new Error("Invalid client, expected DynamoDB | DynamoDBClient");
        yield page;
        const prevToken = token;
        token = page.LastEvaluatedKey;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
    }
    return undefined;
}

},{"../commands/QueryCommand":"1Y7ez","../DynamoDB":"heqp3","../DynamoDBClient":"8WS72","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3pI2s":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "paginateScan", ()=>paginateScan);
var _scanCommand = require("../commands/ScanCommand");
var _dynamoDB = require("../DynamoDB");
var _dynamoDBClient = require("../DynamoDBClient");
const makePagedClientRequest = async (client, input, ...args)=>{
    return await client.send(new (0, _scanCommand.ScanCommand)(input), ...args);
};
const makePagedRequest = async (client, input, ...args)=>{
    return await client.scan(input, ...args);
};
async function* paginateScan(config, input, ...additionalArguments) {
    let token = config.startingToken || undefined;
    let hasNext = true;
    let page;
    while(hasNext){
        input.ExclusiveStartKey = token;
        input["Limit"] = config.pageSize;
        if (config.client instanceof (0, _dynamoDB.DynamoDB)) page = await makePagedRequest(config.client, input, ...additionalArguments);
        else if (config.client instanceof (0, _dynamoDBClient.DynamoDBClient)) page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        else throw new Error("Invalid client, expected DynamoDB | DynamoDBClient");
        yield page;
        const prevToken = token;
        token = page.LastEvaluatedKey;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
    }
    return undefined;
}

},{"../commands/ScanCommand":"klZUL","../DynamoDB":"heqp3","../DynamoDBClient":"8WS72","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"blpUC":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _waitForTableExists = require("./waitForTableExists");
parcelHelpers.exportAll(_waitForTableExists, exports);
var _waitForTableNotExists = require("./waitForTableNotExists");
parcelHelpers.exportAll(_waitForTableNotExists, exports);

},{"./waitForTableExists":"k4z13","./waitForTableNotExists":"6CLYL","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"k4z13":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "waitForTableExists", ()=>waitForTableExists);
parcelHelpers.export(exports, "waitUntilTableExists", ()=>waitUntilTableExists);
var _utilWaiter = require("@aws-sdk/util-waiter");
var _describeTableCommand = require("../commands/DescribeTableCommand");
const checkState = async (client, input)=>{
    let reason;
    try {
        const result = await client.send(new (0, _describeTableCommand.DescribeTableCommand)(input));
        reason = result;
        try {
            const returnComparator = ()=>{
                return result.Table.TableStatus;
            };
            if (returnComparator() === "ACTIVE") return {
                state: (0, _utilWaiter.WaiterState).SUCCESS,
                reason
            };
        } catch (e) {}
    } catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "ResourceNotFoundException") return {
            state: (0, _utilWaiter.WaiterState).RETRY,
            reason
        };
    }
    return {
        state: (0, _utilWaiter.WaiterState).RETRY,
        reason
    };
};
const waitForTableExists = async (params, input)=>{
    const serviceDefaults = {
        minDelay: 20,
        maxDelay: 120
    };
    return (0, _utilWaiter.createWaiter)({
        ...serviceDefaults,
        ...params
    }, input, checkState);
};
const waitUntilTableExists = async (params, input)=>{
    const serviceDefaults = {
        minDelay: 20,
        maxDelay: 120
    };
    const result = await (0, _utilWaiter.createWaiter)({
        ...serviceDefaults,
        ...params
    }, input, checkState);
    return (0, _utilWaiter.checkExceptions)(result);
};

},{"@aws-sdk/util-waiter":"2SWaW","../commands/DescribeTableCommand":"kVY8e","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2SWaW":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _createWaiter = require("./createWaiter");
parcelHelpers.exportAll(_createWaiter, exports);
var _waiter = require("./waiter");
parcelHelpers.exportAll(_waiter, exports);

},{"./createWaiter":"fv81P","./waiter":"7Y6g3","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"fv81P":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "createWaiter", ()=>createWaiter);
var _poller = require("./poller");
var _utils = require("./utils");
var _waiter = require("./waiter");
const abortTimeout = async (abortSignal)=>{
    return new Promise((resolve)=>{
        abortSignal.onabort = ()=>resolve({
                state: (0, _waiter.WaiterState).ABORTED
            });
    });
};
const createWaiter = async (options, input, acceptorChecks)=>{
    const params = {
        ...(0, _waiter.waiterServiceDefaults),
        ...options
    };
    (0, _utils.validateWaiterOptions)(params);
    const exitConditions = [
        (0, _poller.runPolling)(params, input, acceptorChecks)
    ];
    if (options.abortController) exitConditions.push(abortTimeout(options.abortController.signal));
    if (options.abortSignal) exitConditions.push(abortTimeout(options.abortSignal));
    return Promise.race(exitConditions);
};

},{"./poller":"756zo","./utils":"nNYD3","./waiter":"7Y6g3","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"756zo":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "runPolling", ()=>runPolling);
var _sleep = require("./utils/sleep");
var _waiter = require("./waiter");
const exponentialBackoffWithJitter = (minDelay, maxDelay, attemptCeiling, attempt)=>{
    if (attempt > attemptCeiling) return maxDelay;
    const delay = minDelay * 2 ** (attempt - 1);
    return randomInRange(minDelay, delay);
};
const randomInRange = (min, max)=>min + Math.random() * (max - min);
const runPolling = async ({ minDelay , maxDelay , maxWaitTime , abortController , client , abortSignal  }, input, acceptorChecks)=>{
    const { state , reason  } = await acceptorChecks(client, input);
    if (state !== (0, _waiter.WaiterState).RETRY) return {
        state,
        reason
    };
    let currentAttempt = 1;
    const waitUntil = Date.now() + maxWaitTime * 1000;
    const attemptCeiling = Math.log(maxDelay / minDelay) / Math.log(2) + 1;
    while(true){
        if (abortController?.signal?.aborted || abortSignal?.aborted) return {
            state: (0, _waiter.WaiterState).ABORTED
        };
        const delay = exponentialBackoffWithJitter(minDelay, maxDelay, attemptCeiling, currentAttempt);
        if (Date.now() + delay * 1000 > waitUntil) return {
            state: (0, _waiter.WaiterState).TIMEOUT
        };
        await (0, _sleep.sleep)(delay);
        const { state: state1 , reason: reason1  } = await acceptorChecks(client, input);
        if (state1 !== (0, _waiter.WaiterState).RETRY) return {
            state: state1,
            reason: reason1
        };
        currentAttempt += 1;
    }
};

},{"./utils/sleep":"5qDez","./waiter":"7Y6g3","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5qDez":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "sleep", ()=>sleep);
const sleep = (seconds)=>{
    return new Promise((resolve)=>setTimeout(resolve, seconds * 1000));
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7Y6g3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "waiterServiceDefaults", ()=>waiterServiceDefaults);
parcelHelpers.export(exports, "WaiterState", ()=>WaiterState);
parcelHelpers.export(exports, "checkExceptions", ()=>checkExceptions);
const waiterServiceDefaults = {
    minDelay: 2,
    maxDelay: 120
};
var WaiterState;
(function(WaiterState) {
    WaiterState["ABORTED"] = "ABORTED";
    WaiterState["FAILURE"] = "FAILURE";
    WaiterState["SUCCESS"] = "SUCCESS";
    WaiterState["RETRY"] = "RETRY";
    WaiterState["TIMEOUT"] = "TIMEOUT";
})(WaiterState || (WaiterState = {}));
const checkExceptions = (result)=>{
    if (result.state === WaiterState.ABORTED) {
        const abortError = new Error(`${JSON.stringify({
            ...result,
            reason: "Request was aborted"
        })}`);
        abortError.name = "AbortError";
        throw abortError;
    } else if (result.state === WaiterState.TIMEOUT) {
        const timeoutError = new Error(`${JSON.stringify({
            ...result,
            reason: "Waiter has timed out"
        })}`);
        timeoutError.name = "TimeoutError";
        throw timeoutError;
    } else if (result.state !== WaiterState.SUCCESS) throw new Error(`${JSON.stringify({
        result
    })}`);
    return result;
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"nNYD3":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _sleep = require("./sleep");
parcelHelpers.exportAll(_sleep, exports);
var _validate = require("./validate");
parcelHelpers.exportAll(_validate, exports);

},{"./sleep":"5qDez","./validate":"hpkk6","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hpkk6":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "validateWaiterOptions", ()=>validateWaiterOptions);
const validateWaiterOptions = (options)=>{
    if (options.maxWaitTime < 1) throw new Error(`WaiterConfiguration.maxWaitTime must be greater than 0`);
    else if (options.minDelay < 1) throw new Error(`WaiterConfiguration.minDelay must be greater than 0`);
    else if (options.maxDelay < 1) throw new Error(`WaiterConfiguration.maxDelay must be greater than 0`);
    else if (options.maxWaitTime <= options.minDelay) throw new Error(`WaiterConfiguration.maxWaitTime [${options.maxWaitTime}] must be greater than WaiterConfiguration.minDelay [${options.minDelay}] for this waiter`);
    else if (options.maxDelay < options.minDelay) throw new Error(`WaiterConfiguration.maxDelay [${options.maxDelay}] must be greater than WaiterConfiguration.minDelay [${options.minDelay}] for this waiter`);
};

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6CLYL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "waitForTableNotExists", ()=>waitForTableNotExists);
parcelHelpers.export(exports, "waitUntilTableNotExists", ()=>waitUntilTableNotExists);
var _utilWaiter = require("@aws-sdk/util-waiter");
var _describeTableCommand = require("../commands/DescribeTableCommand");
const checkState = async (client, input)=>{
    let reason;
    try {
        const result = await client.send(new (0, _describeTableCommand.DescribeTableCommand)(input));
        reason = result;
    } catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "ResourceNotFoundException") return {
            state: (0, _utilWaiter.WaiterState).SUCCESS,
            reason
        };
    }
    return {
        state: (0, _utilWaiter.WaiterState).RETRY,
        reason
    };
};
const waitForTableNotExists = async (params, input)=>{
    const serviceDefaults = {
        minDelay: 20,
        maxDelay: 120
    };
    return (0, _utilWaiter.createWaiter)({
        ...serviceDefaults,
        ...params
    }, input, checkState);
};
const waitUntilTableNotExists = async (params, input)=>{
    const serviceDefaults = {
        minDelay: 20,
        maxDelay: 120
    };
    const result = await (0, _utilWaiter.createWaiter)({
        ...serviceDefaults,
        ...params
    }, input, checkState);
    return (0, _utilWaiter.checkExceptions)(result);
};

},{"@aws-sdk/util-waiter":"2SWaW","../commands/DescribeTableCommand":"kVY8e","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"keTcL":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _cognitoProviderParameters = require("./CognitoProviderParameters");
parcelHelpers.exportAll(_cognitoProviderParameters, exports);
var _logins = require("./Logins");
parcelHelpers.exportAll(_logins, exports);
var _storage = require("./Storage");
parcelHelpers.exportAll(_storage, exports);
var _fromCognitoIdentity = require("./fromCognitoIdentity");
parcelHelpers.exportAll(_fromCognitoIdentity, exports);
var _fromCognitoIdentityPool = require("./fromCognitoIdentityPool");
parcelHelpers.exportAll(_fromCognitoIdentityPool, exports);

},{"./CognitoProviderParameters":"5HVjP","./Logins":"e7Jlx","./Storage":"hxSxA","./fromCognitoIdentity":"hpX3V","./fromCognitoIdentityPool":"c6WUe","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"5HVjP":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"e7Jlx":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hxSxA":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hpX3V":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fromCognitoIdentity", ()=>fromCognitoIdentity);
var _clientCognitoIdentity = require("@aws-sdk/client-cognito-identity");
var _propertyProvider = require("@aws-sdk/property-provider");
var _resolveLogins = require("./resolveLogins");
function fromCognitoIdentity(parameters) {
    return async ()=>{
        const { Credentials: { AccessKeyId =throwOnMissingAccessKeyId() , Expiration , SecretKey =throwOnMissingSecretKey() , SessionToken ,  } = throwOnMissingCredentials() ,  } = await parameters.client.send(new (0, _clientCognitoIdentity.GetCredentialsForIdentityCommand)({
            CustomRoleArn: parameters.customRoleArn,
            IdentityId: parameters.identityId,
            Logins: parameters.logins ? await (0, _resolveLogins.resolveLogins)(parameters.logins) : undefined
        }));
        return {
            identityId: parameters.identityId,
            accessKeyId: AccessKeyId,
            secretAccessKey: SecretKey,
            sessionToken: SessionToken,
            expiration: Expiration
        };
    };
}
function throwOnMissingAccessKeyId() {
    throw new (0, _propertyProvider.CredentialsProviderError)("Response from Amazon Cognito contained no access key ID");
}
function throwOnMissingCredentials() {
    throw new (0, _propertyProvider.CredentialsProviderError)("Response from Amazon Cognito contained no credentials");
}
function throwOnMissingSecretKey() {
    throw new (0, _propertyProvider.CredentialsProviderError)("Response from Amazon Cognito contained no secret key");
}

},{"@aws-sdk/client-cognito-identity":"aWIu4","@aws-sdk/property-provider":"eAar8","./resolveLogins":"3i3w7","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3i3w7":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "resolveLogins", ()=>resolveLogins);
function resolveLogins(logins) {
    return Promise.all(Object.keys(logins).reduce((arr, name)=>{
        const tokenOrProvider = logins[name];
        if (typeof tokenOrProvider === "string") arr.push([
            name,
            tokenOrProvider
        ]);
        else arr.push(tokenOrProvider().then((token)=>[
                name,
                token
            ]));
        return arr;
    }, [])).then((resolvedPairs)=>resolvedPairs.reduce((logins, [key, value])=>{
            logins[key] = value;
            return logins;
        }, {}));
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"c6WUe":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "fromCognitoIdentityPool", ()=>fromCognitoIdentityPool);
var _clientCognitoIdentity = require("@aws-sdk/client-cognito-identity");
var _propertyProvider = require("@aws-sdk/property-provider");
var _fromCognitoIdentity = require("./fromCognitoIdentity");
var _localStorage = require("./localStorage");
var _resolveLogins = require("./resolveLogins");
function fromCognitoIdentityPool({ accountId , cache =(0, _localStorage.localStorage)() , client , customRoleArn , identityPoolId , logins , userIdentifier =!logins || Object.keys(logins).length === 0 ? "ANONYMOUS" : undefined ,  }) {
    const cacheKey = userIdentifier ? `aws:cognito-identity-credentials:${identityPoolId}:${userIdentifier}` : undefined;
    let provider = async ()=>{
        let identityId = cacheKey && await cache.getItem(cacheKey);
        if (!identityId) {
            const { IdentityId =throwOnMissingId()  } = await client.send(new (0, _clientCognitoIdentity.GetIdCommand)({
                AccountId: accountId,
                IdentityPoolId: identityPoolId,
                Logins: logins ? await (0, _resolveLogins.resolveLogins)(logins) : undefined
            }));
            identityId = IdentityId;
            if (cacheKey) Promise.resolve(cache.setItem(cacheKey, identityId)).catch(()=>{});
        }
        provider = (0, _fromCognitoIdentity.fromCognitoIdentity)({
            client,
            customRoleArn,
            logins,
            identityId
        });
        return provider();
    };
    return ()=>provider().catch(async (err)=>{
            if (cacheKey) Promise.resolve(cache.removeItem(cacheKey)).catch(()=>{});
            throw err;
        });
}
function throwOnMissingId() {
    throw new (0, _propertyProvider.CredentialsProviderError)("Response from Amazon Cognito contained no identity ID");
}

},{"@aws-sdk/client-cognito-identity":"aWIu4","@aws-sdk/property-provider":"eAar8","./fromCognitoIdentity":"hpX3V","./localStorage":"3U0rK","./resolveLogins":"3i3w7","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"3U0rK":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "localStorage", ()=>localStorage);
var _indexedDbStorage = require("./IndexedDbStorage");
var _inMemoryStorage = require("./InMemoryStorage");
const inMemoryStorage = new (0, _inMemoryStorage.InMemoryStorage)();
function localStorage() {
    if (typeof self === "object" && self.indexedDB) return new (0, _indexedDbStorage.IndexedDbStorage)();
    if (typeof window === "object" && window.localStorage) return window.localStorage;
    return inMemoryStorage;
}

},{"./IndexedDbStorage":"6c2TM","./InMemoryStorage":"lgrCz","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"6c2TM":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "IndexedDbStorage", ()=>IndexedDbStorage);
const STORE_NAME = "IdentityIds";
class IndexedDbStorage {
    constructor(dbName = "aws:cognito-identity-ids"){
        this.dbName = dbName;
    }
    getItem(key) {
        return this.withObjectStore("readonly", (store)=>{
            const req = store.get(key);
            return new Promise((resolve)=>{
                req.onerror = ()=>resolve(null);
                req.onsuccess = ()=>resolve(req.result ? req.result.value : null);
            });
        }).catch(()=>null);
    }
    removeItem(key) {
        return this.withObjectStore("readwrite", (store)=>{
            const req = store.delete(key);
            return new Promise((resolve, reject)=>{
                req.onerror = ()=>reject(req.error);
                req.onsuccess = ()=>resolve();
            });
        });
    }
    setItem(id, value) {
        return this.withObjectStore("readwrite", (store)=>{
            const req = store.put({
                id,
                value
            });
            return new Promise((resolve, reject)=>{
                req.onerror = ()=>reject(req.error);
                req.onsuccess = ()=>resolve();
            });
        });
    }
    getDb() {
        const openDbRequest = self.indexedDB.open(this.dbName, 1);
        return new Promise((resolve, reject)=>{
            openDbRequest.onsuccess = ()=>{
                resolve(openDbRequest.result);
            };
            openDbRequest.onerror = ()=>{
                reject(openDbRequest.error);
            };
            openDbRequest.onblocked = ()=>{
                reject(new Error("Unable to access DB"));
            };
            openDbRequest.onupgradeneeded = ()=>{
                const db = openDbRequest.result;
                db.onerror = ()=>{
                    reject(new Error("Failed to create object store"));
                };
                db.createObjectStore(STORE_NAME, {
                    keyPath: "id"
                });
            };
        });
    }
    withObjectStore(mode, action) {
        return this.getDb().then((db)=>{
            const tx = db.transaction(STORE_NAME, mode);
            tx.oncomplete = ()=>db.close();
            return new Promise((resolve, reject)=>{
                tx.onerror = ()=>reject(tx.error);
                resolve(action(tx.objectStore(STORE_NAME)));
            }).catch((err)=>{
                db.close();
                throw err;
            });
        });
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lgrCz":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "InMemoryStorage", ()=>InMemoryStorage);
class InMemoryStorage {
    constructor(store = {}){
        this.store = store;
    }
    getItem(key) {
        if (key in this.store) return this.store[key];
        return null;
    }
    removeItem(key) {
        delete this.store[key];
    }
    setItem(key, value) {
        this.store[key] = value;
    }
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gB3Ml":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
/**
 * Returns a list of HTML div elements based on the game provided.
 * It will automatically access the database for the data
 *
 * @param {string} game The id for the game
 *
 * @return {array} Returns a list of HTML div elements for each rank
 */ parcelHelpers.export(exports, "generateRanksHTML", ()=>generateRanksHTML);
var _awsJs = require("./aws.js");
var _awsJsDefault = parcelHelpers.interopDefault(_awsJs);
async function generateRanksHTML(game) {
    // DB connection
    let db = new (0, _awsJsDefault.default)();
    // Grab rank data from the db using the specified game
    let rankData = await db.getTableContents(game);
    rankData = rankData.Items;
    // Sort the ranks
    rankData = rankData.sort((a, b)=>parseInt(a.position.S) > parseInt(b.position.S) ? 1 : -1);
    // This will produce basically the same html structure for
    // each rank tile, and will store each in a list.
    let rankHTML = [];
    rankData.forEach((item)=>{
        rankHTML.push(`<div class='rankTile' id=${item.position.S} style="background-image:url(/rank_icons/${item.img.S});"><h3>${item.displayName.S}</h3></button></div>`);
    });
    return rankHTML;
}

},{"./aws.js":"bxWuF","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"EIpTr":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
// ********************************
// This file will handle the calculations
// ********************************
/**
 * Calculates the equivalent ranks for the selected game and rank
 * @param {Object} data The key value pairs for each game, key being the game id,
 * and the value being the list of data for each rank
 * @return {Object} Returns key value pairs with key being game id, and value being
 * the equivalent rank
 */ parcelHelpers.export(exports, "computeEquivalentRanks", ()=>computeEquivalentRanks);
function computeEquivalentRanks(data) {
    // This will be the percent of player that are below the skill level at selected rank
    let rankPercentile = 0;
    // sg -> selected game -> each rank of the selected game
    let sg = data[sessionStorage.getItem("selectedGame")]["Items"];
    //Total population for our selected game
    let selectedGamePopulation = 0;
    //List of population for each rank which we will combine
    let selectedGameIndividualPopulations = [];
    // Sort the ranks
    sg = sg.sort((a, b)=>parseInt(a.position.S) > parseInt(b.position.S) ? 1 : -1);
    // Get some feedback on this
    // Calculates the total population percent, which usually is between 99 and 100
    // or also my be slightly above 100, but is important for accuracy
    sg.forEach((rank)=>{
        selectedGameIndividualPopulations.push(rank.population.S);
    });
    selectedGamePopulation = selectedGameIndividualPopulations.reduce(combineFloats);
    // Calculate the population percent below the rank selected, hence (rank - 1)
    let selectedGameCumulative = 0;
    // Like python for i in range():
    for (const i of Array(parseInt(sessionStorage.getItem("selectedRank") - 1)).keys())selectedGameCumulative = combineFloats(selectedGameCumulative, sg[i].population.S);
    // The most important calculation for the percentile that the rank falls in
    selectedGameRankPercentile = selectedGameCumulative / selectedGamePopulation;
    // Time to compute the equivalent ranks
    let equivalentRanks = {};
    for (const [key, value] of Object.entries(data)){
        let i1 = 0;
        let cumulative = 0;
        let percentile = 0;
        let totalPopulation = 0;
        let ranks = value["Items"];
        let rankPopulations = [];
        // Sort the ranks
        ranks = ranks.sort((a, b)=>parseInt(a.position.S) > parseInt(b.position.S) ? 1 : -1);
        // Populating rankPopulations
        for (const i2 of Array(parseInt(ranks.length - 1)).keys())rankPopulations.push(ranks[i2].population.S);
        // Calculating total population to use in percentile calculations
        totalPopulation = rankPopulations.reduce(combineFloats);
        while(cumulative / totalPopulation < selectedGameRankPercentile){
            cumulative = combineFloats(ranks[i1].population.S, cumulative);
            i1++;
        }
        // Add completed calculations to results object
        equivalentRanks[key] = ranks[i1].position.S;
    }
    return equivalentRanks;
}
function combineFloats(a, b) {
    return parseFloat(a) + parseFloat(b);
}
function combineInts(a, b) {
    return parseInt(a) + parseInt(b);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"lzTRh":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "generateResultsHTML", ()=>generateResultsHTML);
var _aws = require("./aws");
var _awsDefault = parcelHelpers.interopDefault(_aws);
function generateResultsHTML(results, data) {
    // Scroll to the top of the page
    window.scrollTo(0, 0);
    let iconsHTML = [];
    for (const [key, value] of Object.entries(results)){
        rankName = data[key]["Items"][value - 1].displayName.S;
        rankImg = data[key]["Items"][value - 1].img.S;
        iconsHTML.push(buildResultHTML(rankName, rankImg));
    }
    selectedRankImg = data[sessionStorage.getItem("selectedGame")]["Items"][sessionStorage.getItem("selectedRank") - 1].img.S;
    selectedRankName = data[sessionStorage.getItem("selectedGame")]["Items"][sessionStorage.getItem("selectedRank") - 1].displayName.S;
    resultsHTML = `<div id="selectedRankIconPH" style='background-image:url(/rank_icons/${selectedRankImg})'></div><div id="selectedRankTextPH"><h3>${selectedRankName}</h3></div><div id="eqRanksPHParent">${iconsHTML.join("")}     
</div> <div id="backButton"><h4>Start Over</h4></div>`;
    return resultsHTML;
}
function buildResultHTML(rankName1, rankImg1) {
    return `<div class='eqRanksIconPH' style='background-image:url(/rank_icons/${rankImg1})'>
          <h3 class='eqRankName'>${rankName1}</h3>
      </div>`;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3","./aws":"bxWuF"}],"c8E9o":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "resetHomeView", ()=>resetHomeView);
function resetHomeView() {
    document.querySelector("#content").innerHTML = `<div id="gameSelect">
        <div class="gameTile">
          <svg
            version="1.0"
            xmlns="http://www.w3.org/2000/svg"
            width="300.000000pt"
            height="221.000000pt"
            viewBox="0 0 300.000000 221.000000"
            preserveAspectRatio="xMidYMid meet"
          >
            <metadata>
              Created by potrace 1.10, written by Peter Selinger 2001-2011
            </metadata>
            <g
              transform="translate(0.000000,221.000000) scale(0.100000,-0.100000)"
              fill="#000000"
              stroke="none"
            >
              <path
                d="M935 2064 c-210 -32 -282 -60 -368 -143 -116 -112 -210 -290 -306
          -579 -96 -288 -175 -761 -151 -907 17 -107 93 -204 198 -253 50 -24 70 -27
          157 -27 94 0 105 2 170 34 92 45 158 114 322 332 72 96 144 186 160 201 138
          131 626 131 767 0 16 -15 87 -106 159 -202 159 -214 228 -285 322 -331 65 -32
          76 -34 170 -34 90 0 106 3 159 29 76 37 141 102 173 173 21 46 26 71 25 137 0
          145 -41 428 -88 626 -52 213 -163 504 -245 643 -57 97 -167 209 -231 237 -116
          50 -354 81 -463 61 -90 -17 -143 -55 -181 -127 -17 -33 -33 -65 -35 -72 -5
          -16 -146 -27 -232 -18 -64 7 -66 9 -77 41 -22 66 -69 123 -124 150 -43 21 -70
          26 -152 29 -54 3 -112 2 -129 0z m1178 -405 c40 -22 64 -54 71 -96 14 -78 -50
          -153 -129 -153 -37 0 -92 35 -110 70 -30 57 -9 141 44 173 30 19 93 22 124 6z
          m-1155 -29 c61 0 67 -9 65 -99 l-2 -81 78 0 c58 0 82 -4 91 -15 15 -18 14
          -205 -1 -220 -5 -5 -44 -11 -86 -15 l-78 -5 -1 -73 c0 -43 -5 -77 -13 -85 -7
          -7 -48 -13 -107 -14 -123 -3 -134 6 -134 107 l0 70 -67 1 c-38 1 -71 1 -75 0
          -4 0 -15 11 -24 25 -14 21 -16 40 -10 116 4 56 11 95 19 100 6 4 44 8 83 8
          l72 0 3 79 c2 44 8 83 12 87 9 10 105 23 125 18 8 -2 30 -4 50 -4z m956 -201
          c30 -24 57 -80 51 -109 -18 -94 -103 -143 -189 -110 -27 10 -62 58 -72 98 -9
          34 22 105 53 124 41 25 123 24 157 -3z m452 -14 c30 -35 38 -64 31 -116 -6
          -43 -37 -75 -91 -95 -41 -15 -122 7 -131 36 -4 11 -10 20 -15 20 -18 0 -22 78
          -5 115 29 60 60 78 128 73 49 -4 62 -9 83 -33z m-229 -204 c31 -23 41 -38 46
          -68 21 -128 -111 -211 -204 -130 -35 30 -49 59 -49 99 2 111 115 165 207 99z"
              />
            </g>
          </svg>
          <div class="skeleton skeleton-text"></div>
        </div>
        <div class="gameTile">
          <svg
            version="1.0"
            xmlns="http://www.w3.org/2000/svg"
            width="300.000000pt"
            height="221.000000pt"
            viewBox="0 0 300.000000 221.000000"
            preserveAspectRatio="xMidYMid meet"
          >
            <metadata>
              Created by potrace 1.10, written by Peter Selinger 2001-2011
            </metadata>
            <g
              transform="translate(0.000000,221.000000) scale(0.100000,-0.100000)"
              fill="#000000"
              stroke="none"
            >
              <path
                d="M935 2064 c-210 -32 -282 -60 -368 -143 -116 -112 -210 -290 -306
          -579 -96 -288 -175 -761 -151 -907 17 -107 93 -204 198 -253 50 -24 70 -27
          157 -27 94 0 105 2 170 34 92 45 158 114 322 332 72 96 144 186 160 201 138
          131 626 131 767 0 16 -15 87 -106 159 -202 159 -214 228 -285 322 -331 65 -32
          76 -34 170 -34 90 0 106 3 159 29 76 37 141 102 173 173 21 46 26 71 25 137 0
          145 -41 428 -88 626 -52 213 -163 504 -245 643 -57 97 -167 209 -231 237 -116
          50 -354 81 -463 61 -90 -17 -143 -55 -181 -127 -17 -33 -33 -65 -35 -72 -5
          -16 -146 -27 -232 -18 -64 7 -66 9 -77 41 -22 66 -69 123 -124 150 -43 21 -70
          26 -152 29 -54 3 -112 2 -129 0z m1178 -405 c40 -22 64 -54 71 -96 14 -78 -50
          -153 -129 -153 -37 0 -92 35 -110 70 -30 57 -9 141 44 173 30 19 93 22 124 6z
          m-1155 -29 c61 0 67 -9 65 -99 l-2 -81 78 0 c58 0 82 -4 91 -15 15 -18 14
          -205 -1 -220 -5 -5 -44 -11 -86 -15 l-78 -5 -1 -73 c0 -43 -5 -77 -13 -85 -7
          -7 -48 -13 -107 -14 -123 -3 -134 6 -134 107 l0 70 -67 1 c-38 1 -71 1 -75 0
          -4 0 -15 11 -24 25 -14 21 -16 40 -10 116 4 56 11 95 19 100 6 4 44 8 83 8
          l72 0 3 79 c2 44 8 83 12 87 9 10 105 23 125 18 8 -2 30 -4 50 -4z m956 -201
          c30 -24 57 -80 51 -109 -18 -94 -103 -143 -189 -110 -27 10 -62 58 -72 98 -9
          34 22 105 53 124 41 25 123 24 157 -3z m452 -14 c30 -35 38 -64 31 -116 -6
          -43 -37 -75 -91 -95 -41 -15 -122 7 -131 36 -4 11 -10 20 -15 20 -18 0 -22 78
          -5 115 29 60 60 78 128 73 49 -4 62 -9 83 -33z m-229 -204 c31 -23 41 -38 46
          -68 21 -128 -111 -211 -204 -130 -35 30 -49 59 -49 99 2 111 115 165 207 99z"
              />
            </g>
          </svg>
          <div class="skeleton skeleton-text"></div>
        </div>
        <div class="gameTile">
          <svg
            version="1.0"
            xmlns="http://www.w3.org/2000/svg"
            width="300.000000pt"
            height="221.000000pt"
            viewBox="0 0 300.000000 221.000000"
            preserveAspectRatio="xMidYMid meet"
          >
            <metadata>
              Created by potrace 1.10, written by Peter Selinger 2001-2011
            </metadata>
            <g
              transform="translate(0.000000,221.000000) scale(0.100000,-0.100000)"
              fill="#000000"
              stroke="none"
            >
              <path
                d="M935 2064 c-210 -32 -282 -60 -368 -143 -116 -112 -210 -290 -306
          -579 -96 -288 -175 -761 -151 -907 17 -107 93 -204 198 -253 50 -24 70 -27
          157 -27 94 0 105 2 170 34 92 45 158 114 322 332 72 96 144 186 160 201 138
          131 626 131 767 0 16 -15 87 -106 159 -202 159 -214 228 -285 322 -331 65 -32
          76 -34 170 -34 90 0 106 3 159 29 76 37 141 102 173 173 21 46 26 71 25 137 0
          145 -41 428 -88 626 -52 213 -163 504 -245 643 -57 97 -167 209 -231 237 -116
          50 -354 81 -463 61 -90 -17 -143 -55 -181 -127 -17 -33 -33 -65 -35 -72 -5
          -16 -146 -27 -232 -18 -64 7 -66 9 -77 41 -22 66 -69 123 -124 150 -43 21 -70
          26 -152 29 -54 3 -112 2 -129 0z m1178 -405 c40 -22 64 -54 71 -96 14 -78 -50
          -153 -129 -153 -37 0 -92 35 -110 70 -30 57 -9 141 44 173 30 19 93 22 124 6z
          m-1155 -29 c61 0 67 -9 65 -99 l-2 -81 78 0 c58 0 82 -4 91 -15 15 -18 14
          -205 -1 -220 -5 -5 -44 -11 -86 -15 l-78 -5 -1 -73 c0 -43 -5 -77 -13 -85 -7
          -7 -48 -13 -107 -14 -123 -3 -134 6 -134 107 l0 70 -67 1 c-38 1 -71 1 -75 0
          -4 0 -15 11 -24 25 -14 21 -16 40 -10 116 4 56 11 95 19 100 6 4 44 8 83 8
          l72 0 3 79 c2 44 8 83 12 87 9 10 105 23 125 18 8 -2 30 -4 50 -4z m956 -201
          c30 -24 57 -80 51 -109 -18 -94 -103 -143 -189 -110 -27 10 -62 58 -72 98 -9
          34 22 105 53 124 41 25 123 24 157 -3z m452 -14 c30 -35 38 -64 31 -116 -6
          -43 -37 -75 -91 -95 -41 -15 -122 7 -131 36 -4 11 -10 20 -15 20 -18 0 -22 78
          -5 115 29 60 60 78 128 73 49 -4 62 -9 83 -33z m-229 -204 c31 -23 41 -38 46
          -68 21 -128 -111 -211 -204 -130 -35 30 -49 59 -49 99 2 111 115 165 207 99z"
              />
            </g>
          </svg>
          <div class="skeleton skeleton-text"></div>
        </div>
        <div class="gameTile">
          <svg
            version="1.0"
            xmlns="http://www.w3.org/2000/svg"
            width="300.000000pt"
            height="221.000000pt"
            viewBox="0 0 300.000000 221.000000"
            preserveAspectRatio="xMidYMid meet"
          >
            <metadata>
              Created by potrace 1.10, written by Peter Selinger 2001-2011
            </metadata>
            <g
              transform="translate(0.000000,221.000000) scale(0.100000,-0.100000)"
              fill="#000000"
              stroke="none"
            >
              <path
                d="M935 2064 c-210 -32 -282 -60 -368 -143 -116 -112 -210 -290 -306
          -579 -96 -288 -175 -761 -151 -907 17 -107 93 -204 198 -253 50 -24 70 -27
          157 -27 94 0 105 2 170 34 92 45 158 114 322 332 72 96 144 186 160 201 138
          131 626 131 767 0 16 -15 87 -106 159 -202 159 -214 228 -285 322 -331 65 -32
          76 -34 170 -34 90 0 106 3 159 29 76 37 141 102 173 173 21 46 26 71 25 137 0
          145 -41 428 -88 626 -52 213 -163 504 -245 643 -57 97 -167 209 -231 237 -116
          50 -354 81 -463 61 -90 -17 -143 -55 -181 -127 -17 -33 -33 -65 -35 -72 -5
          -16 -146 -27 -232 -18 -64 7 -66 9 -77 41 -22 66 -69 123 -124 150 -43 21 -70
          26 -152 29 -54 3 -112 2 -129 0z m1178 -405 c40 -22 64 -54 71 -96 14 -78 -50
          -153 -129 -153 -37 0 -92 35 -110 70 -30 57 -9 141 44 173 30 19 93 22 124 6z
          m-1155 -29 c61 0 67 -9 65 -99 l-2 -81 78 0 c58 0 82 -4 91 -15 15 -18 14
          -205 -1 -220 -5 -5 -44 -11 -86 -15 l-78 -5 -1 -73 c0 -43 -5 -77 -13 -85 -7
          -7 -48 -13 -107 -14 -123 -3 -134 6 -134 107 l0 70 -67 1 c-38 1 -71 1 -75 0
          -4 0 -15 11 -24 25 -14 21 -16 40 -10 116 4 56 11 95 19 100 6 4 44 8 83 8
          l72 0 3 79 c2 44 8 83 12 87 9 10 105 23 125 18 8 -2 30 -4 50 -4z m956 -201
          c30 -24 57 -80 51 -109 -18 -94 -103 -143 -189 -110 -27 10 -62 58 -72 98 -9
          34 22 105 53 124 41 25 123 24 157 -3z m452 -14 c30 -35 38 -64 31 -116 -6
          -43 -37 -75 -91 -95 -41 -15 -122 7 -131 36 -4 11 -10 20 -15 20 -18 0 -22 78
          -5 115 29 60 60 78 128 73 49 -4 62 -9 83 -33z m-229 -204 c31 -23 41 -38 46
          -68 21 -128 -111 -211 -204 -130 -35 30 -49 59 -49 99 2 111 115 165 207 99z"
              />
            </g>
          </svg>
          <div class="skeleton skeleton-text"></div>
        </div>
        <div class="gameTile">
          <svg
            version="1.0"
            xmlns="http://www.w3.org/2000/svg"
            width="300.000000pt"
            height="221.000000pt"
            viewBox="0 0 300.000000 221.000000"
            preserveAspectRatio="xMidYMid meet"
          >
            <metadata>
              Created by potrace 1.10, written by Peter Selinger 2001-2011
            </metadata>
            <g
              transform="translate(0.000000,221.000000) scale(0.100000,-0.100000)"
              fill="#000000"
              stroke="none"
            >
              <path
                d="M935 2064 c-210 -32 -282 -60 -368 -143 -116 -112 -210 -290 -306
          -579 -96 -288 -175 -761 -151 -907 17 -107 93 -204 198 -253 50 -24 70 -27
          157 -27 94 0 105 2 170 34 92 45 158 114 322 332 72 96 144 186 160 201 138
          131 626 131 767 0 16 -15 87 -106 159 -202 159 -214 228 -285 322 -331 65 -32
          76 -34 170 -34 90 0 106 3 159 29 76 37 141 102 173 173 21 46 26 71 25 137 0
          145 -41 428 -88 626 -52 213 -163 504 -245 643 -57 97 -167 209 -231 237 -116
          50 -354 81 -463 61 -90 -17 -143 -55 -181 -127 -17 -33 -33 -65 -35 -72 -5
          -16 -146 -27 -232 -18 -64 7 -66 9 -77 41 -22 66 -69 123 -124 150 -43 21 -70
          26 -152 29 -54 3 -112 2 -129 0z m1178 -405 c40 -22 64 -54 71 -96 14 -78 -50
          -153 -129 -153 -37 0 -92 35 -110 70 -30 57 -9 141 44 173 30 19 93 22 124 6z
          m-1155 -29 c61 0 67 -9 65 -99 l-2 -81 78 0 c58 0 82 -4 91 -15 15 -18 14
          -205 -1 -220 -5 -5 -44 -11 -86 -15 l-78 -5 -1 -73 c0 -43 -5 -77 -13 -85 -7
          -7 -48 -13 -107 -14 -123 -3 -134 6 -134 107 l0 70 -67 1 c-38 1 -71 1 -75 0
          -4 0 -15 11 -24 25 -14 21 -16 40 -10 116 4 56 11 95 19 100 6 4 44 8 83 8
          l72 0 3 79 c2 44 8 83 12 87 9 10 105 23 125 18 8 -2 30 -4 50 -4z m956 -201
          c30 -24 57 -80 51 -109 -18 -94 -103 -143 -189 -110 -27 10 -62 58 -72 98 -9
          34 22 105 53 124 41 25 123 24 157 -3z m452 -14 c30 -35 38 -64 31 -116 -6
          -43 -37 -75 -91 -95 -41 -15 -122 7 -131 36 -4 11 -10 20 -15 20 -18 0 -22 78
          -5 115 29 60 60 78 128 73 49 -4 62 -9 83 -33z m-229 -204 c31 -23 41 -38 46
          -68 21 -128 -111 -211 -204 -130 -35 30 -49 59 -49 99 2 111 115 165 207 99z"
              />
            </g>
          </svg>
          <div class="skeleton skeleton-text"></div>
        </div>
        <div class="gameTile">
          <svg
            version="1.0"
            xmlns="http://www.w3.org/2000/svg"
            width="300.000000pt"
            height="221.000000pt"
            viewBox="0 0 300.000000 221.000000"
            preserveAspectRatio="xMidYMid meet"
          >
            <metadata>
              Created by potrace 1.10, written by Peter Selinger 2001-2011
            </metadata>
            <g
              transform="translate(0.000000,221.000000) scale(0.100000,-0.100000)"
              fill="#000000"
              stroke="none"
            >
              <path
                d="M935 2064 c-210 -32 -282 -60 -368 -143 -116 -112 -210 -290 -306
          -579 -96 -288 -175 -761 -151 -907 17 -107 93 -204 198 -253 50 -24 70 -27
          157 -27 94 0 105 2 170 34 92 45 158 114 322 332 72 96 144 186 160 201 138
          131 626 131 767 0 16 -15 87 -106 159 -202 159 -214 228 -285 322 -331 65 -32
          76 -34 170 -34 90 0 106 3 159 29 76 37 141 102 173 173 21 46 26 71 25 137 0
          145 -41 428 -88 626 -52 213 -163 504 -245 643 -57 97 -167 209 -231 237 -116
          50 -354 81 -463 61 -90 -17 -143 -55 -181 -127 -17 -33 -33 -65 -35 -72 -5
          -16 -146 -27 -232 -18 -64 7 -66 9 -77 41 -22 66 -69 123 -124 150 -43 21 -70
          26 -152 29 -54 3 -112 2 -129 0z m1178 -405 c40 -22 64 -54 71 -96 14 -78 -50
          -153 -129 -153 -37 0 -92 35 -110 70 -30 57 -9 141 44 173 30 19 93 22 124 6z
          m-1155 -29 c61 0 67 -9 65 -99 l-2 -81 78 0 c58 0 82 -4 91 -15 15 -18 14
          -205 -1 -220 -5 -5 -44 -11 -86 -15 l-78 -5 -1 -73 c0 -43 -5 -77 -13 -85 -7
          -7 -48 -13 -107 -14 -123 -3 -134 6 -134 107 l0 70 -67 1 c-38 1 -71 1 -75 0
          -4 0 -15 11 -24 25 -14 21 -16 40 -10 116 4 56 11 95 19 100 6 4 44 8 83 8
          l72 0 3 79 c2 44 8 83 12 87 9 10 105 23 125 18 8 -2 30 -4 50 -4z m956 -201
          c30 -24 57 -80 51 -109 -18 -94 -103 -143 -189 -110 -27 10 -62 58 -72 98 -9
          34 22 105 53 124 41 25 123 24 157 -3z m452 -14 c30 -35 38 -64 31 -116 -6
          -43 -37 -75 -91 -95 -41 -15 -122 7 -131 36 -4 11 -10 20 -15 20 -18 0 -22 78
          -5 115 29 60 60 78 128 73 49 -4 62 -9 83 -33z m-229 -204 c31 -23 41 -38 46
          -68 21 -128 -111 -211 -204 -130 -35 30 -49 59 -49 99 2 111 115 165 207 99z"
              />
            </g>
          </svg>
          <div class="skeleton skeleton-text"></div>
        </div>
        <div class="gameTile">
          <svg
            version="1.0"
            xmlns="http://www.w3.org/2000/svg"
            width="300.000000pt"
            height="221.000000pt"
            viewBox="0 0 300.000000 221.000000"
            preserveAspectRatio="xMidYMid meet"
          >
            <metadata>
              Created by potrace 1.10, written by Peter Selinger 2001-2011
            </metadata>
            <g
              transform="translate(0.000000,221.000000) scale(0.100000,-0.100000)"
              fill="#000000"
              stroke="none"
            >
              <path
                d="M935 2064 c-210 -32 -282 -60 -368 -143 -116 -112 -210 -290 -306
          -579 -96 -288 -175 -761 -151 -907 17 -107 93 -204 198 -253 50 -24 70 -27
          157 -27 94 0 105 2 170 34 92 45 158 114 322 332 72 96 144 186 160 201 138
          131 626 131 767 0 16 -15 87 -106 159 -202 159 -214 228 -285 322 -331 65 -32
          76 -34 170 -34 90 0 106 3 159 29 76 37 141 102 173 173 21 46 26 71 25 137 0
          145 -41 428 -88 626 -52 213 -163 504 -245 643 -57 97 -167 209 -231 237 -116
          50 -354 81 -463 61 -90 -17 -143 -55 -181 -127 -17 -33 -33 -65 -35 -72 -5
          -16 -146 -27 -232 -18 -64 7 -66 9 -77 41 -22 66 -69 123 -124 150 -43 21 -70
          26 -152 29 -54 3 -112 2 -129 0z m1178 -405 c40 -22 64 -54 71 -96 14 -78 -50
          -153 -129 -153 -37 0 -92 35 -110 70 -30 57 -9 141 44 173 30 19 93 22 124 6z
          m-1155 -29 c61 0 67 -9 65 -99 l-2 -81 78 0 c58 0 82 -4 91 -15 15 -18 14
          -205 -1 -220 -5 -5 -44 -11 -86 -15 l-78 -5 -1 -73 c0 -43 -5 -77 -13 -85 -7
          -7 -48 -13 -107 -14 -123 -3 -134 6 -134 107 l0 70 -67 1 c-38 1 -71 1 -75 0
          -4 0 -15 11 -24 25 -14 21 -16 40 -10 116 4 56 11 95 19 100 6 4 44 8 83 8
          l72 0 3 79 c2 44 8 83 12 87 9 10 105 23 125 18 8 -2 30 -4 50 -4z m956 -201
          c30 -24 57 -80 51 -109 -18 -94 -103 -143 -189 -110 -27 10 -62 58 -72 98 -9
          34 22 105 53 124 41 25 123 24 157 -3z m452 -14 c30 -35 38 -64 31 -116 -6
          -43 -37 -75 -91 -95 -41 -15 -122 7 -131 36 -4 11 -10 20 -15 20 -18 0 -22 78
          -5 115 29 60 60 78 128 73 49 -4 62 -9 83 -33z m-229 -204 c31 -23 41 -38 46
          -68 21 -128 -111 -211 -204 -130 -35 30 -49 59 -49 99 2 111 115 165 207 99z"
              />
            </g>
          </svg>
          <div class="skeleton skeleton-text"></div>
        </div>
        <div class="gameTile">
          <svg
            version="1.0"
            xmlns="http://www.w3.org/2000/svg"
            width="300.000000pt"
            height="221.000000pt"
            viewBox="0 0 300.000000 221.000000"
            preserveAspectRatio="xMidYMid meet"
          >
            <metadata>
              Created by potrace 1.10, written by Peter Selinger 2001-2011
            </metadata>
            <g
              transform="translate(0.000000,221.000000) scale(0.100000,-0.100000)"
              fill="#000000"
              stroke="none"
            >
              <path
                d="M935 2064 c-210 -32 -282 -60 -368 -143 -116 -112 -210 -290 -306
          -579 -96 -288 -175 -761 -151 -907 17 -107 93 -204 198 -253 50 -24 70 -27
          157 -27 94 0 105 2 170 34 92 45 158 114 322 332 72 96 144 186 160 201 138
          131 626 131 767 0 16 -15 87 -106 159 -202 159 -214 228 -285 322 -331 65 -32
          76 -34 170 -34 90 0 106 3 159 29 76 37 141 102 173 173 21 46 26 71 25 137 0
          145 -41 428 -88 626 -52 213 -163 504 -245 643 -57 97 -167 209 -231 237 -116
          50 -354 81 -463 61 -90 -17 -143 -55 -181 -127 -17 -33 -33 -65 -35 -72 -5
          -16 -146 -27 -232 -18 -64 7 -66 9 -77 41 -22 66 -69 123 -124 150 -43 21 -70
          26 -152 29 -54 3 -112 2 -129 0z m1178 -405 c40 -22 64 -54 71 -96 14 -78 -50
          -153 -129 -153 -37 0 -92 35 -110 70 -30 57 -9 141 44 173 30 19 93 22 124 6z
          m-1155 -29 c61 0 67 -9 65 -99 l-2 -81 78 0 c58 0 82 -4 91 -15 15 -18 14
          -205 -1 -220 -5 -5 -44 -11 -86 -15 l-78 -5 -1 -73 c0 -43 -5 -77 -13 -85 -7
          -7 -48 -13 -107 -14 -123 -3 -134 6 -134 107 l0 70 -67 1 c-38 1 -71 1 -75 0
          -4 0 -15 11 -24 25 -14 21 -16 40 -10 116 4 56 11 95 19 100 6 4 44 8 83 8
          l72 0 3 79 c2 44 8 83 12 87 9 10 105 23 125 18 8 -2 30 -4 50 -4z m956 -201
          c30 -24 57 -80 51 -109 -18 -94 -103 -143 -189 -110 -27 10 -62 58 -72 98 -9
          34 22 105 53 124 41 25 123 24 157 -3z m452 -14 c30 -35 38 -64 31 -116 -6
          -43 -37 -75 -91 -95 -41 -15 -122 7 -131 36 -4 11 -10 20 -15 20 -18 0 -22 78
          -5 115 29 60 60 78 128 73 49 -4 62 -9 83 -33z m-229 -204 c31 -23 41 -38 46
          -68 21 -128 -111 -211 -204 -130 -35 30 -49 59 -49 99 2 111 115 165 207 99z"
              />
            </g>
          </svg>
          <div class="skeleton skeleton-text"></div>
        </div>
        <div class="gameTile">
          <svg
            version="1.0"
            xmlns="http://www.w3.org/2000/svg"
            width="300.000000pt"
            height="221.000000pt"
            viewBox="0 0 300.000000 221.000000"
            preserveAspectRatio="xMidYMid meet"
          >
            <metadata>
              Created by potrace 1.10, written by Peter Selinger 2001-2011
            </metadata>
            <g
              transform="translate(0.000000,221.000000) scale(0.100000,-0.100000)"
              fill="#000000"
              stroke="none"
            >
              <path
                d="M935 2064 c-210 -32 -282 -60 -368 -143 -116 -112 -210 -290 -306
          -579 -96 -288 -175 -761 -151 -907 17 -107 93 -204 198 -253 50 -24 70 -27
          157 -27 94 0 105 2 170 34 92 45 158 114 322 332 72 96 144 186 160 201 138
          131 626 131 767 0 16 -15 87 -106 159 -202 159 -214 228 -285 322 -331 65 -32
          76 -34 170 -34 90 0 106 3 159 29 76 37 141 102 173 173 21 46 26 71 25 137 0
          145 -41 428 -88 626 -52 213 -163 504 -245 643 -57 97 -167 209 -231 237 -116
          50 -354 81 -463 61 -90 -17 -143 -55 -181 -127 -17 -33 -33 -65 -35 -72 -5
          -16 -146 -27 -232 -18 -64 7 -66 9 -77 41 -22 66 -69 123 -124 150 -43 21 -70
          26 -152 29 -54 3 -112 2 -129 0z m1178 -405 c40 -22 64 -54 71 -96 14 -78 -50
          -153 -129 -153 -37 0 -92 35 -110 70 -30 57 -9 141 44 173 30 19 93 22 124 6z
          m-1155 -29 c61 0 67 -9 65 -99 l-2 -81 78 0 c58 0 82 -4 91 -15 15 -18 14
          -205 -1 -220 -5 -5 -44 -11 -86 -15 l-78 -5 -1 -73 c0 -43 -5 -77 -13 -85 -7
          -7 -48 -13 -107 -14 -123 -3 -134 6 -134 107 l0 70 -67 1 c-38 1 -71 1 -75 0
          -4 0 -15 11 -24 25 -14 21 -16 40 -10 116 4 56 11 95 19 100 6 4 44 8 83 8
          l72 0 3 79 c2 44 8 83 12 87 9 10 105 23 125 18 8 -2 30 -4 50 -4z m956 -201
          c30 -24 57 -80 51 -109 -18 -94 -103 -143 -189 -110 -27 10 -62 58 -72 98 -9
          34 22 105 53 124 41 25 123 24 157 -3z m452 -14 c30 -35 38 -64 31 -116 -6
          -43 -37 -75 -91 -95 -41 -15 -122 7 -131 36 -4 11 -10 20 -15 20 -18 0 -22 78
          -5 115 29 60 60 78 128 73 49 -4 62 -9 83 -33z m-229 -204 c31 -23 41 -38 46
          -68 21 -128 -111 -211 -204 -130 -35 30 -49 59 -49 99 2 111 115 165 207 99z"
              />
            </g>
          </svg>
          <div class="skeleton skeleton-text"></div>
        </div>
      </div>
      <div id="rankSelect"></div>
      <div id="submitButton" class="disabled"><h4>Generate</h4></div>`;
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}]},["dAPrZ","5AKj5"], "5AKj5", "parcelRequirecb96")

//# sourceMappingURL=index.a8f04b30.js.map
